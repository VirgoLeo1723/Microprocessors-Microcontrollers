
AssignmentFinal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000494c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08004a58  08004a58  00014a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ac0  08004ac0  000200b4  2**0
                  CONTENTS
  4 .ARM          00000000  08004ac0  08004ac0  000200b4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004ac0  08004ac0  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ac0  08004ac0  00014ac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ac4  08004ac4  00014ac4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  08004ac8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000046c  200000b4  08004b7c  000200b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000520  08004b7c  00020520  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c7f6  00000000  00000000  000200dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021b5  00000000  00000000  0002c8d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd8  00000000  00000000  0002ea88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00018265  00000000  00000000  0002f860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000e6b9  00000000  00000000  00047ac5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0008af46  00000000  00000000  0005617e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  000e10c4  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000ce8  00000000  00000000  000e1118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003c3c  00000000  00000000  000e1e00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000b4 	.word	0x200000b4
 8000128:	00000000 	.word	0x00000000
 800012c:	08004a40 	.word	0x08004a40

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000b8 	.word	0x200000b8
 8000148:	08004a40 	.word	0x08004a40

0800014c <button_reading>:
static uint8_t buttonBuffer [N0_OF_BUTTONS]={1,1,1,1};
static uint8_t flagForButtonPress3s [N0_OF_BUTTONS];
static uint16_t counterForButtonPress3s [N0_OF_BUTTONS ];
// mode  time  select button
// RESET INC DEC
void button_reading ( void ) {
 800014c:	b590      	push	{r4, r7, lr}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
	for ( char i = 0; i < N0_OF_BUTTONS ; i ++) {
 8000152:	2300      	movs	r3, #0
 8000154:	71fb      	strb	r3, [r7, #7]
 8000156:	e09e      	b.n	8000296 <button_reading+0x14a>
			Key_2[i]=Key_1[i];
 8000158:	79fa      	ldrb	r2, [r7, #7]
 800015a:	79fb      	ldrb	r3, [r7, #7]
 800015c:	4952      	ldr	r1, [pc, #328]	; (80002a8 <button_reading+0x15c>)
 800015e:	5c89      	ldrb	r1, [r1, r2]
 8000160:	4a52      	ldr	r2, [pc, #328]	; (80002ac <button_reading+0x160>)
 8000162:	54d1      	strb	r1, [r2, r3]
			Key_1[i]=Key_0[i];
 8000164:	79fa      	ldrb	r2, [r7, #7]
 8000166:	79fb      	ldrb	r3, [r7, #7]
 8000168:	4951      	ldr	r1, [pc, #324]	; (80002b0 <button_reading+0x164>)
 800016a:	5c89      	ldrb	r1, [r1, r2]
 800016c:	4a4e      	ldr	r2, [pc, #312]	; (80002a8 <button_reading+0x15c>)
 800016e:	54d1      	strb	r1, [r2, r3]
			if (i==0)  Key_0[i] = HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin);
 8000170:	79fb      	ldrb	r3, [r7, #7]
 8000172:	2b00      	cmp	r3, #0
 8000174:	d108      	bne.n	8000188 <button_reading+0x3c>
 8000176:	79fc      	ldrb	r4, [r7, #7]
 8000178:	2102      	movs	r1, #2
 800017a:	484e      	ldr	r0, [pc, #312]	; (80002b4 <button_reading+0x168>)
 800017c:	f001 fea8 	bl	8001ed0 <HAL_GPIO_ReadPin>
 8000180:	4603      	mov	r3, r0
 8000182:	461a      	mov	r2, r3
 8000184:	4b4a      	ldr	r3, [pc, #296]	; (80002b0 <button_reading+0x164>)
 8000186:	551a      	strb	r2, [r3, r4]
			if (i==1)  Key_0[i] = HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin);
 8000188:	79fb      	ldrb	r3, [r7, #7]
 800018a:	2b01      	cmp	r3, #1
 800018c:	d108      	bne.n	80001a0 <button_reading+0x54>
 800018e:	79fc      	ldrb	r4, [r7, #7]
 8000190:	2110      	movs	r1, #16
 8000192:	4848      	ldr	r0, [pc, #288]	; (80002b4 <button_reading+0x168>)
 8000194:	f001 fe9c 	bl	8001ed0 <HAL_GPIO_ReadPin>
 8000198:	4603      	mov	r3, r0
 800019a:	461a      	mov	r2, r3
 800019c:	4b44      	ldr	r3, [pc, #272]	; (80002b0 <button_reading+0x164>)
 800019e:	551a      	strb	r2, [r3, r4]
			if (i==2)  Key_0[i] = HAL_GPIO_ReadPin(Button3_GPIO_Port, Button3_Pin);
 80001a0:	79fb      	ldrb	r3, [r7, #7]
 80001a2:	2b02      	cmp	r3, #2
 80001a4:	d108      	bne.n	80001b8 <button_reading+0x6c>
 80001a6:	79fc      	ldrb	r4, [r7, #7]
 80001a8:	2101      	movs	r1, #1
 80001aa:	4843      	ldr	r0, [pc, #268]	; (80002b8 <button_reading+0x16c>)
 80001ac:	f001 fe90 	bl	8001ed0 <HAL_GPIO_ReadPin>
 80001b0:	4603      	mov	r3, r0
 80001b2:	461a      	mov	r2, r3
 80001b4:	4b3e      	ldr	r3, [pc, #248]	; (80002b0 <button_reading+0x164>)
 80001b6:	551a      	strb	r2, [r3, r4]
			if (i==3)  Key_0[i] = HAL_GPIO_ReadPin(Ped_Button_GPIO_Port, Ped_Button_Pin);
 80001b8:	79fb      	ldrb	r3, [r7, #7]
 80001ba:	2b03      	cmp	r3, #3
 80001bc:	d108      	bne.n	80001d0 <button_reading+0x84>
 80001be:	79fc      	ldrb	r4, [r7, #7]
 80001c0:	2101      	movs	r1, #1
 80001c2:	483c      	ldr	r0, [pc, #240]	; (80002b4 <button_reading+0x168>)
 80001c4:	f001 fe84 	bl	8001ed0 <HAL_GPIO_ReadPin>
 80001c8:	4603      	mov	r3, r0
 80001ca:	461a      	mov	r2, r3
 80001cc:	4b38      	ldr	r3, [pc, #224]	; (80002b0 <button_reading+0x164>)
 80001ce:	551a      	strb	r2, [r3, r4]

			if(Key_2[i]==Key_1[i] && Key_1[i]==Key_0[i]){
 80001d0:	79fb      	ldrb	r3, [r7, #7]
 80001d2:	4a36      	ldr	r2, [pc, #216]	; (80002ac <button_reading+0x160>)
 80001d4:	5cd2      	ldrb	r2, [r2, r3]
 80001d6:	79fb      	ldrb	r3, [r7, #7]
 80001d8:	4933      	ldr	r1, [pc, #204]	; (80002a8 <button_reading+0x15c>)
 80001da:	5ccb      	ldrb	r3, [r1, r3]
 80001dc:	429a      	cmp	r2, r3
 80001de:	d157      	bne.n	8000290 <button_reading+0x144>
 80001e0:	79fb      	ldrb	r3, [r7, #7]
 80001e2:	4a31      	ldr	r2, [pc, #196]	; (80002a8 <button_reading+0x15c>)
 80001e4:	5cd2      	ldrb	r2, [r2, r3]
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	4931      	ldr	r1, [pc, #196]	; (80002b0 <button_reading+0x164>)
 80001ea:	5ccb      	ldrb	r3, [r1, r3]
 80001ec:	429a      	cmp	r2, r3
 80001ee:	d14f      	bne.n	8000290 <button_reading+0x144>
				if(Key_3[i]!=Key_2[i]){
 80001f0:	79fb      	ldrb	r3, [r7, #7]
 80001f2:	4a32      	ldr	r2, [pc, #200]	; (80002bc <button_reading+0x170>)
 80001f4:	5cd2      	ldrb	r2, [r2, r3]
 80001f6:	79fb      	ldrb	r3, [r7, #7]
 80001f8:	492c      	ldr	r1, [pc, #176]	; (80002ac <button_reading+0x160>)
 80001fa:	5ccb      	ldrb	r3, [r1, r3]
 80001fc:	429a      	cmp	r2, r3
 80001fe:	d022      	beq.n	8000246 <button_reading+0xfa>
					Key_3[i]=Key_2[i];
 8000200:	79fa      	ldrb	r2, [r7, #7]
 8000202:	79fb      	ldrb	r3, [r7, #7]
 8000204:	4929      	ldr	r1, [pc, #164]	; (80002ac <button_reading+0x160>)
 8000206:	5c89      	ldrb	r1, [r1, r2]
 8000208:	4a2c      	ldr	r2, [pc, #176]	; (80002bc <button_reading+0x170>)
 800020a:	54d1      	strb	r1, [r2, r3]
					if(Key_3[i]==BUTTON_IS_PRESSED){
 800020c:	79fb      	ldrb	r3, [r7, #7]
 800020e:	4a2b      	ldr	r2, [pc, #172]	; (80002bc <button_reading+0x170>)
 8000210:	5cd3      	ldrb	r3, [r2, r3]
 8000212:	2b00      	cmp	r3, #0
 8000214:	d109      	bne.n	800022a <button_reading+0xde>
						buttonBuffer[i]=BUTTON_IS_PRESSED;
 8000216:	79fb      	ldrb	r3, [r7, #7]
 8000218:	4a29      	ldr	r2, [pc, #164]	; (80002c0 <button_reading+0x174>)
 800021a:	2100      	movs	r1, #0
 800021c:	54d1      	strb	r1, [r2, r3]
						counterForButtonPress3s[i]=DURATION_FOR_AUTO_INCREASING;
 800021e:	79fb      	ldrb	r3, [r7, #7]
 8000220:	4a28      	ldr	r2, [pc, #160]	; (80002c4 <button_reading+0x178>)
 8000222:	2164      	movs	r1, #100	; 0x64
 8000224:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000228:	e032      	b.n	8000290 <button_reading+0x144>
					}else{
						buttonBuffer[i]=BUTTON_IS_RELEASED;
 800022a:	79fb      	ldrb	r3, [r7, #7]
 800022c:	4a24      	ldr	r2, [pc, #144]	; (80002c0 <button_reading+0x174>)
 800022e:	2101      	movs	r1, #1
 8000230:	54d1      	strb	r1, [r2, r3]
						flagForButtonPress3s[i]=0;
 8000232:	79fb      	ldrb	r3, [r7, #7]
 8000234:	4a24      	ldr	r2, [pc, #144]	; (80002c8 <button_reading+0x17c>)
 8000236:	2100      	movs	r1, #0
 8000238:	54d1      	strb	r1, [r2, r3]
						FLAG_CHECK_PRESSED[i]=1;
 800023a:	79fb      	ldrb	r3, [r7, #7]
 800023c:	4a23      	ldr	r2, [pc, #140]	; (80002cc <button_reading+0x180>)
 800023e:	2101      	movs	r1, #1
 8000240:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000244:	e024      	b.n	8000290 <button_reading+0x144>
					}
				}else{
					if(Key_3[i]==BUTTON_IS_PRESSED){
 8000246:	79fb      	ldrb	r3, [r7, #7]
 8000248:	4a1c      	ldr	r2, [pc, #112]	; (80002bc <button_reading+0x170>)
 800024a:	5cd3      	ldrb	r3, [r2, r3]
 800024c:	2b00      	cmp	r3, #0
 800024e:	d11f      	bne.n	8000290 <button_reading+0x144>
						counterForButtonPress3s[i]--;
 8000250:	79fb      	ldrb	r3, [r7, #7]
 8000252:	4a1c      	ldr	r2, [pc, #112]	; (80002c4 <button_reading+0x178>)
 8000254:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000258:	3a01      	subs	r2, #1
 800025a:	b291      	uxth	r1, r2
 800025c:	4a19      	ldr	r2, [pc, #100]	; (80002c4 <button_reading+0x178>)
 800025e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						if(counterForButtonPress3s[i]==0){
 8000262:	79fb      	ldrb	r3, [r7, #7]
 8000264:	4a17      	ldr	r2, [pc, #92]	; (80002c4 <button_reading+0x178>)
 8000266:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800026a:	2b00      	cmp	r3, #0
 800026c:	d110      	bne.n	8000290 <button_reading+0x144>
							//flagForButtonPress3s[i]=1;
							Key_3[i]=BUTTON_IS_RELEASED;
 800026e:	79fb      	ldrb	r3, [r7, #7]
 8000270:	4a12      	ldr	r2, [pc, #72]	; (80002bc <button_reading+0x170>)
 8000272:	2101      	movs	r1, #1
 8000274:	54d1      	strb	r1, [r2, r3]
							buttonBuffer[i]=BUTTON_IS_RELEASED;
 8000276:	79fb      	ldrb	r3, [r7, #7]
 8000278:	4a11      	ldr	r2, [pc, #68]	; (80002c0 <button_reading+0x174>)
 800027a:	2101      	movs	r1, #1
 800027c:	54d1      	strb	r1, [r2, r3]
							FLAG_CHECK_PRESSED[i]=1;
 800027e:	79fb      	ldrb	r3, [r7, #7]
 8000280:	4a12      	ldr	r2, [pc, #72]	; (80002cc <button_reading+0x180>)
 8000282:	2101      	movs	r1, #1
 8000284:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
							flagForButtonPress3s[i]=0;
 8000288:	79fb      	ldrb	r3, [r7, #7]
 800028a:	4a0f      	ldr	r2, [pc, #60]	; (80002c8 <button_reading+0x17c>)
 800028c:	2100      	movs	r1, #0
 800028e:	54d1      	strb	r1, [r2, r3]
	for ( char i = 0; i < N0_OF_BUTTONS ; i ++) {
 8000290:	79fb      	ldrb	r3, [r7, #7]
 8000292:	3301      	adds	r3, #1
 8000294:	71fb      	strb	r3, [r7, #7]
 8000296:	79fb      	ldrb	r3, [r7, #7]
 8000298:	2b03      	cmp	r3, #3
 800029a:	f67f af5d 	bls.w	8000158 <button_reading+0xc>
						}
					}
			}
		}
	}
}
 800029e:	bf00      	nop
 80002a0:	bf00      	nop
 80002a2:	370c      	adds	r7, #12
 80002a4:	46bd      	mov	sp, r7
 80002a6:	bd90      	pop	{r4, r7, pc}
 80002a8:	20000014 	.word	0x20000014
 80002ac:	20000018 	.word	0x20000018
 80002b0:	20000010 	.word	0x20000010
 80002b4:	40010800 	.word	0x40010800
 80002b8:	40010c00 	.word	0x40010c00
 80002bc:	2000001c 	.word	0x2000001c
 80002c0:	20000020 	.word	0x20000020
 80002c4:	200001a4 	.word	0x200001a4
 80002c8:	200001ac 	.word	0x200001ac
 80002cc:	20000000 	.word	0x20000000

080002d0 <is_button_pressed>:
unsigned char is_button_pressed ( uint8_t index ) {
 80002d0:	b480      	push	{r7}
 80002d2:	b083      	sub	sp, #12
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	4603      	mov	r3, r0
 80002d8:	71fb      	strb	r3, [r7, #7]
	if( index >= N0_OF_BUTTONS ) return 0;
 80002da:	79fb      	ldrb	r3, [r7, #7]
 80002dc:	2b03      	cmp	r3, #3
 80002de:	d901      	bls.n	80002e4 <is_button_pressed+0x14>
 80002e0:	2300      	movs	r3, #0
 80002e2:	e012      	b.n	800030a <is_button_pressed+0x3a>
	if(buttonBuffer[index]==BUTTON_IS_PRESSED && FLAG_CHECK_PRESSED[index]==1 ){
 80002e4:	79fb      	ldrb	r3, [r7, #7]
 80002e6:	4a0b      	ldr	r2, [pc, #44]	; (8000314 <is_button_pressed+0x44>)
 80002e8:	5cd3      	ldrb	r3, [r2, r3]
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d10c      	bne.n	8000308 <is_button_pressed+0x38>
 80002ee:	79fb      	ldrb	r3, [r7, #7]
 80002f0:	4a09      	ldr	r2, [pc, #36]	; (8000318 <is_button_pressed+0x48>)
 80002f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002f6:	2b01      	cmp	r3, #1
 80002f8:	d106      	bne.n	8000308 <is_button_pressed+0x38>
		FLAG_CHECK_PRESSED[index]=0;
 80002fa:	79fb      	ldrb	r3, [r7, #7]
 80002fc:	4a06      	ldr	r2, [pc, #24]	; (8000318 <is_button_pressed+0x48>)
 80002fe:	2100      	movs	r1, #0
 8000300:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8000304:	2301      	movs	r3, #1
 8000306:	e000      	b.n	800030a <is_button_pressed+0x3a>
	}
	return 0;
 8000308:	2300      	movs	r3, #0
}
 800030a:	4618      	mov	r0, r3
 800030c:	370c      	adds	r7, #12
 800030e:	46bd      	mov	sp, r7
 8000310:	bc80      	pop	{r7}
 8000312:	4770      	bx	lr
 8000314:	20000020 	.word	0x20000020
 8000318:	20000000 	.word	0x20000000

0800031c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000320:	f001 fa32 	bl	8001788 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000324:	f000 f848 	bl	80003b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000328:	f000 f974 	bl	8000614 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800032c:	f000 f948 	bl	80005c0 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000330:	f000 f884 	bl	800043c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000334:	f000 f8ce 	bl	80004d4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 8000338:	4816      	ldr	r0, [pc, #88]	; (8000394 <main+0x78>)
 800033a:	f002 fa85 	bl	8002848 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800033e:	2100      	movs	r1, #0
 8000340:	4815      	ldr	r0, [pc, #84]	; (8000398 <main+0x7c>)
 8000342:	f002 fb2b 	bl	800299c <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart2, &temp, 1);
 8000346:	2201      	movs	r2, #1
 8000348:	4914      	ldr	r1, [pc, #80]	; (800039c <main+0x80>)
 800034a:	4815      	ldr	r0, [pc, #84]	; (80003a0 <main+0x84>)
 800034c:	f003 fa69 	bl	8003822 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  SCH_Add_Task(button_reading,	0,1);
 8000350:	2201      	movs	r2, #1
 8000352:	2100      	movs	r1, #0
 8000354:	4813      	ldr	r0, [pc, #76]	; (80003a4 <main+0x88>)
 8000356:	f000 fa67 	bl	8000828 <SCH_Add_Task>
  SCH_Add_Task(button_Mode,		0, 1);
 800035a:	2201      	movs	r2, #1
 800035c:	2100      	movs	r1, #0
 800035e:	4812      	ldr	r0, [pc, #72]	; (80003a8 <main+0x8c>)
 8000360:	f000 fa62 	bl	8000828 <SCH_Add_Task>
  SCH_Add_Task(button_Pedes, 	0, 1);
 8000364:	2201      	movs	r2, #1
 8000366:	2100      	movs	r1, #0
 8000368:	4810      	ldr	r0, [pc, #64]	; (80003ac <main+0x90>)
 800036a:	f000 fa5d 	bl	8000828 <SCH_Add_Task>
  SCH_Add_Task(button_Time, 	0, 1);
 800036e:	2201      	movs	r2, #1
 8000370:	2100      	movs	r1, #0
 8000372:	480f      	ldr	r0, [pc, #60]	; (80003b0 <main+0x94>)
 8000374:	f000 fa58 	bl	8000828 <SCH_Add_Task>
  SCH_Add_Task(button_Update, 	0, 1);
 8000378:	2201      	movs	r2, #1
 800037a:	2100      	movs	r1, #0
 800037c:	480d      	ldr	r0, [pc, #52]	; (80003b4 <main+0x98>)
 800037e:	f000 fa53 	bl	8000828 <SCH_Add_Task>

  RESET_ALL();
 8000382:	f000 fd0b 	bl	8000d9c <RESET_ALL>
  DEL_TASKS_PREVIOUS_MODE();
 8000386:	f000 ff61 	bl	800124c <DEL_TASKS_PREVIOUS_MODE>
  ADD_TASKS_MODE_AUTO();
 800038a:	f000 ff7d 	bl	8001288 <ADD_TASKS_MODE_AUTO>

  while (1)
  {
	  SCH_Dispatch_Tasks();
 800038e:	f000 faaf 	bl	80008f0 <SCH_Dispatch_Tasks>
 8000392:	e7fc      	b.n	800038e <main+0x72>
 8000394:	200000d0 	.word	0x200000d0
 8000398:	20000118 	.word	0x20000118
 800039c:	200001b0 	.word	0x200001b0
 80003a0:	20000160 	.word	0x20000160
 80003a4:	0800014d 	.word	0x0800014d
 80003a8:	08001609 	.word	0x08001609
 80003ac:	0800171d 	.word	0x0800171d
 80003b0:	08001669 	.word	0x08001669
 80003b4:	0800168d 	.word	0x0800168d

080003b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b090      	sub	sp, #64	; 0x40
 80003bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003be:	f107 0318 	add.w	r3, r7, #24
 80003c2:	2228      	movs	r2, #40	; 0x28
 80003c4:	2100      	movs	r1, #0
 80003c6:	4618      	mov	r0, r3
 80003c8:	f003 feb8 	bl	800413c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003cc:	1d3b      	adds	r3, r7, #4
 80003ce:	2200      	movs	r2, #0
 80003d0:	601a      	str	r2, [r3, #0]
 80003d2:	605a      	str	r2, [r3, #4]
 80003d4:	609a      	str	r2, [r3, #8]
 80003d6:	60da      	str	r2, [r3, #12]
 80003d8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003da:	2302      	movs	r3, #2
 80003dc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003de:	2301      	movs	r3, #1
 80003e0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003e2:	2310      	movs	r3, #16
 80003e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003e6:	2302      	movs	r3, #2
 80003e8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80003ea:	2300      	movs	r3, #0
 80003ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80003ee:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80003f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003f4:	f107 0318 	add.w	r3, r7, #24
 80003f8:	4618      	mov	r0, r3
 80003fa:	f001 fdbb 	bl	8001f74 <HAL_RCC_OscConfig>
 80003fe:	4603      	mov	r3, r0
 8000400:	2b00      	cmp	r3, #0
 8000402:	d001      	beq.n	8000408 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000404:	f000 f9b0 	bl	8000768 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000408:	230f      	movs	r3, #15
 800040a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800040c:	2302      	movs	r3, #2
 800040e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000410:	2300      	movs	r3, #0
 8000412:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000414:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000418:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800041a:	2300      	movs	r3, #0
 800041c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800041e:	1d3b      	adds	r3, r7, #4
 8000420:	2102      	movs	r1, #2
 8000422:	4618      	mov	r0, r3
 8000424:	f002 f828 	bl	8002478 <HAL_RCC_ClockConfig>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d001      	beq.n	8000432 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800042e:	f000 f99b 	bl	8000768 <Error_Handler>
  }
}
 8000432:	bf00      	nop
 8000434:	3740      	adds	r7, #64	; 0x40
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
	...

0800043c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b086      	sub	sp, #24
 8000440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000442:	f107 0308 	add.w	r3, r7, #8
 8000446:	2200      	movs	r2, #0
 8000448:	601a      	str	r2, [r3, #0]
 800044a:	605a      	str	r2, [r3, #4]
 800044c:	609a      	str	r2, [r3, #8]
 800044e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000450:	463b      	mov	r3, r7
 8000452:	2200      	movs	r2, #0
 8000454:	601a      	str	r2, [r3, #0]
 8000456:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000458:	4b1d      	ldr	r3, [pc, #116]	; (80004d0 <MX_TIM2_Init+0x94>)
 800045a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800045e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6399;
 8000460:	4b1b      	ldr	r3, [pc, #108]	; (80004d0 <MX_TIM2_Init+0x94>)
 8000462:	f641 02ff 	movw	r2, #6399	; 0x18ff
 8000466:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000468:	4b19      	ldr	r3, [pc, #100]	; (80004d0 <MX_TIM2_Init+0x94>)
 800046a:	2200      	movs	r2, #0
 800046c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 800046e:	4b18      	ldr	r3, [pc, #96]	; (80004d0 <MX_TIM2_Init+0x94>)
 8000470:	2263      	movs	r2, #99	; 0x63
 8000472:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000474:	4b16      	ldr	r3, [pc, #88]	; (80004d0 <MX_TIM2_Init+0x94>)
 8000476:	2200      	movs	r2, #0
 8000478:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800047a:	4b15      	ldr	r3, [pc, #84]	; (80004d0 <MX_TIM2_Init+0x94>)
 800047c:	2200      	movs	r2, #0
 800047e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000480:	4813      	ldr	r0, [pc, #76]	; (80004d0 <MX_TIM2_Init+0x94>)
 8000482:	f002 f991 	bl	80027a8 <HAL_TIM_Base_Init>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	d001      	beq.n	8000490 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800048c:	f000 f96c 	bl	8000768 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000490:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000494:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000496:	f107 0308 	add.w	r3, r7, #8
 800049a:	4619      	mov	r1, r3
 800049c:	480c      	ldr	r0, [pc, #48]	; (80004d0 <MX_TIM2_Init+0x94>)
 800049e:	f002 fce5 	bl	8002e6c <HAL_TIM_ConfigClockSource>
 80004a2:	4603      	mov	r3, r0
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d001      	beq.n	80004ac <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80004a8:	f000 f95e 	bl	8000768 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004ac:	2300      	movs	r3, #0
 80004ae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004b0:	2300      	movs	r3, #0
 80004b2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004b4:	463b      	mov	r3, r7
 80004b6:	4619      	mov	r1, r3
 80004b8:	4805      	ldr	r0, [pc, #20]	; (80004d0 <MX_TIM2_Init+0x94>)
 80004ba:	f003 f863 	bl	8003584 <HAL_TIMEx_MasterConfigSynchronization>
 80004be:	4603      	mov	r3, r0
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d001      	beq.n	80004c8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80004c4:	f000 f950 	bl	8000768 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80004c8:	bf00      	nop
 80004ca:	3718      	adds	r7, #24
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	200000d0 	.word	0x200000d0

080004d4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b08e      	sub	sp, #56	; 0x38
 80004d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004de:	2200      	movs	r2, #0
 80004e0:	601a      	str	r2, [r3, #0]
 80004e2:	605a      	str	r2, [r3, #4]
 80004e4:	609a      	str	r2, [r3, #8]
 80004e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004e8:	f107 0320 	add.w	r3, r7, #32
 80004ec:	2200      	movs	r2, #0
 80004ee:	601a      	str	r2, [r3, #0]
 80004f0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004f2:	1d3b      	adds	r3, r7, #4
 80004f4:	2200      	movs	r2, #0
 80004f6:	601a      	str	r2, [r3, #0]
 80004f8:	605a      	str	r2, [r3, #4]
 80004fa:	609a      	str	r2, [r3, #8]
 80004fc:	60da      	str	r2, [r3, #12]
 80004fe:	611a      	str	r2, [r3, #16]
 8000500:	615a      	str	r2, [r3, #20]
 8000502:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000504:	4b2c      	ldr	r3, [pc, #176]	; (80005b8 <MX_TIM3_Init+0xe4>)
 8000506:	4a2d      	ldr	r2, [pc, #180]	; (80005bc <MX_TIM3_Init+0xe8>)
 8000508:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1023;
 800050a:	4b2b      	ldr	r3, [pc, #172]	; (80005b8 <MX_TIM3_Init+0xe4>)
 800050c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000510:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000512:	4b29      	ldr	r3, [pc, #164]	; (80005b8 <MX_TIM3_Init+0xe4>)
 8000514:	2200      	movs	r2, #0
 8000516:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19;
 8000518:	4b27      	ldr	r3, [pc, #156]	; (80005b8 <MX_TIM3_Init+0xe4>)
 800051a:	2213      	movs	r2, #19
 800051c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800051e:	4b26      	ldr	r3, [pc, #152]	; (80005b8 <MX_TIM3_Init+0xe4>)
 8000520:	2200      	movs	r2, #0
 8000522:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000524:	4b24      	ldr	r3, [pc, #144]	; (80005b8 <MX_TIM3_Init+0xe4>)
 8000526:	2200      	movs	r2, #0
 8000528:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800052a:	4823      	ldr	r0, [pc, #140]	; (80005b8 <MX_TIM3_Init+0xe4>)
 800052c:	f002 f93c 	bl	80027a8 <HAL_TIM_Base_Init>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000536:	f000 f917 	bl	8000768 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800053a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800053e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000540:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000544:	4619      	mov	r1, r3
 8000546:	481c      	ldr	r0, [pc, #112]	; (80005b8 <MX_TIM3_Init+0xe4>)
 8000548:	f002 fc90 	bl	8002e6c <HAL_TIM_ConfigClockSource>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d001      	beq.n	8000556 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000552:	f000 f909 	bl	8000768 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000556:	4818      	ldr	r0, [pc, #96]	; (80005b8 <MX_TIM3_Init+0xe4>)
 8000558:	f002 f9c8 	bl	80028ec <HAL_TIM_PWM_Init>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000562:	f000 f901 	bl	8000768 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000566:	2300      	movs	r3, #0
 8000568:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800056a:	2300      	movs	r3, #0
 800056c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800056e:	f107 0320 	add.w	r3, r7, #32
 8000572:	4619      	mov	r1, r3
 8000574:	4810      	ldr	r0, [pc, #64]	; (80005b8 <MX_TIM3_Init+0xe4>)
 8000576:	f003 f805 	bl	8003584 <HAL_TIMEx_MasterConfigSynchronization>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000580:	f000 f8f2 	bl	8000768 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000584:	2360      	movs	r3, #96	; 0x60
 8000586:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000588:	2300      	movs	r3, #0
 800058a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800058c:	2300      	movs	r3, #0
 800058e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000590:	2300      	movs	r3, #0
 8000592:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000594:	1d3b      	adds	r3, r7, #4
 8000596:	2200      	movs	r2, #0
 8000598:	4619      	mov	r1, r3
 800059a:	4807      	ldr	r0, [pc, #28]	; (80005b8 <MX_TIM3_Init+0xe4>)
 800059c:	f002 fba8 	bl	8002cf0 <HAL_TIM_PWM_ConfigChannel>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80005a6:	f000 f8df 	bl	8000768 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80005aa:	4803      	ldr	r0, [pc, #12]	; (80005b8 <MX_TIM3_Init+0xe4>)
 80005ac:	f000 fa88 	bl	8000ac0 <HAL_TIM_MspPostInit>

}
 80005b0:	bf00      	nop
 80005b2:	3738      	adds	r7, #56	; 0x38
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	20000118 	.word	0x20000118
 80005bc:	40000400 	.word	0x40000400

080005c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005c4:	4b11      	ldr	r3, [pc, #68]	; (800060c <MX_USART2_UART_Init+0x4c>)
 80005c6:	4a12      	ldr	r2, [pc, #72]	; (8000610 <MX_USART2_UART_Init+0x50>)
 80005c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80005ca:	4b10      	ldr	r3, [pc, #64]	; (800060c <MX_USART2_UART_Init+0x4c>)
 80005cc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80005d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005d2:	4b0e      	ldr	r3, [pc, #56]	; (800060c <MX_USART2_UART_Init+0x4c>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005d8:	4b0c      	ldr	r3, [pc, #48]	; (800060c <MX_USART2_UART_Init+0x4c>)
 80005da:	2200      	movs	r2, #0
 80005dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005de:	4b0b      	ldr	r3, [pc, #44]	; (800060c <MX_USART2_UART_Init+0x4c>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005e4:	4b09      	ldr	r3, [pc, #36]	; (800060c <MX_USART2_UART_Init+0x4c>)
 80005e6:	220c      	movs	r2, #12
 80005e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005ea:	4b08      	ldr	r3, [pc, #32]	; (800060c <MX_USART2_UART_Init+0x4c>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005f0:	4b06      	ldr	r3, [pc, #24]	; (800060c <MX_USART2_UART_Init+0x4c>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005f6:	4805      	ldr	r0, [pc, #20]	; (800060c <MX_USART2_UART_Init+0x4c>)
 80005f8:	f003 f834 	bl	8003664 <HAL_UART_Init>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000602:	f000 f8b1 	bl	8000768 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000606:	bf00      	nop
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	20000160 	.word	0x20000160
 8000610:	40004400 	.word	0x40004400

08000614 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b088      	sub	sp, #32
 8000618:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061a:	f107 0310 	add.w	r3, r7, #16
 800061e:	2200      	movs	r2, #0
 8000620:	601a      	str	r2, [r3, #0]
 8000622:	605a      	str	r2, [r3, #4]
 8000624:	609a      	str	r2, [r3, #8]
 8000626:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000628:	4b45      	ldr	r3, [pc, #276]	; (8000740 <MX_GPIO_Init+0x12c>)
 800062a:	699b      	ldr	r3, [r3, #24]
 800062c:	4a44      	ldr	r2, [pc, #272]	; (8000740 <MX_GPIO_Init+0x12c>)
 800062e:	f043 0310 	orr.w	r3, r3, #16
 8000632:	6193      	str	r3, [r2, #24]
 8000634:	4b42      	ldr	r3, [pc, #264]	; (8000740 <MX_GPIO_Init+0x12c>)
 8000636:	699b      	ldr	r3, [r3, #24]
 8000638:	f003 0310 	and.w	r3, r3, #16
 800063c:	60fb      	str	r3, [r7, #12]
 800063e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000640:	4b3f      	ldr	r3, [pc, #252]	; (8000740 <MX_GPIO_Init+0x12c>)
 8000642:	699b      	ldr	r3, [r3, #24]
 8000644:	4a3e      	ldr	r2, [pc, #248]	; (8000740 <MX_GPIO_Init+0x12c>)
 8000646:	f043 0320 	orr.w	r3, r3, #32
 800064a:	6193      	str	r3, [r2, #24]
 800064c:	4b3c      	ldr	r3, [pc, #240]	; (8000740 <MX_GPIO_Init+0x12c>)
 800064e:	699b      	ldr	r3, [r3, #24]
 8000650:	f003 0320 	and.w	r3, r3, #32
 8000654:	60bb      	str	r3, [r7, #8]
 8000656:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000658:	4b39      	ldr	r3, [pc, #228]	; (8000740 <MX_GPIO_Init+0x12c>)
 800065a:	699b      	ldr	r3, [r3, #24]
 800065c:	4a38      	ldr	r2, [pc, #224]	; (8000740 <MX_GPIO_Init+0x12c>)
 800065e:	f043 0304 	orr.w	r3, r3, #4
 8000662:	6193      	str	r3, [r2, #24]
 8000664:	4b36      	ldr	r3, [pc, #216]	; (8000740 <MX_GPIO_Init+0x12c>)
 8000666:	699b      	ldr	r3, [r3, #24]
 8000668:	f003 0304 	and.w	r3, r3, #4
 800066c:	607b      	str	r3, [r7, #4]
 800066e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000670:	4b33      	ldr	r3, [pc, #204]	; (8000740 <MX_GPIO_Init+0x12c>)
 8000672:	699b      	ldr	r3, [r3, #24]
 8000674:	4a32      	ldr	r2, [pc, #200]	; (8000740 <MX_GPIO_Init+0x12c>)
 8000676:	f043 0308 	orr.w	r3, r3, #8
 800067a:	6193      	str	r3, [r2, #24]
 800067c:	4b30      	ldr	r3, [pc, #192]	; (8000740 <MX_GPIO_Init+0x12c>)
 800067e:	699b      	ldr	r3, [r3, #24]
 8000680:	f003 0308 	and.w	r3, r3, #8
 8000684:	603b      	str	r3, [r7, #0]
 8000686:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Ped_D7_Pin|TL1_D3_Pin, GPIO_PIN_RESET);
 8000688:	2200      	movs	r2, #0
 800068a:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 800068e:	482d      	ldr	r0, [pc, #180]	; (8000744 <MX_GPIO_Init+0x130>)
 8000690:	f001 fc35 	bl	8001efe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Ped_D6_Pin|TL1_D2_Pin|TL2_D5_Pin|TL2_D4_Pin, GPIO_PIN_RESET);
 8000694:	2200      	movs	r2, #0
 8000696:	f44f 6187 	mov.w	r1, #1080	; 0x438
 800069a:	482b      	ldr	r0, [pc, #172]	; (8000748 <MX_GPIO_Init+0x134>)
 800069c:	f001 fc2f 	bl	8001efe <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006a6:	4b29      	ldr	r3, [pc, #164]	; (800074c <MX_GPIO_Init+0x138>)
 80006a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006aa:	2300      	movs	r3, #0
 80006ac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006ae:	f107 0310 	add.w	r3, r7, #16
 80006b2:	4619      	mov	r1, r3
 80006b4:	4826      	ldr	r0, [pc, #152]	; (8000750 <MX_GPIO_Init+0x13c>)
 80006b6:	f001 fa87 	bl	8001bc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Ped_Button_Pin Button1_Pin Button2_Pin */
  GPIO_InitStruct.Pin = Ped_Button_Pin|Button1_Pin|Button2_Pin;
 80006ba:	2313      	movs	r3, #19
 80006bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006be:	2300      	movs	r3, #0
 80006c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c2:	2300      	movs	r3, #0
 80006c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c6:	f107 0310 	add.w	r3, r7, #16
 80006ca:	4619      	mov	r1, r3
 80006cc:	481d      	ldr	r0, [pc, #116]	; (8000744 <MX_GPIO_Init+0x130>)
 80006ce:	f001 fa7b 	bl	8001bc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Ped_D7_Pin TL1_D3_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Ped_D7_Pin|TL1_D3_Pin;
 80006d2:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 80006d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d8:	2301      	movs	r3, #1
 80006da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006dc:	2300      	movs	r3, #0
 80006de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e0:	2302      	movs	r3, #2
 80006e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e4:	f107 0310 	add.w	r3, r7, #16
 80006e8:	4619      	mov	r1, r3
 80006ea:	4816      	ldr	r0, [pc, #88]	; (8000744 <MX_GPIO_Init+0x130>)
 80006ec:	f001 fa6c 	bl	8001bc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button3_Pin */
  GPIO_InitStruct.Pin = Button3_Pin;
 80006f0:	2301      	movs	r3, #1
 80006f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006f4:	2300      	movs	r3, #0
 80006f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f8:	2300      	movs	r3, #0
 80006fa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Button3_GPIO_Port, &GPIO_InitStruct);
 80006fc:	f107 0310 	add.w	r3, r7, #16
 8000700:	4619      	mov	r1, r3
 8000702:	4811      	ldr	r0, [pc, #68]	; (8000748 <MX_GPIO_Init+0x134>)
 8000704:	f001 fa60 	bl	8001bc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Ped_D6_Pin TL1_D2_Pin TL2_D5_Pin TL2_D4_Pin */
  GPIO_InitStruct.Pin = Ped_D6_Pin|TL1_D2_Pin|TL2_D5_Pin|TL2_D4_Pin;
 8000708:	f44f 6387 	mov.w	r3, #1080	; 0x438
 800070c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800070e:	2301      	movs	r3, #1
 8000710:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000712:	2300      	movs	r3, #0
 8000714:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000716:	2302      	movs	r3, #2
 8000718:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800071a:	f107 0310 	add.w	r3, r7, #16
 800071e:	4619      	mov	r1, r3
 8000720:	4809      	ldr	r0, [pc, #36]	; (8000748 <MX_GPIO_Init+0x134>)
 8000722:	f001 fa51 	bl	8001bc8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000726:	2200      	movs	r2, #0
 8000728:	2100      	movs	r1, #0
 800072a:	2028      	movs	r0, #40	; 0x28
 800072c:	f001 f965 	bl	80019fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000730:	2028      	movs	r0, #40	; 0x28
 8000732:	f001 f97e 	bl	8001a32 <HAL_NVIC_EnableIRQ>

}
 8000736:	bf00      	nop
 8000738:	3720      	adds	r7, #32
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	40021000 	.word	0x40021000
 8000744:	40010800 	.word	0x40010800
 8000748:	40010c00 	.word	0x40010c00
 800074c:	10110000 	.word	0x10110000
 8000750:	40011000 	.word	0x40011000

08000754 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
	SCH_Update_Tasks();
 800075c:	f000 f80a 	bl	8000774 <SCH_Update_Tasks>
}
 8000760:	bf00      	nop
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}

08000768 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800076c:	b672      	cpsid	i
}
 800076e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000770:	e7fe      	b.n	8000770 <Error_Handler+0x8>
	...

08000774 <SCH_Update_Tasks>:
	for (i=0; i<SCH_MAX_TASKS; i++) SCH_Delete_Task(i);
	Error_code_G = 8;
	//Timer_Init();
	//Watchdog_Init();
}
void SCH_Update_Tasks(){
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
	unsigned char index;
	for (index = 0; index <SCH_MAX_TASKS; index ++){
 800077a:	2300      	movs	r3, #0
 800077c:	71fb      	strb	r3, [r7, #7]
 800077e:	e047      	b.n	8000810 <SCH_Update_Tasks+0x9c>
		if (SCH_tasks_G[index].task != 0){
 8000780:	79fa      	ldrb	r2, [r7, #7]
 8000782:	4928      	ldr	r1, [pc, #160]	; (8000824 <SCH_Update_Tasks+0xb0>)
 8000784:	4613      	mov	r3, r2
 8000786:	009b      	lsls	r3, r3, #2
 8000788:	4413      	add	r3, r2
 800078a:	009b      	lsls	r3, r3, #2
 800078c:	440b      	add	r3, r1
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d03a      	beq.n	800080a <SCH_Update_Tasks+0x96>
			if (SCH_tasks_G[index].Delay == 0){
 8000794:	79fa      	ldrb	r2, [r7, #7]
 8000796:	4923      	ldr	r1, [pc, #140]	; (8000824 <SCH_Update_Tasks+0xb0>)
 8000798:	4613      	mov	r3, r2
 800079a:	009b      	lsls	r3, r3, #2
 800079c:	4413      	add	r3, r2
 800079e:	009b      	lsls	r3, r3, #2
 80007a0:	440b      	add	r3, r1
 80007a2:	3304      	adds	r3, #4
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d11c      	bne.n	80007e4 <SCH_Update_Tasks+0x70>
				SCH_tasks_G[index].RunMe = 1;
 80007aa:	79fa      	ldrb	r2, [r7, #7]
 80007ac:	491d      	ldr	r1, [pc, #116]	; (8000824 <SCH_Update_Tasks+0xb0>)
 80007ae:	4613      	mov	r3, r2
 80007b0:	009b      	lsls	r3, r3, #2
 80007b2:	4413      	add	r3, r2
 80007b4:	009b      	lsls	r3, r3, #2
 80007b6:	440b      	add	r3, r1
 80007b8:	330c      	adds	r3, #12
 80007ba:	2201      	movs	r2, #1
 80007bc:	701a      	strb	r2, [r3, #0]
				SCH_tasks_G[index].Delay = SCH_tasks_G[index].Period;
 80007be:	79f9      	ldrb	r1, [r7, #7]
 80007c0:	79fa      	ldrb	r2, [r7, #7]
 80007c2:	4818      	ldr	r0, [pc, #96]	; (8000824 <SCH_Update_Tasks+0xb0>)
 80007c4:	460b      	mov	r3, r1
 80007c6:	009b      	lsls	r3, r3, #2
 80007c8:	440b      	add	r3, r1
 80007ca:	009b      	lsls	r3, r3, #2
 80007cc:	4403      	add	r3, r0
 80007ce:	3308      	adds	r3, #8
 80007d0:	6819      	ldr	r1, [r3, #0]
 80007d2:	4814      	ldr	r0, [pc, #80]	; (8000824 <SCH_Update_Tasks+0xb0>)
 80007d4:	4613      	mov	r3, r2
 80007d6:	009b      	lsls	r3, r3, #2
 80007d8:	4413      	add	r3, r2
 80007da:	009b      	lsls	r3, r3, #2
 80007dc:	4403      	add	r3, r0
 80007de:	3304      	adds	r3, #4
 80007e0:	6019      	str	r1, [r3, #0]
 80007e2:	e012      	b.n	800080a <SCH_Update_Tasks+0x96>
			} else SCH_tasks_G[index].Delay -= 1;
 80007e4:	79fa      	ldrb	r2, [r7, #7]
 80007e6:	490f      	ldr	r1, [pc, #60]	; (8000824 <SCH_Update_Tasks+0xb0>)
 80007e8:	4613      	mov	r3, r2
 80007ea:	009b      	lsls	r3, r3, #2
 80007ec:	4413      	add	r3, r2
 80007ee:	009b      	lsls	r3, r3, #2
 80007f0:	440b      	add	r3, r1
 80007f2:	3304      	adds	r3, #4
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	79fa      	ldrb	r2, [r7, #7]
 80007f8:	1e59      	subs	r1, r3, #1
 80007fa:	480a      	ldr	r0, [pc, #40]	; (8000824 <SCH_Update_Tasks+0xb0>)
 80007fc:	4613      	mov	r3, r2
 80007fe:	009b      	lsls	r3, r3, #2
 8000800:	4413      	add	r3, r2
 8000802:	009b      	lsls	r3, r3, #2
 8000804:	4403      	add	r3, r0
 8000806:	3304      	adds	r3, #4
 8000808:	6019      	str	r1, [r3, #0]
	for (index = 0; index <SCH_MAX_TASKS; index ++){
 800080a:	79fb      	ldrb	r3, [r7, #7]
 800080c:	3301      	adds	r3, #1
 800080e:	71fb      	strb	r3, [r7, #7]
 8000810:	79fb      	ldrb	r3, [r7, #7]
 8000812:	2b27      	cmp	r3, #39	; 0x27
 8000814:	d9b4      	bls.n	8000780 <SCH_Update_Tasks+0xc>
		}
	}
}
 8000816:	bf00      	nop
 8000818:	bf00      	nop
 800081a:	370c      	adds	r7, #12
 800081c:	46bd      	mov	sp, r7
 800081e:	bc80      	pop	{r7}
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	200001b4 	.word	0x200001b4

08000828 <SCH_Add_Task>:
int SCH_Add_Task(void (*task), int delay, int period){
 8000828:	b480      	push	{r7}
 800082a:	b087      	sub	sp, #28
 800082c:	af00      	add	r7, sp, #0
 800082e:	60f8      	str	r0, [r7, #12]
 8000830:	60b9      	str	r1, [r7, #8]
 8000832:	607a      	str	r2, [r7, #4]
	unsigned char index=0;
 8000834:	2300      	movs	r3, #0
 8000836:	75fb      	strb	r3, [r7, #23]
	while ((SCH_tasks_G[index].task!=0) && (index < SCH_MAX_TASKS))
 8000838:	e002      	b.n	8000840 <SCH_Add_Task+0x18>
		index ++;
 800083a:	7dfb      	ldrb	r3, [r7, #23]
 800083c:	3301      	adds	r3, #1
 800083e:	75fb      	strb	r3, [r7, #23]
	while ((SCH_tasks_G[index].task!=0) && (index < SCH_MAX_TASKS))
 8000840:	7dfa      	ldrb	r2, [r7, #23]
 8000842:	4928      	ldr	r1, [pc, #160]	; (80008e4 <SCH_Add_Task+0xbc>)
 8000844:	4613      	mov	r3, r2
 8000846:	009b      	lsls	r3, r3, #2
 8000848:	4413      	add	r3, r2
 800084a:	009b      	lsls	r3, r3, #2
 800084c:	440b      	add	r3, r1
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d002      	beq.n	800085a <SCH_Add_Task+0x32>
 8000854:	7dfb      	ldrb	r3, [r7, #23]
 8000856:	2b27      	cmp	r3, #39	; 0x27
 8000858:	d9ef      	bls.n	800083a <SCH_Add_Task+0x12>

	if (index== SCH_MAX_TASKS){
 800085a:	7dfb      	ldrb	r3, [r7, #23]
 800085c:	2b28      	cmp	r3, #40	; 0x28
 800085e:	d104      	bne.n	800086a <SCH_Add_Task+0x42>
		Error_code_G = ERROR_SCH_TOO_MANY_TASKS;
 8000860:	4b21      	ldr	r3, [pc, #132]	; (80008e8 <SCH_Add_Task+0xc0>)
 8000862:	2229      	movs	r2, #41	; 0x29
 8000864:	601a      	str	r2, [r3, #0]
		return SCH_MAX_TASKS;
 8000866:	2328      	movs	r3, #40	; 0x28
 8000868:	e036      	b.n	80008d8 <SCH_Add_Task+0xb0>
	}
	SCH_tasks_G[index].task 	= task;
 800086a:	7dfa      	ldrb	r2, [r7, #23]
 800086c:	68f9      	ldr	r1, [r7, #12]
 800086e:	481d      	ldr	r0, [pc, #116]	; (80008e4 <SCH_Add_Task+0xbc>)
 8000870:	4613      	mov	r3, r2
 8000872:	009b      	lsls	r3, r3, #2
 8000874:	4413      	add	r3, r2
 8000876:	009b      	lsls	r3, r3, #2
 8000878:	4403      	add	r3, r0
 800087a:	6019      	str	r1, [r3, #0]
	SCH_tasks_G[index].Delay 	= delay;
 800087c:	7dfa      	ldrb	r2, [r7, #23]
 800087e:	68b9      	ldr	r1, [r7, #8]
 8000880:	4818      	ldr	r0, [pc, #96]	; (80008e4 <SCH_Add_Task+0xbc>)
 8000882:	4613      	mov	r3, r2
 8000884:	009b      	lsls	r3, r3, #2
 8000886:	4413      	add	r3, r2
 8000888:	009b      	lsls	r3, r3, #2
 800088a:	4403      	add	r3, r0
 800088c:	3304      	adds	r3, #4
 800088e:	6019      	str	r1, [r3, #0]
	SCH_tasks_G[index].Period 	= period;
 8000890:	7dfa      	ldrb	r2, [r7, #23]
 8000892:	6879      	ldr	r1, [r7, #4]
 8000894:	4813      	ldr	r0, [pc, #76]	; (80008e4 <SCH_Add_Task+0xbc>)
 8000896:	4613      	mov	r3, r2
 8000898:	009b      	lsls	r3, r3, #2
 800089a:	4413      	add	r3, r2
 800089c:	009b      	lsls	r3, r3, #2
 800089e:	4403      	add	r3, r0
 80008a0:	3308      	adds	r3, #8
 80008a2:	6019      	str	r1, [r3, #0]
	SCH_tasks_G[index].RunMe 	= 0;
 80008a4:	7dfa      	ldrb	r2, [r7, #23]
 80008a6:	490f      	ldr	r1, [pc, #60]	; (80008e4 <SCH_Add_Task+0xbc>)
 80008a8:	4613      	mov	r3, r2
 80008aa:	009b      	lsls	r3, r3, #2
 80008ac:	4413      	add	r3, r2
 80008ae:	009b      	lsls	r3, r3, #2
 80008b0:	440b      	add	r3, r1
 80008b2:	330c      	adds	r3, #12
 80008b4:	2200      	movs	r2, #0
 80008b6:	701a      	strb	r2, [r3, #0]
	SCH_tasks_G[index].TaskId 	= task_id++;
 80008b8:	4b0c      	ldr	r3, [pc, #48]	; (80008ec <SCH_Add_Task+0xc4>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	1c5a      	adds	r2, r3, #1
 80008be:	490b      	ldr	r1, [pc, #44]	; (80008ec <SCH_Add_Task+0xc4>)
 80008c0:	600a      	str	r2, [r1, #0]
 80008c2:	7dfa      	ldrb	r2, [r7, #23]
 80008c4:	4618      	mov	r0, r3
 80008c6:	4907      	ldr	r1, [pc, #28]	; (80008e4 <SCH_Add_Task+0xbc>)
 80008c8:	4613      	mov	r3, r2
 80008ca:	009b      	lsls	r3, r3, #2
 80008cc:	4413      	add	r3, r2
 80008ce:	009b      	lsls	r3, r3, #2
 80008d0:	440b      	add	r3, r1
 80008d2:	3310      	adds	r3, #16
 80008d4:	6018      	str	r0, [r3, #0]

	return index;
 80008d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80008d8:	4618      	mov	r0, r3
 80008da:	371c      	adds	r7, #28
 80008dc:	46bd      	mov	sp, r7
 80008de:	bc80      	pop	{r7}
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	200001b4 	.word	0x200001b4
 80008e8:	200004d4 	.word	0x200004d4
 80008ec:	200004d8 	.word	0x200004d8

080008f0 <SCH_Dispatch_Tasks>:
void SCH_Dispatch_Tasks(void){
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
	unsigned char index;
	for (index = 0; index < SCH_MAX_TASKS; index++){
 80008f6:	2300      	movs	r3, #0
 80008f8:	71fb      	strb	r3, [r7, #7]
 80008fa:	e020      	b.n	800093e <SCH_Dispatch_Tasks+0x4e>
		if (SCH_tasks_G[index].RunMe == 1){
 80008fc:	79fa      	ldrb	r2, [r7, #7]
 80008fe:	4914      	ldr	r1, [pc, #80]	; (8000950 <SCH_Dispatch_Tasks+0x60>)
 8000900:	4613      	mov	r3, r2
 8000902:	009b      	lsls	r3, r3, #2
 8000904:	4413      	add	r3, r2
 8000906:	009b      	lsls	r3, r3, #2
 8000908:	440b      	add	r3, r1
 800090a:	330c      	adds	r3, #12
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	2b01      	cmp	r3, #1
 8000910:	d112      	bne.n	8000938 <SCH_Dispatch_Tasks+0x48>
			(*SCH_tasks_G[index].task)();
 8000912:	79fa      	ldrb	r2, [r7, #7]
 8000914:	490e      	ldr	r1, [pc, #56]	; (8000950 <SCH_Dispatch_Tasks+0x60>)
 8000916:	4613      	mov	r3, r2
 8000918:	009b      	lsls	r3, r3, #2
 800091a:	4413      	add	r3, r2
 800091c:	009b      	lsls	r3, r3, #2
 800091e:	440b      	add	r3, r1
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	4798      	blx	r3
			SCH_tasks_G[index].RunMe = 0;
 8000924:	79fa      	ldrb	r2, [r7, #7]
 8000926:	490a      	ldr	r1, [pc, #40]	; (8000950 <SCH_Dispatch_Tasks+0x60>)
 8000928:	4613      	mov	r3, r2
 800092a:	009b      	lsls	r3, r3, #2
 800092c:	4413      	add	r3, r2
 800092e:	009b      	lsls	r3, r3, #2
 8000930:	440b      	add	r3, r1
 8000932:	330c      	adds	r3, #12
 8000934:	2200      	movs	r2, #0
 8000936:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < SCH_MAX_TASKS; index++){
 8000938:	79fb      	ldrb	r3, [r7, #7]
 800093a:	3301      	adds	r3, #1
 800093c:	71fb      	strb	r3, [r7, #7]
 800093e:	79fb      	ldrb	r3, [r7, #7]
 8000940:	2b27      	cmp	r3, #39	; 0x27
 8000942:	d9db      	bls.n	80008fc <SCH_Dispatch_Tasks+0xc>
//				SCH_Delete_Task(index);
		}

	}

}
 8000944:	bf00      	nop
 8000946:	bf00      	nop
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	200001b4 	.word	0x200001b4

08000954 <SCH_Delete_Task>:
int SCH_Delete_Task(int index){
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
	//TODO
	if (SCH_tasks_G[index].task == 0){
 800095c:	491d      	ldr	r1, [pc, #116]	; (80009d4 <SCH_Delete_Task+0x80>)
 800095e:	687a      	ldr	r2, [r7, #4]
 8000960:	4613      	mov	r3, r2
 8000962:	009b      	lsls	r3, r3, #2
 8000964:	4413      	add	r3, r2
 8000966:	009b      	lsls	r3, r3, #2
 8000968:	440b      	add	r3, r1
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d104      	bne.n	800097a <SCH_Delete_Task+0x26>
		Error_code_G = ERROR_SCH_CANNOT_DELETE_TASK;
 8000970:	4b19      	ldr	r3, [pc, #100]	; (80009d8 <SCH_Delete_Task+0x84>)
 8000972:	222a      	movs	r2, #42	; 0x2a
 8000974:	601a      	str	r2, [r3, #0]
		return 0;
 8000976:	2300      	movs	r3, #0
 8000978:	e027      	b.n	80009ca <SCH_Delete_Task+0x76>
	}
	else {
		SCH_tasks_G[index].task = 0x0000;
 800097a:	4916      	ldr	r1, [pc, #88]	; (80009d4 <SCH_Delete_Task+0x80>)
 800097c:	687a      	ldr	r2, [r7, #4]
 800097e:	4613      	mov	r3, r2
 8000980:	009b      	lsls	r3, r3, #2
 8000982:	4413      	add	r3, r2
 8000984:	009b      	lsls	r3, r3, #2
 8000986:	440b      	add	r3, r1
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[index].Delay = 0;
 800098c:	4911      	ldr	r1, [pc, #68]	; (80009d4 <SCH_Delete_Task+0x80>)
 800098e:	687a      	ldr	r2, [r7, #4]
 8000990:	4613      	mov	r3, r2
 8000992:	009b      	lsls	r3, r3, #2
 8000994:	4413      	add	r3, r2
 8000996:	009b      	lsls	r3, r3, #2
 8000998:	440b      	add	r3, r1
 800099a:	3304      	adds	r3, #4
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[index].Period = 0;
 80009a0:	490c      	ldr	r1, [pc, #48]	; (80009d4 <SCH_Delete_Task+0x80>)
 80009a2:	687a      	ldr	r2, [r7, #4]
 80009a4:	4613      	mov	r3, r2
 80009a6:	009b      	lsls	r3, r3, #2
 80009a8:	4413      	add	r3, r2
 80009aa:	009b      	lsls	r3, r3, #2
 80009ac:	440b      	add	r3, r1
 80009ae:	3308      	adds	r3, #8
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[index].RunMe = 0;
 80009b4:	4907      	ldr	r1, [pc, #28]	; (80009d4 <SCH_Delete_Task+0x80>)
 80009b6:	687a      	ldr	r2, [r7, #4]
 80009b8:	4613      	mov	r3, r2
 80009ba:	009b      	lsls	r3, r3, #2
 80009bc:	4413      	add	r3, r2
 80009be:	009b      	lsls	r3, r3, #2
 80009c0:	440b      	add	r3, r1
 80009c2:	330c      	adds	r3, #12
 80009c4:	2200      	movs	r2, #0
 80009c6:	701a      	strb	r2, [r3, #0]
		return 1;
 80009c8:	2301      	movs	r3, #1
	}
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	370c      	adds	r7, #12
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bc80      	pop	{r7}
 80009d2:	4770      	bx	lr
 80009d4:	200001b4 	.word	0x200001b4
 80009d8:	200004d4 	.word	0x200004d4

080009dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	b085      	sub	sp, #20
 80009e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80009e2:	4b15      	ldr	r3, [pc, #84]	; (8000a38 <HAL_MspInit+0x5c>)
 80009e4:	699b      	ldr	r3, [r3, #24]
 80009e6:	4a14      	ldr	r2, [pc, #80]	; (8000a38 <HAL_MspInit+0x5c>)
 80009e8:	f043 0301 	orr.w	r3, r3, #1
 80009ec:	6193      	str	r3, [r2, #24]
 80009ee:	4b12      	ldr	r3, [pc, #72]	; (8000a38 <HAL_MspInit+0x5c>)
 80009f0:	699b      	ldr	r3, [r3, #24]
 80009f2:	f003 0301 	and.w	r3, r3, #1
 80009f6:	60bb      	str	r3, [r7, #8]
 80009f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009fa:	4b0f      	ldr	r3, [pc, #60]	; (8000a38 <HAL_MspInit+0x5c>)
 80009fc:	69db      	ldr	r3, [r3, #28]
 80009fe:	4a0e      	ldr	r2, [pc, #56]	; (8000a38 <HAL_MspInit+0x5c>)
 8000a00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a04:	61d3      	str	r3, [r2, #28]
 8000a06:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <HAL_MspInit+0x5c>)
 8000a08:	69db      	ldr	r3, [r3, #28]
 8000a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a0e:	607b      	str	r3, [r7, #4]
 8000a10:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a12:	4b0a      	ldr	r3, [pc, #40]	; (8000a3c <HAL_MspInit+0x60>)
 8000a14:	685b      	ldr	r3, [r3, #4]
 8000a16:	60fb      	str	r3, [r7, #12]
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	4a04      	ldr	r2, [pc, #16]	; (8000a3c <HAL_MspInit+0x60>)
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	3714      	adds	r7, #20
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bc80      	pop	{r7}
 8000a36:	4770      	bx	lr
 8000a38:	40021000 	.word	0x40021000
 8000a3c:	40010000 	.word	0x40010000

08000a40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b084      	sub	sp, #16
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a50:	d114      	bne.n	8000a7c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a52:	4b19      	ldr	r3, [pc, #100]	; (8000ab8 <HAL_TIM_Base_MspInit+0x78>)
 8000a54:	69db      	ldr	r3, [r3, #28]
 8000a56:	4a18      	ldr	r2, [pc, #96]	; (8000ab8 <HAL_TIM_Base_MspInit+0x78>)
 8000a58:	f043 0301 	orr.w	r3, r3, #1
 8000a5c:	61d3      	str	r3, [r2, #28]
 8000a5e:	4b16      	ldr	r3, [pc, #88]	; (8000ab8 <HAL_TIM_Base_MspInit+0x78>)
 8000a60:	69db      	ldr	r3, [r3, #28]
 8000a62:	f003 0301 	and.w	r3, r3, #1
 8000a66:	60fb      	str	r3, [r7, #12]
 8000a68:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	201c      	movs	r0, #28
 8000a70:	f000 ffc3 	bl	80019fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a74:	201c      	movs	r0, #28
 8000a76:	f000 ffdc 	bl	8001a32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000a7a:	e018      	b.n	8000aae <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a0e      	ldr	r2, [pc, #56]	; (8000abc <HAL_TIM_Base_MspInit+0x7c>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d113      	bne.n	8000aae <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a86:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <HAL_TIM_Base_MspInit+0x78>)
 8000a88:	69db      	ldr	r3, [r3, #28]
 8000a8a:	4a0b      	ldr	r2, [pc, #44]	; (8000ab8 <HAL_TIM_Base_MspInit+0x78>)
 8000a8c:	f043 0302 	orr.w	r3, r3, #2
 8000a90:	61d3      	str	r3, [r2, #28]
 8000a92:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <HAL_TIM_Base_MspInit+0x78>)
 8000a94:	69db      	ldr	r3, [r3, #28]
 8000a96:	f003 0302 	and.w	r3, r3, #2
 8000a9a:	60bb      	str	r3, [r7, #8]
 8000a9c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	201d      	movs	r0, #29
 8000aa4:	f000 ffa9 	bl	80019fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000aa8:	201d      	movs	r0, #29
 8000aaa:	f000 ffc2 	bl	8001a32 <HAL_NVIC_EnableIRQ>
}
 8000aae:	bf00      	nop
 8000ab0:	3710      	adds	r7, #16
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40021000 	.word	0x40021000
 8000abc:	40000400 	.word	0x40000400

08000ac0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b088      	sub	sp, #32
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac8:	f107 0310 	add.w	r3, r7, #16
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
 8000ad4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4a0f      	ldr	r2, [pc, #60]	; (8000b18 <HAL_TIM_MspPostInit+0x58>)
 8000adc:	4293      	cmp	r3, r2
 8000ade:	d117      	bne.n	8000b10 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae0:	4b0e      	ldr	r3, [pc, #56]	; (8000b1c <HAL_TIM_MspPostInit+0x5c>)
 8000ae2:	699b      	ldr	r3, [r3, #24]
 8000ae4:	4a0d      	ldr	r2, [pc, #52]	; (8000b1c <HAL_TIM_MspPostInit+0x5c>)
 8000ae6:	f043 0304 	orr.w	r3, r3, #4
 8000aea:	6193      	str	r3, [r2, #24]
 8000aec:	4b0b      	ldr	r3, [pc, #44]	; (8000b1c <HAL_TIM_MspPostInit+0x5c>)
 8000aee:	699b      	ldr	r3, [r3, #24]
 8000af0:	f003 0304 	and.w	r3, r3, #4
 8000af4:	60fb      	str	r3, [r7, #12]
 8000af6:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000af8:	2340      	movs	r3, #64	; 0x40
 8000afa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afc:	2302      	movs	r3, #2
 8000afe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b00:	2302      	movs	r3, #2
 8000b02:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b04:	f107 0310 	add.w	r3, r7, #16
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4805      	ldr	r0, [pc, #20]	; (8000b20 <HAL_TIM_MspPostInit+0x60>)
 8000b0c:	f001 f85c 	bl	8001bc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000b10:	bf00      	nop
 8000b12:	3720      	adds	r7, #32
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	40000400 	.word	0x40000400
 8000b1c:	40021000 	.word	0x40021000
 8000b20:	40010800 	.word	0x40010800

08000b24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b088      	sub	sp, #32
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2c:	f107 0310 	add.w	r3, r7, #16
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	605a      	str	r2, [r3, #4]
 8000b36:	609a      	str	r2, [r3, #8]
 8000b38:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4a19      	ldr	r2, [pc, #100]	; (8000ba4 <HAL_UART_MspInit+0x80>)
 8000b40:	4293      	cmp	r3, r2
 8000b42:	d12b      	bne.n	8000b9c <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b44:	4b18      	ldr	r3, [pc, #96]	; (8000ba8 <HAL_UART_MspInit+0x84>)
 8000b46:	69db      	ldr	r3, [r3, #28]
 8000b48:	4a17      	ldr	r2, [pc, #92]	; (8000ba8 <HAL_UART_MspInit+0x84>)
 8000b4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b4e:	61d3      	str	r3, [r2, #28]
 8000b50:	4b15      	ldr	r3, [pc, #84]	; (8000ba8 <HAL_UART_MspInit+0x84>)
 8000b52:	69db      	ldr	r3, [r3, #28]
 8000b54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b58:	60fb      	str	r3, [r7, #12]
 8000b5a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5c:	4b12      	ldr	r3, [pc, #72]	; (8000ba8 <HAL_UART_MspInit+0x84>)
 8000b5e:	699b      	ldr	r3, [r3, #24]
 8000b60:	4a11      	ldr	r2, [pc, #68]	; (8000ba8 <HAL_UART_MspInit+0x84>)
 8000b62:	f043 0304 	orr.w	r3, r3, #4
 8000b66:	6193      	str	r3, [r2, #24]
 8000b68:	4b0f      	ldr	r3, [pc, #60]	; (8000ba8 <HAL_UART_MspInit+0x84>)
 8000b6a:	699b      	ldr	r3, [r3, #24]
 8000b6c:	f003 0304 	and.w	r3, r3, #4
 8000b70:	60bb      	str	r3, [r7, #8]
 8000b72:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b74:	230c      	movs	r3, #12
 8000b76:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b80:	f107 0310 	add.w	r3, r7, #16
 8000b84:	4619      	mov	r1, r3
 8000b86:	4809      	ldr	r0, [pc, #36]	; (8000bac <HAL_UART_MspInit+0x88>)
 8000b88:	f001 f81e 	bl	8001bc8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	2100      	movs	r1, #0
 8000b90:	2026      	movs	r0, #38	; 0x26
 8000b92:	f000 ff32 	bl	80019fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b96:	2026      	movs	r0, #38	; 0x26
 8000b98:	f000 ff4b 	bl	8001a32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b9c:	bf00      	nop
 8000b9e:	3720      	adds	r7, #32
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	40004400 	.word	0x40004400
 8000ba8:	40021000 	.word	0x40021000
 8000bac:	40010800 	.word	0x40010800

08000bb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bb4:	e7fe      	b.n	8000bb4 <NMI_Handler+0x4>

08000bb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bba:	e7fe      	b.n	8000bba <HardFault_Handler+0x4>

08000bbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bc0:	e7fe      	b.n	8000bc0 <MemManage_Handler+0x4>

08000bc2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bc6:	e7fe      	b.n	8000bc6 <BusFault_Handler+0x4>

08000bc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bcc:	e7fe      	b.n	8000bcc <UsageFault_Handler+0x4>

08000bce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bc80      	pop	{r7}
 8000bd8:	4770      	bx	lr

08000bda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bc80      	pop	{r7}
 8000be4:	4770      	bx	lr

08000be6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000be6:	b480      	push	{r7}
 8000be8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bc80      	pop	{r7}
 8000bf0:	4770      	bx	lr

08000bf2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bf6:	f000 fe0d 	bl	8001814 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
	...

08000c00 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c04:	4802      	ldr	r0, [pc, #8]	; (8000c10 <TIM2_IRQHandler+0x10>)
 8000c06:	f001 ff6b 	bl	8002ae0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	200000d0 	.word	0x200000d0

08000c14 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000c18:	4802      	ldr	r0, [pc, #8]	; (8000c24 <TIM3_IRQHandler+0x10>)
 8000c1a:	f001 ff61 	bl	8002ae0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	20000118 	.word	0x20000118

08000c28 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c2c:	4802      	ldr	r0, [pc, #8]	; (8000c38 <USART2_IRQHandler+0x10>)
 8000c2e:	f002 fe29 	bl	8003884 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	20000160 	.word	0x20000160

08000c3c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000c40:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000c44:	f001 f974 	bl	8001f30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c48:	bf00      	nop
 8000c4a:	bd80      	pop	{r7, pc}

08000c4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b086      	sub	sp, #24
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c54:	4a14      	ldr	r2, [pc, #80]	; (8000ca8 <_sbrk+0x5c>)
 8000c56:	4b15      	ldr	r3, [pc, #84]	; (8000cac <_sbrk+0x60>)
 8000c58:	1ad3      	subs	r3, r2, r3
 8000c5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c60:	4b13      	ldr	r3, [pc, #76]	; (8000cb0 <_sbrk+0x64>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d102      	bne.n	8000c6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c68:	4b11      	ldr	r3, [pc, #68]	; (8000cb0 <_sbrk+0x64>)
 8000c6a:	4a12      	ldr	r2, [pc, #72]	; (8000cb4 <_sbrk+0x68>)
 8000c6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c6e:	4b10      	ldr	r3, [pc, #64]	; (8000cb0 <_sbrk+0x64>)
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	4413      	add	r3, r2
 8000c76:	693a      	ldr	r2, [r7, #16]
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	d207      	bcs.n	8000c8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c7c:	f003 fa34 	bl	80040e8 <__errno>
 8000c80:	4603      	mov	r3, r0
 8000c82:	220c      	movs	r2, #12
 8000c84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c86:	f04f 33ff 	mov.w	r3, #4294967295
 8000c8a:	e009      	b.n	8000ca0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c8c:	4b08      	ldr	r3, [pc, #32]	; (8000cb0 <_sbrk+0x64>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c92:	4b07      	ldr	r3, [pc, #28]	; (8000cb0 <_sbrk+0x64>)
 8000c94:	681a      	ldr	r2, [r3, #0]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	4413      	add	r3, r2
 8000c9a:	4a05      	ldr	r2, [pc, #20]	; (8000cb0 <_sbrk+0x64>)
 8000c9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c9e:	68fb      	ldr	r3, [r7, #12]
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	3718      	adds	r7, #24
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	20005000 	.word	0x20005000
 8000cac:	00000400 	.word	0x00000400
 8000cb0:	200004dc 	.word	0x200004dc
 8000cb4:	20000520 	.word	0x20000520

08000cb8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bc80      	pop	{r7}
 8000cc2:	4770      	bx	lr

08000cc4 <RESET_ALL_LED>:
int CHANGE_TIMER 	= 50;
int COUNTER_PEDES 	= 0 ;
int INCHZ_PEDES 	= 0 ;

// RESET
void RESET_ALL_LED(void){
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(TL1_D2_GPIO_Port, TL1_D2_Pin,0);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	2108      	movs	r1, #8
 8000ccc:	4810      	ldr	r0, [pc, #64]	; (8000d10 <RESET_ALL_LED+0x4c>)
 8000cce:	f001 f916 	bl	8001efe <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(TL1_D3_GPIO_Port, TL1_D3_Pin,0);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cd8:	480e      	ldr	r0, [pc, #56]	; (8000d14 <RESET_ALL_LED+0x50>)
 8000cda:	f001 f910 	bl	8001efe <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(TL2_D4_GPIO_Port, TL2_D4_Pin,0);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	2120      	movs	r1, #32
 8000ce2:	480b      	ldr	r0, [pc, #44]	; (8000d10 <RESET_ALL_LED+0x4c>)
 8000ce4:	f001 f90b 	bl	8001efe <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(TL2_D5_GPIO_Port, TL2_D5_Pin,0);
 8000ce8:	2200      	movs	r2, #0
 8000cea:	2110      	movs	r1, #16
 8000cec:	4808      	ldr	r0, [pc, #32]	; (8000d10 <RESET_ALL_LED+0x4c>)
 8000cee:	f001 f906 	bl	8001efe <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Ped_D6_GPIO_Port, Ped_D6_Pin,0);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cf8:	4805      	ldr	r0, [pc, #20]	; (8000d10 <RESET_ALL_LED+0x4c>)
 8000cfa:	f001 f900 	bl	8001efe <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Ped_D7_GPIO_Port, Ped_D7_Pin,0);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d04:	4803      	ldr	r0, [pc, #12]	; (8000d14 <RESET_ALL_LED+0x50>)
 8000d06:	f001 f8fa 	bl	8001efe <HAL_GPIO_WritePin>
}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	40010c00 	.word	0x40010c00
 8000d14:	40010800 	.word	0x40010800

08000d18 <RESET_BUZZER>:
void RESET_BUZZER(void){
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
	BUZZER_VOL  = 0;
 8000d1c:	4b0a      	ldr	r3, [pc, #40]	; (8000d48 <RESET_BUZZER+0x30>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]
	INCHZ_PEDES = 0;
 8000d22:	4b0a      	ldr	r3, [pc, #40]	; (8000d4c <RESET_BUZZER+0x34>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SET_AUTORELOAD(&htim3, 20);
 8000d28:	4b09      	ldr	r3, [pc, #36]	; (8000d50 <RESET_BUZZER+0x38>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	2214      	movs	r2, #20
 8000d2e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <RESET_BUZZER+0x38>)
 8000d32:	2214      	movs	r2, #20
 8000d34:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, 0);
 8000d36:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <RESET_BUZZER+0x38>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000d3e:	bf00      	nop
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bc80      	pop	{r7}
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	20000500 	.word	0x20000500
 8000d4c:	20000508 	.word	0x20000508
 8000d50:	20000118 	.word	0x20000118

08000d54 <RESET_UART>:
void RESET_UART(void){
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b09a      	sub	sp, #104	; 0x68
 8000d58:	af00      	add	r7, sp, #0
	char str[100];
	TL1_VAL = 0;
 8000d5a:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <RESET_UART+0x38>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
	TL2_VAL = 0;
 8000d60:	4b0b      	ldr	r3, [pc, #44]	; (8000d90 <RESET_UART+0x3c>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, (uint8_t *)str, sprintf(str, "*7SEG:%d/\r\n", 0), 1000);
 8000d66:	1d3b      	adds	r3, r7, #4
 8000d68:	2200      	movs	r2, #0
 8000d6a:	490a      	ldr	r1, [pc, #40]	; (8000d94 <RESET_UART+0x40>)
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f003 f9ed 	bl	800414c <siprintf>
 8000d72:	4603      	mov	r3, r0
 8000d74:	b29a      	uxth	r2, r3
 8000d76:	1d39      	adds	r1, r7, #4
 8000d78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d7c:	4806      	ldr	r0, [pc, #24]	; (8000d98 <RESET_UART+0x44>)
 8000d7e:	f002 fcbe 	bl	80036fe <HAL_UART_Transmit>
}
 8000d82:	bf00      	nop
 8000d84:	3768      	adds	r7, #104	; 0x68
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	200004f0 	.word	0x200004f0
 8000d90:	200004f4 	.word	0x200004f4
 8000d94:	08004a58 	.word	0x08004a58
 8000d98:	20000160 	.word	0x20000160

08000d9c <RESET_ALL>:
void RESET_ALL(void){
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
	RESET_ALL_LED();
 8000da0:	f7ff ff90 	bl	8000cc4 <RESET_ALL_LED>
	RESET_BUZZER();
 8000da4:	f7ff ffb8 	bl	8000d18 <RESET_BUZZER>
	RESET_UART();
 8000da8:	f7ff ffd4 	bl	8000d54 <RESET_UART>
}
 8000dac:	bf00      	nop
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <TL1_GREEN_AUTO>:

// TRAFFIC LIGHT 1
void TL1_GREEN_AUTO(void){
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
	if(Pedes==0){
 8000db4:	4b0c      	ldr	r3, [pc, #48]	; (8000de8 <TL1_GREEN_AUTO+0x38>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d104      	bne.n	8000dc6 <TL1_GREEN_AUTO+0x16>
		  PEDES_BEGIN = 0;
 8000dbc:	4b0b      	ldr	r3, [pc, #44]	; (8000dec <TL1_GREEN_AUTO+0x3c>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	601a      	str	r2, [r3, #0]
		  RESET_BUZZER();
 8000dc2:	f7ff ffa9 	bl	8000d18 <RESET_BUZZER>
	  }
	  HAL_GPIO_WritePin(TL1_D2_GPIO_Port, TL1_D2_Pin,1);
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	2108      	movs	r1, #8
 8000dca:	4809      	ldr	r0, [pc, #36]	; (8000df0 <TL1_GREEN_AUTO+0x40>)
 8000dcc:	f001 f897 	bl	8001efe <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(TL1_D3_GPIO_Port, TL1_D3_Pin,0);
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dd6:	4807      	ldr	r0, [pc, #28]	; (8000df4 <TL1_GREEN_AUTO+0x44>)
 8000dd8:	f001 f891 	bl	8001efe <HAL_GPIO_WritePin>
	  TL1_VAL = TIME_GREEN;
 8000ddc:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <TL1_GREEN_AUTO+0x48>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a06      	ldr	r2, [pc, #24]	; (8000dfc <TL1_GREEN_AUTO+0x4c>)
 8000de2:	6013      	str	r3, [r2, #0]
}
 8000de4:	bf00      	nop
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	200004f8 	.word	0x200004f8
 8000dec:	200004fc 	.word	0x200004fc
 8000df0:	40010c00 	.word	0x40010c00
 8000df4:	40010800 	.word	0x40010800
 8000df8:	20000038 	.word	0x20000038
 8000dfc:	200004f0 	.word	0x200004f0

08000e00 <TL1_RED_AUTO>:
void TL1_RED_AUTO(void){
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
	  if(Pedes!=0){
 8000e04:	4b0f      	ldr	r3, [pc, #60]	; (8000e44 <TL1_RED_AUTO+0x44>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d009      	beq.n	8000e20 <TL1_RED_AUTO+0x20>
		  PEDES_BEGIN = 1;
 8000e0c:	4b0e      	ldr	r3, [pc, #56]	; (8000e48 <TL1_RED_AUTO+0x48>)
 8000e0e:	2201      	movs	r2, #1
 8000e10:	601a      	str	r2, [r3, #0]
		  RESET_BUZZER();
 8000e12:	f7ff ff81 	bl	8000d18 <RESET_BUZZER>
		  Pedes--;
 8000e16:	4b0b      	ldr	r3, [pc, #44]	; (8000e44 <TL1_RED_AUTO+0x44>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	3b01      	subs	r3, #1
 8000e1c:	4a09      	ldr	r2, [pc, #36]	; (8000e44 <TL1_RED_AUTO+0x44>)
 8000e1e:	6013      	str	r3, [r2, #0]
	  }
	  HAL_GPIO_WritePin(TL1_D2_GPIO_Port, TL1_D2_Pin,0);
 8000e20:	2200      	movs	r2, #0
 8000e22:	2108      	movs	r1, #8
 8000e24:	4809      	ldr	r0, [pc, #36]	; (8000e4c <TL1_RED_AUTO+0x4c>)
 8000e26:	f001 f86a 	bl	8001efe <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(TL1_D3_GPIO_Port, TL1_D3_Pin,1);
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e30:	4807      	ldr	r0, [pc, #28]	; (8000e50 <TL1_RED_AUTO+0x50>)
 8000e32:	f001 f864 	bl	8001efe <HAL_GPIO_WritePin>
	  TL1_VAL = TIME_RED;
 8000e36:	4b07      	ldr	r3, [pc, #28]	; (8000e54 <TL1_RED_AUTO+0x54>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a07      	ldr	r2, [pc, #28]	; (8000e58 <TL1_RED_AUTO+0x58>)
 8000e3c:	6013      	str	r3, [r2, #0]
}
 8000e3e:	bf00      	nop
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	200004f8 	.word	0x200004f8
 8000e48:	200004fc 	.word	0x200004fc
 8000e4c:	40010c00 	.word	0x40010c00
 8000e50:	40010800 	.word	0x40010800
 8000e54:	20000034 	.word	0x20000034
 8000e58:	200004f0 	.word	0x200004f0

08000e5c <TL1_YELLOW_AUTO>:
void TL1_YELLOW_AUTO(void){
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(TL1_D2_GPIO_Port, TL1_D2_Pin,1);
 8000e60:	2201      	movs	r2, #1
 8000e62:	2108      	movs	r1, #8
 8000e64:	4807      	ldr	r0, [pc, #28]	; (8000e84 <TL1_YELLOW_AUTO+0x28>)
 8000e66:	f001 f84a 	bl	8001efe <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(TL1_D3_GPIO_Port, TL1_D3_Pin,1);
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e70:	4805      	ldr	r0, [pc, #20]	; (8000e88 <TL1_YELLOW_AUTO+0x2c>)
 8000e72:	f001 f844 	bl	8001efe <HAL_GPIO_WritePin>
	  TL1_VAL = TIME_YELLOW;
 8000e76:	4b05      	ldr	r3, [pc, #20]	; (8000e8c <TL1_YELLOW_AUTO+0x30>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4a05      	ldr	r2, [pc, #20]	; (8000e90 <TL1_YELLOW_AUTO+0x34>)
 8000e7c:	6013      	str	r3, [r2, #0]
}
 8000e7e:	bf00      	nop
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	40010c00 	.word	0x40010c00
 8000e88:	40010800 	.word	0x40010800
 8000e8c:	2000003c 	.word	0x2000003c
 8000e90:	200004f0 	.word	0x200004f0

08000e94 <TL1_COUNT_DOWN>:
void TL1_COUNT_DOWN(void){
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b09a      	sub	sp, #104	; 0x68
 8000e98:	af00      	add	r7, sp, #0
	char str[100];
	TL1_VAL -= 1;
 8000e9a:	4b10      	ldr	r3, [pc, #64]	; (8000edc <TL1_COUNT_DOWN+0x48>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	3b01      	subs	r3, #1
 8000ea0:	4a0e      	ldr	r2, [pc, #56]	; (8000edc <TL1_COUNT_DOWN+0x48>)
 8000ea2:	6013      	str	r3, [r2, #0]
	if (TL1_VAL>=0)
 8000ea4:	4b0d      	ldr	r3, [pc, #52]	; (8000edc <TL1_COUNT_DOWN+0x48>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	db0f      	blt.n	8000ecc <TL1_COUNT_DOWN+0x38>
		HAL_UART_Transmit(&huart2, (uint8_t *)str, sprintf(str, "*7SEG:%d/\r\n", TL1_VAL), 1000);
 8000eac:	4b0b      	ldr	r3, [pc, #44]	; (8000edc <TL1_COUNT_DOWN+0x48>)
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	1d3b      	adds	r3, r7, #4
 8000eb2:	490b      	ldr	r1, [pc, #44]	; (8000ee0 <TL1_COUNT_DOWN+0x4c>)
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f003 f949 	bl	800414c <siprintf>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	b29a      	uxth	r2, r3
 8000ebe:	1d39      	adds	r1, r7, #4
 8000ec0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ec4:	4807      	ldr	r0, [pc, #28]	; (8000ee4 <TL1_COUNT_DOWN+0x50>)
 8000ec6:	f002 fc1a 	bl	80036fe <HAL_UART_Transmit>
	else TL1_VAL = 0;
}
 8000eca:	e002      	b.n	8000ed2 <TL1_COUNT_DOWN+0x3e>
	else TL1_VAL = 0;
 8000ecc:	4b03      	ldr	r3, [pc, #12]	; (8000edc <TL1_COUNT_DOWN+0x48>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	601a      	str	r2, [r3, #0]
}
 8000ed2:	bf00      	nop
 8000ed4:	3768      	adds	r7, #104	; 0x68
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	200004f0 	.word	0x200004f0
 8000ee0:	08004a58 	.word	0x08004a58
 8000ee4:	20000160 	.word	0x20000160

08000ee8 <TL2_GREEN_AUTO>:

// TRAFFIC LIGHT 2
void TL2_GREEN_AUTO(void){
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
	  if(Pedes==0){
 8000eec:	4b0a      	ldr	r3, [pc, #40]	; (8000f18 <TL2_GREEN_AUTO+0x30>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d104      	bne.n	8000efe <TL2_GREEN_AUTO+0x16>
		  PEDES_BEGIN = 0;
 8000ef4:	4b09      	ldr	r3, [pc, #36]	; (8000f1c <TL2_GREEN_AUTO+0x34>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	601a      	str	r2, [r3, #0]
		  RESET_BUZZER();
 8000efa:	f7ff ff0d 	bl	8000d18 <RESET_BUZZER>
	  }
	  HAL_GPIO_WritePin(TL2_D4_GPIO_Port, TL2_D4_Pin,0);
 8000efe:	2200      	movs	r2, #0
 8000f00:	2120      	movs	r1, #32
 8000f02:	4807      	ldr	r0, [pc, #28]	; (8000f20 <TL2_GREEN_AUTO+0x38>)
 8000f04:	f000 fffb 	bl	8001efe <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(TL2_D5_GPIO_Port, TL2_D5_Pin,1);
 8000f08:	2201      	movs	r2, #1
 8000f0a:	2110      	movs	r1, #16
 8000f0c:	4804      	ldr	r0, [pc, #16]	; (8000f20 <TL2_GREEN_AUTO+0x38>)
 8000f0e:	f000 fff6 	bl	8001efe <HAL_GPIO_WritePin>
	  //TL2_VAL = TIME_GREEN;
}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	200004f8 	.word	0x200004f8
 8000f1c:	200004fc 	.word	0x200004fc
 8000f20:	40010c00 	.word	0x40010c00

08000f24 <TL2_RED_AUTO>:
void TL2_RED_AUTO(void){
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
	  if(Pedes!=0){
 8000f28:	4b0c      	ldr	r3, [pc, #48]	; (8000f5c <TL2_RED_AUTO+0x38>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d009      	beq.n	8000f44 <TL2_RED_AUTO+0x20>
		  PEDES_BEGIN = 1;
 8000f30:	4b0b      	ldr	r3, [pc, #44]	; (8000f60 <TL2_RED_AUTO+0x3c>)
 8000f32:	2201      	movs	r2, #1
 8000f34:	601a      	str	r2, [r3, #0]
		  RESET_BUZZER();
 8000f36:	f7ff feef 	bl	8000d18 <RESET_BUZZER>
		  Pedes--;
 8000f3a:	4b08      	ldr	r3, [pc, #32]	; (8000f5c <TL2_RED_AUTO+0x38>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	3b01      	subs	r3, #1
 8000f40:	4a06      	ldr	r2, [pc, #24]	; (8000f5c <TL2_RED_AUTO+0x38>)
 8000f42:	6013      	str	r3, [r2, #0]
	  }
	  HAL_GPIO_WritePin(TL2_D4_GPIO_Port, TL2_D4_Pin,1);
 8000f44:	2201      	movs	r2, #1
 8000f46:	2120      	movs	r1, #32
 8000f48:	4806      	ldr	r0, [pc, #24]	; (8000f64 <TL2_RED_AUTO+0x40>)
 8000f4a:	f000 ffd8 	bl	8001efe <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(TL2_D5_GPIO_Port, TL2_D5_Pin,0);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	2110      	movs	r1, #16
 8000f52:	4804      	ldr	r0, [pc, #16]	; (8000f64 <TL2_RED_AUTO+0x40>)
 8000f54:	f000 ffd3 	bl	8001efe <HAL_GPIO_WritePin>
	  //TL2_VAL = TIME_RED;
}
 8000f58:	bf00      	nop
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	200004f8 	.word	0x200004f8
 8000f60:	200004fc 	.word	0x200004fc
 8000f64:	40010c00 	.word	0x40010c00

08000f68 <TL2_YELLOW_AUTO>:
void TL2_YELLOW_AUTO(void){
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(TL2_D4_GPIO_Port, TL2_D4_Pin,1);
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	2120      	movs	r1, #32
 8000f70:	4804      	ldr	r0, [pc, #16]	; (8000f84 <TL2_YELLOW_AUTO+0x1c>)
 8000f72:	f000 ffc4 	bl	8001efe <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(TL2_D5_GPIO_Port, TL2_D5_Pin,1);
 8000f76:	2201      	movs	r2, #1
 8000f78:	2110      	movs	r1, #16
 8000f7a:	4802      	ldr	r0, [pc, #8]	; (8000f84 <TL2_YELLOW_AUTO+0x1c>)
 8000f7c:	f000 ffbf 	bl	8001efe <HAL_GPIO_WritePin>
	  //TL2_VAL = TIME_YELLOW;
}
 8000f80:	bf00      	nop
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	40010c00 	.word	0x40010c00

08000f88 <BLINKY_GREEN>:
	else TL2_VAL = 0;
}

// BLINKY THE LIGHT
int TURN=1;
void BLINKY_GREEN(void){
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
	if(TURN==1){
 8000f8c:	4b1c      	ldr	r3, [pc, #112]	; (8001000 <BLINKY_GREEN+0x78>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d11a      	bne.n	8000fca <BLINKY_GREEN+0x42>
		  // Green light for TL1
		  HAL_GPIO_WritePin(TL1_D2_GPIO_Port, TL1_D2_Pin,1);
 8000f94:	2201      	movs	r2, #1
 8000f96:	2108      	movs	r1, #8
 8000f98:	481a      	ldr	r0, [pc, #104]	; (8001004 <BLINKY_GREEN+0x7c>)
 8000f9a:	f000 ffb0 	bl	8001efe <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(TL1_D3_GPIO_Port, TL1_D3_Pin,0);
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fa4:	4818      	ldr	r0, [pc, #96]	; (8001008 <BLINKY_GREEN+0x80>)
 8000fa6:	f000 ffaa 	bl	8001efe <HAL_GPIO_WritePin>
		  // Green light for TL2
		  HAL_GPIO_WritePin(TL2_D4_GPIO_Port, TL2_D4_Pin,0);
 8000faa:	2200      	movs	r2, #0
 8000fac:	2120      	movs	r1, #32
 8000fae:	4815      	ldr	r0, [pc, #84]	; (8001004 <BLINKY_GREEN+0x7c>)
 8000fb0:	f000 ffa5 	bl	8001efe <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(TL2_D5_GPIO_Port, TL2_D5_Pin,1);
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	2110      	movs	r1, #16
 8000fb8:	4812      	ldr	r0, [pc, #72]	; (8001004 <BLINKY_GREEN+0x7c>)
 8000fba:	f000 ffa0 	bl	8001efe <HAL_GPIO_WritePin>
		  TURN++;
 8000fbe:	4b10      	ldr	r3, [pc, #64]	; (8001000 <BLINKY_GREEN+0x78>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	4a0e      	ldr	r2, [pc, #56]	; (8001000 <BLINKY_GREEN+0x78>)
 8000fc6:	6013      	str	r3, [r2, #0]
		  HAL_GPIO_WritePin(TL1_D3_GPIO_Port, TL1_D3_Pin,0);
		  HAL_GPIO_WritePin(TL2_D4_GPIO_Port, TL2_D4_Pin,0);
		  HAL_GPIO_WritePin(TL2_D5_GPIO_Port, TL2_D5_Pin,0);
		  TURN=1;
	}
}
 8000fc8:	e017      	b.n	8000ffa <BLINKY_GREEN+0x72>
		  HAL_GPIO_WritePin(TL1_D2_GPIO_Port, TL1_D2_Pin,0);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	2108      	movs	r1, #8
 8000fce:	480d      	ldr	r0, [pc, #52]	; (8001004 <BLINKY_GREEN+0x7c>)
 8000fd0:	f000 ff95 	bl	8001efe <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(TL1_D3_GPIO_Port, TL1_D3_Pin,0);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fda:	480b      	ldr	r0, [pc, #44]	; (8001008 <BLINKY_GREEN+0x80>)
 8000fdc:	f000 ff8f 	bl	8001efe <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(TL2_D4_GPIO_Port, TL2_D4_Pin,0);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	2120      	movs	r1, #32
 8000fe4:	4807      	ldr	r0, [pc, #28]	; (8001004 <BLINKY_GREEN+0x7c>)
 8000fe6:	f000 ff8a 	bl	8001efe <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(TL2_D5_GPIO_Port, TL2_D5_Pin,0);
 8000fea:	2200      	movs	r2, #0
 8000fec:	2110      	movs	r1, #16
 8000fee:	4805      	ldr	r0, [pc, #20]	; (8001004 <BLINKY_GREEN+0x7c>)
 8000ff0:	f000 ff85 	bl	8001efe <HAL_GPIO_WritePin>
		  TURN=1;
 8000ff4:	4b02      	ldr	r3, [pc, #8]	; (8001000 <BLINKY_GREEN+0x78>)
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	601a      	str	r2, [r3, #0]
}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	20000044 	.word	0x20000044
 8001004:	40010c00 	.word	0x40010c00
 8001008:	40010800 	.word	0x40010800

0800100c <BLINKY_RED>:
void BLINKY_RED(void){
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
	if(TURN==1){
 8001010:	4b1c      	ldr	r3, [pc, #112]	; (8001084 <BLINKY_RED+0x78>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2b01      	cmp	r3, #1
 8001016:	d11a      	bne.n	800104e <BLINKY_RED+0x42>
		// Red light for TL1
		  HAL_GPIO_WritePin(TL1_D2_GPIO_Port, TL1_D2_Pin,0);
 8001018:	2200      	movs	r2, #0
 800101a:	2108      	movs	r1, #8
 800101c:	481a      	ldr	r0, [pc, #104]	; (8001088 <BLINKY_RED+0x7c>)
 800101e:	f000 ff6e 	bl	8001efe <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(TL1_D3_GPIO_Port, TL1_D3_Pin,1);
 8001022:	2201      	movs	r2, #1
 8001024:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001028:	4818      	ldr	r0, [pc, #96]	; (800108c <BLINKY_RED+0x80>)
 800102a:	f000 ff68 	bl	8001efe <HAL_GPIO_WritePin>
		  // Red light for TL2
		  HAL_GPIO_WritePin(TL2_D4_GPIO_Port, TL2_D4_Pin,1);
 800102e:	2201      	movs	r2, #1
 8001030:	2120      	movs	r1, #32
 8001032:	4815      	ldr	r0, [pc, #84]	; (8001088 <BLINKY_RED+0x7c>)
 8001034:	f000 ff63 	bl	8001efe <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(TL2_D5_GPIO_Port, TL2_D5_Pin,0);
 8001038:	2200      	movs	r2, #0
 800103a:	2110      	movs	r1, #16
 800103c:	4812      	ldr	r0, [pc, #72]	; (8001088 <BLINKY_RED+0x7c>)
 800103e:	f000 ff5e 	bl	8001efe <HAL_GPIO_WritePin>
		  TURN++;
 8001042:	4b10      	ldr	r3, [pc, #64]	; (8001084 <BLINKY_RED+0x78>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	3301      	adds	r3, #1
 8001048:	4a0e      	ldr	r2, [pc, #56]	; (8001084 <BLINKY_RED+0x78>)
 800104a:	6013      	str	r3, [r2, #0]
		  HAL_GPIO_WritePin(TL1_D3_GPIO_Port, TL1_D3_Pin,0);
		  HAL_GPIO_WritePin(TL2_D4_GPIO_Port, TL2_D4_Pin,0);
		  HAL_GPIO_WritePin(TL2_D5_GPIO_Port, TL2_D5_Pin,0);
		  TURN=1;
	}
}
 800104c:	e017      	b.n	800107e <BLINKY_RED+0x72>
		  HAL_GPIO_WritePin(TL1_D2_GPIO_Port, TL1_D2_Pin,0);
 800104e:	2200      	movs	r2, #0
 8001050:	2108      	movs	r1, #8
 8001052:	480d      	ldr	r0, [pc, #52]	; (8001088 <BLINKY_RED+0x7c>)
 8001054:	f000 ff53 	bl	8001efe <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(TL1_D3_GPIO_Port, TL1_D3_Pin,0);
 8001058:	2200      	movs	r2, #0
 800105a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800105e:	480b      	ldr	r0, [pc, #44]	; (800108c <BLINKY_RED+0x80>)
 8001060:	f000 ff4d 	bl	8001efe <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(TL2_D4_GPIO_Port, TL2_D4_Pin,0);
 8001064:	2200      	movs	r2, #0
 8001066:	2120      	movs	r1, #32
 8001068:	4807      	ldr	r0, [pc, #28]	; (8001088 <BLINKY_RED+0x7c>)
 800106a:	f000 ff48 	bl	8001efe <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(TL2_D5_GPIO_Port, TL2_D5_Pin,0);
 800106e:	2200      	movs	r2, #0
 8001070:	2110      	movs	r1, #16
 8001072:	4805      	ldr	r0, [pc, #20]	; (8001088 <BLINKY_RED+0x7c>)
 8001074:	f000 ff43 	bl	8001efe <HAL_GPIO_WritePin>
		  TURN=1;
 8001078:	4b02      	ldr	r3, [pc, #8]	; (8001084 <BLINKY_RED+0x78>)
 800107a:	2201      	movs	r2, #1
 800107c:	601a      	str	r2, [r3, #0]
}
 800107e:	bf00      	nop
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	20000044 	.word	0x20000044
 8001088:	40010c00 	.word	0x40010c00
 800108c:	40010800 	.word	0x40010800

08001090 <BLINKY_YELLOW>:
void BLINKY_YELLOW(void){
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
	if(TURN==1){
 8001094:	4b1c      	ldr	r3, [pc, #112]	; (8001108 <BLINKY_YELLOW+0x78>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2b01      	cmp	r3, #1
 800109a:	d11a      	bne.n	80010d2 <BLINKY_YELLOW+0x42>
		  HAL_GPIO_WritePin(TL1_D2_GPIO_Port, TL1_D2_Pin,1);
 800109c:	2201      	movs	r2, #1
 800109e:	2108      	movs	r1, #8
 80010a0:	481a      	ldr	r0, [pc, #104]	; (800110c <BLINKY_YELLOW+0x7c>)
 80010a2:	f000 ff2c 	bl	8001efe <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(TL1_D3_GPIO_Port, TL1_D3_Pin,1);
 80010a6:	2201      	movs	r2, #1
 80010a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010ac:	4818      	ldr	r0, [pc, #96]	; (8001110 <BLINKY_YELLOW+0x80>)
 80010ae:	f000 ff26 	bl	8001efe <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(TL2_D4_GPIO_Port, TL2_D4_Pin,1);
 80010b2:	2201      	movs	r2, #1
 80010b4:	2120      	movs	r1, #32
 80010b6:	4815      	ldr	r0, [pc, #84]	; (800110c <BLINKY_YELLOW+0x7c>)
 80010b8:	f000 ff21 	bl	8001efe <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(TL2_D5_GPIO_Port, TL2_D5_Pin,1);
 80010bc:	2201      	movs	r2, #1
 80010be:	2110      	movs	r1, #16
 80010c0:	4812      	ldr	r0, [pc, #72]	; (800110c <BLINKY_YELLOW+0x7c>)
 80010c2:	f000 ff1c 	bl	8001efe <HAL_GPIO_WritePin>
		  TURN++;
 80010c6:	4b10      	ldr	r3, [pc, #64]	; (8001108 <BLINKY_YELLOW+0x78>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	3301      	adds	r3, #1
 80010cc:	4a0e      	ldr	r2, [pc, #56]	; (8001108 <BLINKY_YELLOW+0x78>)
 80010ce:	6013      	str	r3, [r2, #0]
		  HAL_GPIO_WritePin(TL1_D3_GPIO_Port, TL1_D3_Pin,0);
		  HAL_GPIO_WritePin(TL2_D4_GPIO_Port, TL2_D4_Pin,0);
		  HAL_GPIO_WritePin(TL2_D5_GPIO_Port, TL2_D5_Pin,0);
		  TURN=1;
	}
}
 80010d0:	e017      	b.n	8001102 <BLINKY_YELLOW+0x72>
		  HAL_GPIO_WritePin(TL1_D2_GPIO_Port, TL1_D2_Pin,0);
 80010d2:	2200      	movs	r2, #0
 80010d4:	2108      	movs	r1, #8
 80010d6:	480d      	ldr	r0, [pc, #52]	; (800110c <BLINKY_YELLOW+0x7c>)
 80010d8:	f000 ff11 	bl	8001efe <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(TL1_D3_GPIO_Port, TL1_D3_Pin,0);
 80010dc:	2200      	movs	r2, #0
 80010de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010e2:	480b      	ldr	r0, [pc, #44]	; (8001110 <BLINKY_YELLOW+0x80>)
 80010e4:	f000 ff0b 	bl	8001efe <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(TL2_D4_GPIO_Port, TL2_D4_Pin,0);
 80010e8:	2200      	movs	r2, #0
 80010ea:	2120      	movs	r1, #32
 80010ec:	4807      	ldr	r0, [pc, #28]	; (800110c <BLINKY_YELLOW+0x7c>)
 80010ee:	f000 ff06 	bl	8001efe <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(TL2_D5_GPIO_Port, TL2_D5_Pin,0);
 80010f2:	2200      	movs	r2, #0
 80010f4:	2110      	movs	r1, #16
 80010f6:	4805      	ldr	r0, [pc, #20]	; (800110c <BLINKY_YELLOW+0x7c>)
 80010f8:	f000 ff01 	bl	8001efe <HAL_GPIO_WritePin>
		  TURN=1;
 80010fc:	4b02      	ldr	r3, [pc, #8]	; (8001108 <BLINKY_YELLOW+0x78>)
 80010fe:	2201      	movs	r2, #1
 8001100:	601a      	str	r2, [r3, #0]
}
 8001102:	bf00      	nop
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	20000044 	.word	0x20000044
 800110c:	40010c00 	.word	0x40010c00
 8001110:	40010800 	.word	0x40010800

08001114 <TL_PEDES>:

// TRAFFIC SIGNAL FOR PEDESTRIAN
void TL_PEDES(void){
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
	if (PEDES_BEGIN==1){
 8001118:	4b0f      	ldr	r3, [pc, #60]	; (8001158 <TL_PEDES+0x44>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	2b01      	cmp	r3, #1
 800111e:	d10c      	bne.n	800113a <TL_PEDES+0x26>
		  HAL_GPIO_WritePin(Ped_D7_GPIO_Port, Ped_D7_Pin,1);
 8001120:	2201      	movs	r2, #1
 8001122:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001126:	480d      	ldr	r0, [pc, #52]	; (800115c <TL_PEDES+0x48>)
 8001128:	f000 fee9 	bl	8001efe <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Ped_D6_GPIO_Port, Ped_D6_Pin,0);
 800112c:	2200      	movs	r2, #0
 800112e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001132:	480b      	ldr	r0, [pc, #44]	; (8001160 <TL_PEDES+0x4c>)
 8001134:	f000 fee3 	bl	8001efe <HAL_GPIO_WritePin>
	} else {
		 HAL_GPIO_WritePin(Ped_D7_GPIO_Port, Ped_D7_Pin,0);
		 HAL_GPIO_WritePin(Ped_D6_GPIO_Port, Ped_D6_Pin,1);
	}
}
 8001138:	e00b      	b.n	8001152 <TL_PEDES+0x3e>
		 HAL_GPIO_WritePin(Ped_D7_GPIO_Port, Ped_D7_Pin,0);
 800113a:	2200      	movs	r2, #0
 800113c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001140:	4806      	ldr	r0, [pc, #24]	; (800115c <TL_PEDES+0x48>)
 8001142:	f000 fedc 	bl	8001efe <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(Ped_D6_GPIO_Port, Ped_D6_Pin,1);
 8001146:	2201      	movs	r2, #1
 8001148:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800114c:	4804      	ldr	r0, [pc, #16]	; (8001160 <TL_PEDES+0x4c>)
 800114e:	f000 fed6 	bl	8001efe <HAL_GPIO_WritePin>
}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	200004fc 	.word	0x200004fc
 800115c:	40010800 	.word	0x40010800
 8001160:	40010c00 	.word	0x40010c00

08001164 <BUZZ_PEDES_CHANGE_DURATION>:
void BUZZ_PEDES_CHANGE_DURATION(int time){
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
	COUNTER_PEDES = time;
 800116c:	4a12      	ldr	r2, [pc, #72]	; (80011b8 <BUZZ_PEDES_CHANGE_DURATION+0x54>)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6013      	str	r3, [r2, #0]

	INCHZ_PEDES += 1;
 8001172:	4b12      	ldr	r3, [pc, #72]	; (80011bc <BUZZ_PEDES_CHANGE_DURATION+0x58>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	3301      	adds	r3, #1
 8001178:	4a10      	ldr	r2, [pc, #64]	; (80011bc <BUZZ_PEDES_CHANGE_DURATION+0x58>)
 800117a:	6013      	str	r3, [r2, #0]
	if (INCHZ_PEDES <= 2*TIME_GREEN)
 800117c:	4b10      	ldr	r3, [pc, #64]	; (80011c0 <BUZZ_PEDES_CHANGE_DURATION+0x5c>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	005a      	lsls	r2, r3, #1
 8001182:	4b0e      	ldr	r3, [pc, #56]	; (80011bc <BUZZ_PEDES_CHANGE_DURATION+0x58>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	429a      	cmp	r2, r3
 8001188:	db03      	blt.n	8001192 <BUZZ_PEDES_CHANGE_DURATION+0x2e>
		CHANGE_TIMER = 50;
 800118a:	4b0e      	ldr	r3, [pc, #56]	; (80011c4 <BUZZ_PEDES_CHANGE_DURATION+0x60>)
 800118c:	2232      	movs	r2, #50	; 0x32
 800118e:	601a      	str	r2, [r3, #0]
	else if (INCHZ_PEDES <= 2*TIME_GREEN + 4*TIME_YELLOW)
		CHANGE_TIMER = 25;
}
 8001190:	e00d      	b.n	80011ae <BUZZ_PEDES_CHANGE_DURATION+0x4a>
	else if (INCHZ_PEDES <= 2*TIME_GREEN + 4*TIME_YELLOW)
 8001192:	4b0d      	ldr	r3, [pc, #52]	; (80011c8 <BUZZ_PEDES_CHANGE_DURATION+0x64>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	005a      	lsls	r2, r3, #1
 8001198:	4b09      	ldr	r3, [pc, #36]	; (80011c0 <BUZZ_PEDES_CHANGE_DURATION+0x5c>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4413      	add	r3, r2
 800119e:	005a      	lsls	r2, r3, #1
 80011a0:	4b06      	ldr	r3, [pc, #24]	; (80011bc <BUZZ_PEDES_CHANGE_DURATION+0x58>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	db02      	blt.n	80011ae <BUZZ_PEDES_CHANGE_DURATION+0x4a>
		CHANGE_TIMER = 25;
 80011a8:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <BUZZ_PEDES_CHANGE_DURATION+0x60>)
 80011aa:	2219      	movs	r2, #25
 80011ac:	601a      	str	r2, [r3, #0]
}
 80011ae:	bf00      	nop
 80011b0:	370c      	adds	r7, #12
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bc80      	pop	{r7}
 80011b6:	4770      	bx	lr
 80011b8:	20000504 	.word	0x20000504
 80011bc:	20000508 	.word	0x20000508
 80011c0:	20000038 	.word	0x20000038
 80011c4:	20000040 	.word	0x20000040
 80011c8:	2000003c 	.word	0x2000003c

080011cc <BUZZ_PEDES_CHANGE_HZ>:
void BUZZ_PEDES_CHANGE_HZ(void){
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
	if (BUZZER_VOL == BUZZER_ON) BUZZER_VOL = BUZZER_OFF;
 80011d0:	4b07      	ldr	r3, [pc, #28]	; (80011f0 <BUZZ_PEDES_CHANGE_HZ+0x24>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	2b0a      	cmp	r3, #10
 80011d6:	d103      	bne.n	80011e0 <BUZZ_PEDES_CHANGE_HZ+0x14>
 80011d8:	4b05      	ldr	r3, [pc, #20]	; (80011f0 <BUZZ_PEDES_CHANGE_HZ+0x24>)
 80011da:	2200      	movs	r2, #0
 80011dc:	601a      	str	r2, [r3, #0]
	else BUZZER_VOL = BUZZER_ON;
}
 80011de:	e002      	b.n	80011e6 <BUZZ_PEDES_CHANGE_HZ+0x1a>
	else BUZZER_VOL = BUZZER_ON;
 80011e0:	4b03      	ldr	r3, [pc, #12]	; (80011f0 <BUZZ_PEDES_CHANGE_HZ+0x24>)
 80011e2:	220a      	movs	r2, #10
 80011e4:	601a      	str	r2, [r3, #0]
}
 80011e6:	bf00      	nop
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bc80      	pop	{r7}
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	20000500 	.word	0x20000500

080011f4 <BUZZ_PEDES>:
void BUZZ_PEDES(void){
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
	if (PEDES_BEGIN == 1){
 80011f8:	4b0f      	ldr	r3, [pc, #60]	; (8001238 <BUZZ_PEDES+0x44>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d111      	bne.n	8001224 <BUZZ_PEDES+0x30>
		if (COUNTER_PEDES <= 0){
 8001200:	4b0e      	ldr	r3, [pc, #56]	; (800123c <BUZZ_PEDES+0x48>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	2b00      	cmp	r3, #0
 8001206:	dc07      	bgt.n	8001218 <BUZZ_PEDES+0x24>
			BUZZ_PEDES_CHANGE_DURATION(CHANGE_TIMER);
 8001208:	4b0d      	ldr	r3, [pc, #52]	; (8001240 <BUZZ_PEDES+0x4c>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff ffa9 	bl	8001164 <BUZZ_PEDES_CHANGE_DURATION>
			BUZZ_PEDES_CHANGE_HZ();
 8001212:	f7ff ffdb 	bl	80011cc <BUZZ_PEDES_CHANGE_HZ>
 8001216:	e008      	b.n	800122a <BUZZ_PEDES+0x36>
		} else COUNTER_PEDES --;
 8001218:	4b08      	ldr	r3, [pc, #32]	; (800123c <BUZZ_PEDES+0x48>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	3b01      	subs	r3, #1
 800121e:	4a07      	ldr	r2, [pc, #28]	; (800123c <BUZZ_PEDES+0x48>)
 8001220:	6013      	str	r3, [r2, #0]
 8001222:	e002      	b.n	800122a <BUZZ_PEDES+0x36>
	}
	else BUZZER_VOL  = 0;
 8001224:	4b07      	ldr	r3, [pc, #28]	; (8001244 <BUZZ_PEDES+0x50>)
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, BUZZER_VOL);
 800122a:	4b06      	ldr	r3, [pc, #24]	; (8001244 <BUZZ_PEDES+0x50>)
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	4b06      	ldr	r3, [pc, #24]	; (8001248 <BUZZ_PEDES+0x54>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001234:	bf00      	nop
 8001236:	bd80      	pop	{r7, pc}
 8001238:	200004fc 	.word	0x200004fc
 800123c:	20000504 	.word	0x20000504
 8001240:	20000040 	.word	0x20000040
 8001244:	20000500 	.word	0x20000500
 8001248:	20000118 	.word	0x20000118

0800124c <DEL_TASKS_PREVIOUS_MODE>:

//DELETE TASKS OF PREVIOUS MODE
void DEL_TASKS_PREVIOUS_MODE(void){
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
	for (int i=1; i<=NO_TASKS; i++){
 8001252:	2301      	movs	r3, #1
 8001254:	607b      	str	r3, [r7, #4]
 8001256:	e009      	b.n	800126c <DEL_TASKS_PREVIOUS_MODE+0x20>
		SCH_Delete_Task(fixed_position+i);
 8001258:	4b09      	ldr	r3, [pc, #36]	; (8001280 <DEL_TASKS_PREVIOUS_MODE+0x34>)
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	4413      	add	r3, r2
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff fb77 	bl	8000954 <SCH_Delete_Task>
	for (int i=1; i<=NO_TASKS; i++){
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	3301      	adds	r3, #1
 800126a:	607b      	str	r3, [r7, #4]
 800126c:	4b05      	ldr	r3, [pc, #20]	; (8001284 <DEL_TASKS_PREVIOUS_MODE+0x38>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	687a      	ldr	r2, [r7, #4]
 8001272:	429a      	cmp	r2, r3
 8001274:	ddf0      	ble.n	8001258 <DEL_TASKS_PREVIOUS_MODE+0xc>
	}
}
 8001276:	bf00      	nop
 8001278:	bf00      	nop
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	20000028 	.word	0x20000028
 8001284:	20000030 	.word	0x20000030

08001288 <ADD_TASKS_MODE_AUTO>:

//ADD TASKS FOR CURRENT MODE
void ADD_TASKS_MODE_AUTO(void){
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
	//ADD TASK OF AUTO
	SCH_Add_Task(	/*TASK*/ 	TL1_GREEN_AUTO,
					/*DELAY*/	SECOND_DURATION,
					/*PERIOD*/	(TIME_YELLOW + TIME_RED + TIME_GREEN) * SECOND_DURATION
 800128c:	4b49      	ldr	r3, [pc, #292]	; (80013b4 <ADD_TASKS_MODE_AUTO+0x12c>)
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	4b49      	ldr	r3, [pc, #292]	; (80013b8 <ADD_TASKS_MODE_AUTO+0x130>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	441a      	add	r2, r3
 8001296:	4b49      	ldr	r3, [pc, #292]	; (80013bc <ADD_TASKS_MODE_AUTO+0x134>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4413      	add	r3, r2
	SCH_Add_Task(	/*TASK*/ 	TL1_GREEN_AUTO,
 800129c:	2264      	movs	r2, #100	; 0x64
 800129e:	fb02 f303 	mul.w	r3, r2, r3
 80012a2:	461a      	mov	r2, r3
 80012a4:	2164      	movs	r1, #100	; 0x64
 80012a6:	4846      	ldr	r0, [pc, #280]	; (80013c0 <ADD_TASKS_MODE_AUTO+0x138>)
 80012a8:	f7ff fabe 	bl	8000828 <SCH_Add_Task>
				);
	SCH_Add_Task(	/*TASK*/	TL2_GREEN_AUTO,
					/*DELAY*/	(1+TIME_RED)*SECOND_DURATION,
 80012ac:	4b42      	ldr	r3, [pc, #264]	; (80013b8 <ADD_TASKS_MODE_AUTO+0x130>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	3301      	adds	r3, #1
	SCH_Add_Task(	/*TASK*/	TL2_GREEN_AUTO,
 80012b2:	2264      	movs	r2, #100	; 0x64
 80012b4:	fb02 f103 	mul.w	r1, r2, r3
					/*PERIOD*/	(TIME_YELLOW + TIME_RED + TIME_GREEN) * SECOND_DURATION
 80012b8:	4b3e      	ldr	r3, [pc, #248]	; (80013b4 <ADD_TASKS_MODE_AUTO+0x12c>)
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	4b3e      	ldr	r3, [pc, #248]	; (80013b8 <ADD_TASKS_MODE_AUTO+0x130>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	441a      	add	r2, r3
 80012c2:	4b3e      	ldr	r3, [pc, #248]	; (80013bc <ADD_TASKS_MODE_AUTO+0x134>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4413      	add	r3, r2
	SCH_Add_Task(	/*TASK*/	TL2_GREEN_AUTO,
 80012c8:	2264      	movs	r2, #100	; 0x64
 80012ca:	fb02 f303 	mul.w	r3, r2, r3
 80012ce:	461a      	mov	r2, r3
 80012d0:	483c      	ldr	r0, [pc, #240]	; (80013c4 <ADD_TASKS_MODE_AUTO+0x13c>)
 80012d2:	f7ff faa9 	bl	8000828 <SCH_Add_Task>
				);

	SCH_Add_Task(	/*TASK*/	TL1_YELLOW_AUTO,
					/*DELAY*/	(1+TIME_GREEN)*SECOND_DURATION,
 80012d6:	4b39      	ldr	r3, [pc, #228]	; (80013bc <ADD_TASKS_MODE_AUTO+0x134>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	3301      	adds	r3, #1
	SCH_Add_Task(	/*TASK*/	TL1_YELLOW_AUTO,
 80012dc:	2264      	movs	r2, #100	; 0x64
 80012de:	fb02 f103 	mul.w	r1, r2, r3
					/*PERIOD*/	(TIME_YELLOW + TIME_RED + TIME_GREEN) * SECOND_DURATION
 80012e2:	4b34      	ldr	r3, [pc, #208]	; (80013b4 <ADD_TASKS_MODE_AUTO+0x12c>)
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	4b34      	ldr	r3, [pc, #208]	; (80013b8 <ADD_TASKS_MODE_AUTO+0x130>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	441a      	add	r2, r3
 80012ec:	4b33      	ldr	r3, [pc, #204]	; (80013bc <ADD_TASKS_MODE_AUTO+0x134>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4413      	add	r3, r2
	SCH_Add_Task(	/*TASK*/	TL1_YELLOW_AUTO,
 80012f2:	2264      	movs	r2, #100	; 0x64
 80012f4:	fb02 f303 	mul.w	r3, r2, r3
 80012f8:	461a      	mov	r2, r3
 80012fa:	4833      	ldr	r0, [pc, #204]	; (80013c8 <ADD_TASKS_MODE_AUTO+0x140>)
 80012fc:	f7ff fa94 	bl	8000828 <SCH_Add_Task>
				);
	SCH_Add_Task(	/*TASK*/	TL2_YELLOW_AUTO,
					/*DELAY*/	(1+TIME_GREEN+TIME_RED)*SECOND_DURATION,
 8001300:	4b2e      	ldr	r3, [pc, #184]	; (80013bc <ADD_TASKS_MODE_AUTO+0x134>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	1c5a      	adds	r2, r3, #1
 8001306:	4b2c      	ldr	r3, [pc, #176]	; (80013b8 <ADD_TASKS_MODE_AUTO+0x130>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4413      	add	r3, r2
	SCH_Add_Task(	/*TASK*/	TL2_YELLOW_AUTO,
 800130c:	2264      	movs	r2, #100	; 0x64
 800130e:	fb02 f103 	mul.w	r1, r2, r3
					/*PERIOD*/	(TIME_YELLOW + TIME_RED + TIME_GREEN) * SECOND_DURATION
 8001312:	4b28      	ldr	r3, [pc, #160]	; (80013b4 <ADD_TASKS_MODE_AUTO+0x12c>)
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	4b28      	ldr	r3, [pc, #160]	; (80013b8 <ADD_TASKS_MODE_AUTO+0x130>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	441a      	add	r2, r3
 800131c:	4b27      	ldr	r3, [pc, #156]	; (80013bc <ADD_TASKS_MODE_AUTO+0x134>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4413      	add	r3, r2
	SCH_Add_Task(	/*TASK*/	TL2_YELLOW_AUTO,
 8001322:	2264      	movs	r2, #100	; 0x64
 8001324:	fb02 f303 	mul.w	r3, r2, r3
 8001328:	461a      	mov	r2, r3
 800132a:	4828      	ldr	r0, [pc, #160]	; (80013cc <ADD_TASKS_MODE_AUTO+0x144>)
 800132c:	f7ff fa7c 	bl	8000828 <SCH_Add_Task>
				);

	SCH_Add_Task(	/*TASK*/	TL1_RED_AUTO,
					/*DELAY*/	(1 + TIME_GREEN + TIME_YELLOW) * SECOND_DURATION ,
 8001330:	4b22      	ldr	r3, [pc, #136]	; (80013bc <ADD_TASKS_MODE_AUTO+0x134>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	1c5a      	adds	r2, r3, #1
 8001336:	4b1f      	ldr	r3, [pc, #124]	; (80013b4 <ADD_TASKS_MODE_AUTO+0x12c>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4413      	add	r3, r2
	SCH_Add_Task(	/*TASK*/	TL1_RED_AUTO,
 800133c:	2264      	movs	r2, #100	; 0x64
 800133e:	fb02 f103 	mul.w	r1, r2, r3
					/*PERIOD*/	(TIME_YELLOW + TIME_RED + TIME_GREEN) * SECOND_DURATION
 8001342:	4b1c      	ldr	r3, [pc, #112]	; (80013b4 <ADD_TASKS_MODE_AUTO+0x12c>)
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	4b1c      	ldr	r3, [pc, #112]	; (80013b8 <ADD_TASKS_MODE_AUTO+0x130>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	441a      	add	r2, r3
 800134c:	4b1b      	ldr	r3, [pc, #108]	; (80013bc <ADD_TASKS_MODE_AUTO+0x134>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4413      	add	r3, r2
	SCH_Add_Task(	/*TASK*/	TL1_RED_AUTO,
 8001352:	2264      	movs	r2, #100	; 0x64
 8001354:	fb02 f303 	mul.w	r3, r2, r3
 8001358:	461a      	mov	r2, r3
 800135a:	481d      	ldr	r0, [pc, #116]	; (80013d0 <ADD_TASKS_MODE_AUTO+0x148>)
 800135c:	f7ff fa64 	bl	8000828 <SCH_Add_Task>
				);
	SCH_Add_Task(	/*TASK*/	TL2_RED_AUTO,
					/*DELAY*/	SECOND_DURATION,
					/*PERIOD*/ 	(TIME_YELLOW + TIME_RED + TIME_GREEN) * SECOND_DURATION
 8001360:	4b14      	ldr	r3, [pc, #80]	; (80013b4 <ADD_TASKS_MODE_AUTO+0x12c>)
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	4b14      	ldr	r3, [pc, #80]	; (80013b8 <ADD_TASKS_MODE_AUTO+0x130>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	441a      	add	r2, r3
 800136a:	4b14      	ldr	r3, [pc, #80]	; (80013bc <ADD_TASKS_MODE_AUTO+0x134>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4413      	add	r3, r2
	SCH_Add_Task(	/*TASK*/	TL2_RED_AUTO,
 8001370:	2264      	movs	r2, #100	; 0x64
 8001372:	fb02 f303 	mul.w	r3, r2, r3
 8001376:	461a      	mov	r2, r3
 8001378:	2164      	movs	r1, #100	; 0x64
 800137a:	4816      	ldr	r0, [pc, #88]	; (80013d4 <ADD_TASKS_MODE_AUTO+0x14c>)
 800137c:	f7ff fa54 	bl	8000828 <SCH_Add_Task>
				);

	SCH_Add_Task(	/*TASK*/	TL_PEDES,
 8001380:	2200      	movs	r2, #0
 8001382:	2100      	movs	r1, #0
 8001384:	4814      	ldr	r0, [pc, #80]	; (80013d8 <ADD_TASKS_MODE_AUTO+0x150>)
 8001386:	f7ff fa4f 	bl	8000828 <SCH_Add_Task>
					/*DELAY*/	0,
					/*PERIOD*/	0
				);
	SCH_Add_Task(	/*TASK*/	BUZZ_PEDES,
 800138a:	2200      	movs	r2, #0
 800138c:	2100      	movs	r1, #0
 800138e:	4813      	ldr	r0, [pc, #76]	; (80013dc <ADD_TASKS_MODE_AUTO+0x154>)
 8001390:	f7ff fa4a 	bl	8000828 <SCH_Add_Task>
					/*DELAY*/	0,
					/*PERIOD*/	0
				);

	SCH_Add_Task(	/*TASK*/	TL1_COUNT_DOWN,
 8001394:	2264      	movs	r2, #100	; 0x64
 8001396:	2100      	movs	r1, #0
 8001398:	4811      	ldr	r0, [pc, #68]	; (80013e0 <ADD_TASKS_MODE_AUTO+0x158>)
 800139a:	f7ff fa45 	bl	8000828 <SCH_Add_Task>
					/*DELAY*/	0 ,
					/*PERIOD*/	SECOND_DURATION);
	//SCH_Add_Task(TL2_COUNT_DOWN, 0, 100);

	NEW_TIME	= 0;
 800139e:	4b11      	ldr	r3, [pc, #68]	; (80013e4 <ADD_TASKS_MODE_AUTO+0x15c>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
	MODE 		= AUTO;
 80013a4:	4b10      	ldr	r3, [pc, #64]	; (80013e8 <ADD_TASKS_MODE_AUTO+0x160>)
 80013a6:	2201      	movs	r2, #1
 80013a8:	601a      	str	r2, [r3, #0]
	NO_TASKS 	= NO_TASKS_MODE_AUTO;
 80013aa:	4b10      	ldr	r3, [pc, #64]	; (80013ec <ADD_TASKS_MODE_AUTO+0x164>)
 80013ac:	2209      	movs	r2, #9
 80013ae:	601a      	str	r2, [r3, #0]
}
 80013b0:	bf00      	nop
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	2000003c 	.word	0x2000003c
 80013b8:	20000034 	.word	0x20000034
 80013bc:	20000038 	.word	0x20000038
 80013c0:	08000db1 	.word	0x08000db1
 80013c4:	08000ee9 	.word	0x08000ee9
 80013c8:	08000e5d 	.word	0x08000e5d
 80013cc:	08000f69 	.word	0x08000f69
 80013d0:	08000e01 	.word	0x08000e01
 80013d4:	08000f25 	.word	0x08000f25
 80013d8:	08001115 	.word	0x08001115
 80013dc:	080011f5 	.word	0x080011f5
 80013e0:	08000e95 	.word	0x08000e95
 80013e4:	200004e0 	.word	0x200004e0
 80013e8:	2000002c 	.word	0x2000002c
 80013ec:	20000030 	.word	0x20000030

080013f0 <ADD_TASKS_MODE_MODIFY_GREEN>:
void ADD_TASKS_MODE_MODIFY_GREEN(void){
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
	// ADD Task OF GREEN;
	SCH_Add_Task(BLINKY_GREEN, 50, 25);
 80013f4:	2219      	movs	r2, #25
 80013f6:	2132      	movs	r1, #50	; 0x32
 80013f8:	4808      	ldr	r0, [pc, #32]	; (800141c <ADD_TASKS_MODE_MODIFY_GREEN+0x2c>)
 80013fa:	f7ff fa15 	bl	8000828 <SCH_Add_Task>
	TURN		= 1;
 80013fe:	4b08      	ldr	r3, [pc, #32]	; (8001420 <ADD_TASKS_MODE_MODIFY_GREEN+0x30>)
 8001400:	2201      	movs	r2, #1
 8001402:	601a      	str	r2, [r3, #0]
	NEW_TIME	= 0;
 8001404:	4b07      	ldr	r3, [pc, #28]	; (8001424 <ADD_TASKS_MODE_MODIFY_GREEN+0x34>)
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
	MODE		= MODI_GREEN;
 800140a:	4b07      	ldr	r3, [pc, #28]	; (8001428 <ADD_TASKS_MODE_MODIFY_GREEN+0x38>)
 800140c:	2203      	movs	r2, #3
 800140e:	601a      	str	r2, [r3, #0]
	NO_TASKS	= NO_TASKS_MODE_MODIFY;
 8001410:	4b06      	ldr	r3, [pc, #24]	; (800142c <ADD_TASKS_MODE_MODIFY_GREEN+0x3c>)
 8001412:	2201      	movs	r2, #1
 8001414:	601a      	str	r2, [r3, #0]
}
 8001416:	bf00      	nop
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	08000f89 	.word	0x08000f89
 8001420:	20000044 	.word	0x20000044
 8001424:	200004e0 	.word	0x200004e0
 8001428:	2000002c 	.word	0x2000002c
 800142c:	20000030 	.word	0x20000030

08001430 <ADD_TASKS_MODE_MODIFY_RED>:
void ADD_TASKS_MODE_MODIFY_RED(void){
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
	// ADD TASK OF RED
	SCH_Add_Task(BLINKY_RED, 50, 25);
 8001434:	2219      	movs	r2, #25
 8001436:	2132      	movs	r1, #50	; 0x32
 8001438:	4808      	ldr	r0, [pc, #32]	; (800145c <ADD_TASKS_MODE_MODIFY_RED+0x2c>)
 800143a:	f7ff f9f5 	bl	8000828 <SCH_Add_Task>
	TURN		= 1;
 800143e:	4b08      	ldr	r3, [pc, #32]	; (8001460 <ADD_TASKS_MODE_MODIFY_RED+0x30>)
 8001440:	2201      	movs	r2, #1
 8001442:	601a      	str	r2, [r3, #0]
	NEW_TIME	= 0;
 8001444:	4b07      	ldr	r3, [pc, #28]	; (8001464 <ADD_TASKS_MODE_MODIFY_RED+0x34>)
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
	MODE		= MODI_RED;
 800144a:	4b07      	ldr	r3, [pc, #28]	; (8001468 <ADD_TASKS_MODE_MODIFY_RED+0x38>)
 800144c:	2202      	movs	r2, #2
 800144e:	601a      	str	r2, [r3, #0]
	NO_TASKS	= NO_TASKS_MODE_MODIFY;
 8001450:	4b06      	ldr	r3, [pc, #24]	; (800146c <ADD_TASKS_MODE_MODIFY_RED+0x3c>)
 8001452:	2201      	movs	r2, #1
 8001454:	601a      	str	r2, [r3, #0]
}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	0800100d 	.word	0x0800100d
 8001460:	20000044 	.word	0x20000044
 8001464:	200004e0 	.word	0x200004e0
 8001468:	2000002c 	.word	0x2000002c
 800146c:	20000030 	.word	0x20000030

08001470 <ADD_TASKS_MODE_MODIFY_YELLOW>:
void ADD_TASKS_MODE_MODIFY_YELLOW(void){
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
	// ADD TASK OF YELLOW
	SCH_Add_Task(BLINKY_YELLOW,50, 25);
 8001474:	2219      	movs	r2, #25
 8001476:	2132      	movs	r1, #50	; 0x32
 8001478:	4808      	ldr	r0, [pc, #32]	; (800149c <ADD_TASKS_MODE_MODIFY_YELLOW+0x2c>)
 800147a:	f7ff f9d5 	bl	8000828 <SCH_Add_Task>
	TURN		= 1;
 800147e:	4b08      	ldr	r3, [pc, #32]	; (80014a0 <ADD_TASKS_MODE_MODIFY_YELLOW+0x30>)
 8001480:	2201      	movs	r2, #1
 8001482:	601a      	str	r2, [r3, #0]
	NEW_TIME	= 0;
 8001484:	4b07      	ldr	r3, [pc, #28]	; (80014a4 <ADD_TASKS_MODE_MODIFY_YELLOW+0x34>)
 8001486:	2200      	movs	r2, #0
 8001488:	601a      	str	r2, [r3, #0]
	MODE		= MODI_YELLOW;
 800148a:	4b07      	ldr	r3, [pc, #28]	; (80014a8 <ADD_TASKS_MODE_MODIFY_YELLOW+0x38>)
 800148c:	2204      	movs	r2, #4
 800148e:	601a      	str	r2, [r3, #0]
	NO_TASKS	= NO_TASKS_MODE_MODIFY;
 8001490:	4b06      	ldr	r3, [pc, #24]	; (80014ac <ADD_TASKS_MODE_MODIFY_YELLOW+0x3c>)
 8001492:	2201      	movs	r2, #1
 8001494:	601a      	str	r2, [r3, #0]
}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	08001091 	.word	0x08001091
 80014a0:	20000044 	.word	0x20000044
 80014a4:	200004e0 	.word	0x200004e0
 80014a8:	2000002c 	.word	0x2000002c
 80014ac:	20000030 	.word	0x20000030

080014b0 <SHOW_MODIFY_TIME>:

// MODIFY TIME FOR EACH LIGHT
void SHOW_MODIFY_TIME(void){
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b08e      	sub	sp, #56	; 0x38
 80014b4:	af00      	add	r7, sp, #0
	char str[50];
	NEW_TIME++;
 80014b6:	4b0f      	ldr	r3, [pc, #60]	; (80014f4 <SHOW_MODIFY_TIME+0x44>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	3301      	adds	r3, #1
 80014bc:	4a0d      	ldr	r2, [pc, #52]	; (80014f4 <SHOW_MODIFY_TIME+0x44>)
 80014be:	6013      	str	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, (uint8_t *)str, sprintf(str, "*7SEG:%d/\r\n", NEW_TIME), 1000);
 80014c0:	4b0c      	ldr	r3, [pc, #48]	; (80014f4 <SHOW_MODIFY_TIME+0x44>)
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	1d3b      	adds	r3, r7, #4
 80014c6:	490c      	ldr	r1, [pc, #48]	; (80014f8 <SHOW_MODIFY_TIME+0x48>)
 80014c8:	4618      	mov	r0, r3
 80014ca:	f002 fe3f 	bl	800414c <siprintf>
 80014ce:	4603      	mov	r3, r0
 80014d0:	b29a      	uxth	r2, r3
 80014d2:	1d39      	adds	r1, r7, #4
 80014d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014d8:	4808      	ldr	r0, [pc, #32]	; (80014fc <SHOW_MODIFY_TIME+0x4c>)
 80014da:	f002 f910 	bl	80036fe <HAL_UART_Transmit>
	if(NEW_TIME>99){
 80014de:	4b05      	ldr	r3, [pc, #20]	; (80014f4 <SHOW_MODIFY_TIME+0x44>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	2b63      	cmp	r3, #99	; 0x63
 80014e4:	dd02      	ble.n	80014ec <SHOW_MODIFY_TIME+0x3c>
		NEW_TIME=0;
 80014e6:	4b03      	ldr	r3, [pc, #12]	; (80014f4 <SHOW_MODIFY_TIME+0x44>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
	}
}
 80014ec:	bf00      	nop
 80014ee:	3738      	adds	r7, #56	; 0x38
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	200004e0 	.word	0x200004e0
 80014f8:	08004a58 	.word	0x08004a58
 80014fc:	20000160 	.word	0x20000160

08001500 <SET_MODIFY_TIME>:
void SET_MODIFY_TIME(void){
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
	//SET MODIFIED TIME
	TIME_GREEN	= NEW_TIME_GREEN;
 8001504:	4b0e      	ldr	r3, [pc, #56]	; (8001540 <SET_MODIFY_TIME+0x40>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a0e      	ldr	r2, [pc, #56]	; (8001544 <SET_MODIFY_TIME+0x44>)
 800150a:	6013      	str	r3, [r2, #0]
	TIME_RED	= NEW_TIME_RED;
 800150c:	4b0e      	ldr	r3, [pc, #56]	; (8001548 <SET_MODIFY_TIME+0x48>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a0e      	ldr	r2, [pc, #56]	; (800154c <SET_MODIFY_TIME+0x4c>)
 8001512:	6013      	str	r3, [r2, #0]
	TIME_YELLOW	= NEW_TIME_YELLOW;
 8001514:	4b0e      	ldr	r3, [pc, #56]	; (8001550 <SET_MODIFY_TIME+0x50>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a0e      	ldr	r2, [pc, #56]	; (8001554 <SET_MODIFY_TIME+0x54>)
 800151a:	6013      	str	r3, [r2, #0]
	//RESET VALUE
	NEW_TIME_GREEN	= 0;
 800151c:	4b08      	ldr	r3, [pc, #32]	; (8001540 <SET_MODIFY_TIME+0x40>)
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]
	NEW_TIME_YELLOW = 0;
 8001522:	4b0b      	ldr	r3, [pc, #44]	; (8001550 <SET_MODIFY_TIME+0x50>)
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
	NEW_TIME_RED 	= 0;
 8001528:	4b07      	ldr	r3, [pc, #28]	; (8001548 <SET_MODIFY_TIME+0x48>)
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]
	//RESET
	RESET_ALL();
 800152e:	f7ff fc35 	bl	8000d9c <RESET_ALL>
	DEL_TASKS_PREVIOUS_MODE();
 8001532:	f7ff fe8b 	bl	800124c <DEL_TASKS_PREVIOUS_MODE>
	ADD_TASKS_MODE_AUTO();
 8001536:	f7ff fea7 	bl	8001288 <ADD_TASKS_MODE_AUTO>
}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	200004e8 	.word	0x200004e8
 8001544:	20000038 	.word	0x20000038
 8001548:	200004e4 	.word	0x200004e4
 800154c:	20000034 	.word	0x20000034
 8001550:	200004ec 	.word	0x200004ec
 8001554:	2000003c 	.word	0x2000003c

08001558 <SET_DEFAULT_TIME>:
void SET_DEFAULT_TIME(void){
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
	//SET DEFAULT TIME
	TIME_GREEN	= DEFAULT_TIME_GREEN;
 800155c:	4b0a      	ldr	r3, [pc, #40]	; (8001588 <SET_DEFAULT_TIME+0x30>)
 800155e:	220a      	movs	r2, #10
 8001560:	601a      	str	r2, [r3, #0]
	TIME_RED	= DEFAULT_TIME_RED;
 8001562:	4b0a      	ldr	r3, [pc, #40]	; (800158c <SET_DEFAULT_TIME+0x34>)
 8001564:	220f      	movs	r2, #15
 8001566:	601a      	str	r2, [r3, #0]
	TIME_YELLOW	= DEFAULT_TIME_YELLOW;
 8001568:	4b09      	ldr	r3, [pc, #36]	; (8001590 <SET_DEFAULT_TIME+0x38>)
 800156a:	2205      	movs	r2, #5
 800156c:	601a      	str	r2, [r3, #0]
	//RESET VALUE
	NEW_TIME_GREEN	= 0;
 800156e:	4b09      	ldr	r3, [pc, #36]	; (8001594 <SET_DEFAULT_TIME+0x3c>)
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]
	NEW_TIME_YELLOW = 0;
 8001574:	4b08      	ldr	r3, [pc, #32]	; (8001598 <SET_DEFAULT_TIME+0x40>)
 8001576:	2200      	movs	r2, #0
 8001578:	601a      	str	r2, [r3, #0]
	NEW_TIME_RED 	= 0;
 800157a:	4b08      	ldr	r3, [pc, #32]	; (800159c <SET_DEFAULT_TIME+0x44>)
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
}
 8001580:	bf00      	nop
 8001582:	46bd      	mov	sp, r7
 8001584:	bc80      	pop	{r7}
 8001586:	4770      	bx	lr
 8001588:	20000038 	.word	0x20000038
 800158c:	20000034 	.word	0x20000034
 8001590:	2000003c 	.word	0x2000003c
 8001594:	200004e8 	.word	0x200004e8
 8001598:	200004ec 	.word	0x200004ec
 800159c:	200004e4 	.word	0x200004e4

080015a0 <IS_TIME_MODIFIED>:
int IS_TIME_MODIFIED(void){
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
	if (NEW_TIME_GREEN>0 && NEW_TIME_RED>0 && NEW_TIME_YELLOW>0) return 1;
 80015a4:	4b09      	ldr	r3, [pc, #36]	; (80015cc <IS_TIME_MODIFIED+0x2c>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	dd09      	ble.n	80015c0 <IS_TIME_MODIFIED+0x20>
 80015ac:	4b08      	ldr	r3, [pc, #32]	; (80015d0 <IS_TIME_MODIFIED+0x30>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	dd05      	ble.n	80015c0 <IS_TIME_MODIFIED+0x20>
 80015b4:	4b07      	ldr	r3, [pc, #28]	; (80015d4 <IS_TIME_MODIFIED+0x34>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	dd01      	ble.n	80015c0 <IS_TIME_MODIFIED+0x20>
 80015bc:	2301      	movs	r3, #1
 80015be:	e000      	b.n	80015c2 <IS_TIME_MODIFIED+0x22>
	else return 0;
 80015c0:	2300      	movs	r3, #0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bc80      	pop	{r7}
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	200004e8 	.word	0x200004e8
 80015d0:	200004e4 	.word	0x200004e4
 80015d4:	200004ec 	.word	0x200004ec

080015d8 <IS_TIME_SATISFIED>:
int IS_TIME_SATISFIED(void){
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
	if (NEW_TIME_RED==NEW_TIME_GREEN+NEW_TIME_YELLOW) return 1;
 80015dc:	4b07      	ldr	r3, [pc, #28]	; (80015fc <IS_TIME_SATISFIED+0x24>)
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	4b07      	ldr	r3, [pc, #28]	; (8001600 <IS_TIME_SATISFIED+0x28>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	441a      	add	r2, r3
 80015e6:	4b07      	ldr	r3, [pc, #28]	; (8001604 <IS_TIME_SATISFIED+0x2c>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d101      	bne.n	80015f2 <IS_TIME_SATISFIED+0x1a>
 80015ee:	2301      	movs	r3, #1
 80015f0:	e000      	b.n	80015f4 <IS_TIME_SATISFIED+0x1c>
	else return 0;
 80015f2:	2300      	movs	r3, #0
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bc80      	pop	{r7}
 80015fa:	4770      	bx	lr
 80015fc:	200004e8 	.word	0x200004e8
 8001600:	200004ec 	.word	0x200004ec
 8001604:	200004e4 	.word	0x200004e4

08001608 <button_Mode>:

//BUTTON PROCESSING
void button_Mode(void){
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
	if(is_button_pressed(CHANGE_MODE_BUTTON)){		// Check if button for change mode is pressed
 800160c:	2000      	movs	r0, #0
 800160e:	f7fe fe5f 	bl	80002d0 <is_button_pressed>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d01f      	beq.n	8001658 <button_Mode+0x50>
		RESET_ALL();								// reset system to init setup
 8001618:	f7ff fbc0 	bl	8000d9c <RESET_ALL>
		DEL_TASKS_PREVIOUS_MODE();					// delete all tasks of the previous mode
 800161c:	f7ff fe16 	bl	800124c <DEL_TASKS_PREVIOUS_MODE>
		switch(MODE){
 8001620:	4b10      	ldr	r3, [pc, #64]	; (8001664 <button_Mode+0x5c>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	3b01      	subs	r3, #1
 8001626:	2b03      	cmp	r3, #3
 8001628:	d818      	bhi.n	800165c <button_Mode+0x54>
 800162a:	a201      	add	r2, pc, #4	; (adr r2, 8001630 <button_Mode+0x28>)
 800162c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001630:	08001641 	.word	0x08001641
 8001634:	0800164d 	.word	0x0800164d
 8001638:	08001647 	.word	0x08001647
 800163c:	08001653 	.word	0x08001653
		case(AUTO):
			ADD_TASKS_MODE_MODIFY_GREEN();			// add all tasks for the current mode
 8001640:	f7ff fed6 	bl	80013f0 <ADD_TASKS_MODE_MODIFY_GREEN>
			break;
 8001644:	e00b      	b.n	800165e <button_Mode+0x56>
		case(MODI_GREEN):
			ADD_TASKS_MODE_MODIFY_RED();
 8001646:	f7ff fef3 	bl	8001430 <ADD_TASKS_MODE_MODIFY_RED>
			break;
 800164a:	e008      	b.n	800165e <button_Mode+0x56>
		case(MODI_RED):
			ADD_TASKS_MODE_MODIFY_YELLOW();
 800164c:	f7ff ff10 	bl	8001470 <ADD_TASKS_MODE_MODIFY_YELLOW>
			break;
 8001650:	e005      	b.n	800165e <button_Mode+0x56>
		case(MODI_YELLOW):
			ADD_TASKS_MODE_AUTO();
 8001652:	f7ff fe19 	bl	8001288 <ADD_TASKS_MODE_AUTO>
			break;
 8001656:	e002      	b.n	800165e <button_Mode+0x56>
		default:
			break;
		}
	}
 8001658:	bf00      	nop
 800165a:	e000      	b.n	800165e <button_Mode+0x56>
			break;
 800165c:	bf00      	nop
}
 800165e:	bf00      	nop
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	2000002c 	.word	0x2000002c

08001668 <button_Time>:
void button_Time(void){
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
	if(is_button_pressed(CHANGE_TIME_BUTTON)){		// check if button for change time is pressed
 800166c:	2001      	movs	r0, #1
 800166e:	f7fe fe2f 	bl	80002d0 <is_button_pressed>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d005      	beq.n	8001684 <button_Time+0x1c>
		if(MODE != AUTO){
 8001678:	4b03      	ldr	r3, [pc, #12]	; (8001688 <button_Time+0x20>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2b01      	cmp	r3, #1
 800167e:	d001      	beq.n	8001684 <button_Time+0x1c>
			SHOW_MODIFY_TIME();
 8001680:	f7ff ff16 	bl	80014b0 <SHOW_MODIFY_TIME>
		}
	}
}
 8001684:	bf00      	nop
 8001686:	bd80      	pop	{r7, pc}
 8001688:	2000002c 	.word	0x2000002c

0800168c <button_Update>:
void button_Update(void){
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
	if(is_button_pressed(SET_TIME_BUTTON)){
 8001690:	2002      	movs	r0, #2
 8001692:	f7fe fe1d 	bl	80002d0 <is_button_pressed>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d02e      	beq.n	80016fa <button_Update+0x6e>
		switch(MODE){
 800169c:	4b1a      	ldr	r3, [pc, #104]	; (8001708 <button_Update+0x7c>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	3b01      	subs	r3, #1
 80016a2:	2b03      	cmp	r3, #3
 80016a4:	d82b      	bhi.n	80016fe <button_Update+0x72>
 80016a6:	a201      	add	r2, pc, #4	; (adr r2, 80016ac <button_Update+0x20>)
 80016a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016ac:	080016bd 	.word	0x080016bd
 80016b0:	080016e7 	.word	0x080016e7
 80016b4:	080016dd 	.word	0x080016dd
 80016b8:	080016f1 	.word	0x080016f1
			case(AUTO):
				if(IS_TIME_MODIFIED()) { 		// Check if there is any new value to update
 80016bc:	f7ff ff70 	bl	80015a0 <IS_TIME_MODIFIED>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d01d      	beq.n	8001702 <button_Update+0x76>
					if(IS_TIME_SATISFIED()){	// Check if (time_green + time_yellow) = time_red
 80016c6:	f7ff ff87 	bl	80015d8 <IS_TIME_SATISFIED>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d002      	beq.n	80016d6 <button_Update+0x4a>
						SET_MODIFY_TIME();
 80016d0:	f7ff ff16 	bl	8001500 <SET_MODIFY_TIME>
					}else{
						SET_DEFAULT_TIME();
					}
				}
				break;
 80016d4:	e015      	b.n	8001702 <button_Update+0x76>
						SET_DEFAULT_TIME();
 80016d6:	f7ff ff3f 	bl	8001558 <SET_DEFAULT_TIME>
				break;
 80016da:	e012      	b.n	8001702 <button_Update+0x76>
			case(MODI_GREEN):
					NEW_TIME_GREEN	=	NEW_TIME;
 80016dc:	4b0b      	ldr	r3, [pc, #44]	; (800170c <button_Update+0x80>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a0b      	ldr	r2, [pc, #44]	; (8001710 <button_Update+0x84>)
 80016e2:	6013      	str	r3, [r2, #0]
					break;
 80016e4:	e00e      	b.n	8001704 <button_Update+0x78>
			case(MODI_RED):
					NEW_TIME_RED	=	NEW_TIME;
 80016e6:	4b09      	ldr	r3, [pc, #36]	; (800170c <button_Update+0x80>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a0a      	ldr	r2, [pc, #40]	; (8001714 <button_Update+0x88>)
 80016ec:	6013      	str	r3, [r2, #0]
					break;
 80016ee:	e009      	b.n	8001704 <button_Update+0x78>
			case(MODI_YELLOW):
					NEW_TIME_YELLOW	=	NEW_TIME;
 80016f0:	4b06      	ldr	r3, [pc, #24]	; (800170c <button_Update+0x80>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a08      	ldr	r2, [pc, #32]	; (8001718 <button_Update+0x8c>)
 80016f6:	6013      	str	r3, [r2, #0]
					break;
 80016f8:	e004      	b.n	8001704 <button_Update+0x78>
			default:
					break;
		}
	}
 80016fa:	bf00      	nop
 80016fc:	e002      	b.n	8001704 <button_Update+0x78>
					break;
 80016fe:	bf00      	nop
 8001700:	e000      	b.n	8001704 <button_Update+0x78>
				break;
 8001702:	bf00      	nop
}
 8001704:	bf00      	nop
 8001706:	bd80      	pop	{r7, pc}
 8001708:	2000002c 	.word	0x2000002c
 800170c:	200004e0 	.word	0x200004e0
 8001710:	200004e8 	.word	0x200004e8
 8001714:	200004e4 	.word	0x200004e4
 8001718:	200004ec 	.word	0x200004ec

0800171c <button_Pedes>:
void button_Pedes(void){
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
	if(is_button_pressed(PEDESTRIAN_BUTTON)){		// check if button for pedestrian is pressed
 8001720:	2003      	movs	r0, #3
 8001722:	f7fe fdd5 	bl	80002d0 <is_button_pressed>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d002      	beq.n	8001732 <button_Pedes+0x16>
		Pedes=2;
 800172c:	4b02      	ldr	r3, [pc, #8]	; (8001738 <button_Pedes+0x1c>)
 800172e:	2202      	movs	r2, #2
 8001730:	601a      	str	r2, [r3, #0]
	}
}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	200004f8 	.word	0x200004f8

0800173c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800173c:	480c      	ldr	r0, [pc, #48]	; (8001770 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800173e:	490d      	ldr	r1, [pc, #52]	; (8001774 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001740:	4a0d      	ldr	r2, [pc, #52]	; (8001778 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001742:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001744:	e002      	b.n	800174c <LoopCopyDataInit>

08001746 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001746:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001748:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800174a:	3304      	adds	r3, #4

0800174c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800174c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800174e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001750:	d3f9      	bcc.n	8001746 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001752:	4a0a      	ldr	r2, [pc, #40]	; (800177c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001754:	4c0a      	ldr	r4, [pc, #40]	; (8001780 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001756:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001758:	e001      	b.n	800175e <LoopFillZerobss>

0800175a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800175a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800175c:	3204      	adds	r2, #4

0800175e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800175e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001760:	d3fb      	bcc.n	800175a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001762:	f7ff faa9 	bl	8000cb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001766:	f002 fcc5 	bl	80040f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800176a:	f7fe fdd7 	bl	800031c <main>
  bx lr
 800176e:	4770      	bx	lr
  ldr r0, =_sdata
 8001770:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001774:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 8001778:	08004ac8 	.word	0x08004ac8
  ldr r2, =_sbss
 800177c:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 8001780:	20000520 	.word	0x20000520

08001784 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001784:	e7fe      	b.n	8001784 <ADC1_2_IRQHandler>
	...

08001788 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800178c:	4b08      	ldr	r3, [pc, #32]	; (80017b0 <HAL_Init+0x28>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a07      	ldr	r2, [pc, #28]	; (80017b0 <HAL_Init+0x28>)
 8001792:	f043 0310 	orr.w	r3, r3, #16
 8001796:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001798:	2003      	movs	r0, #3
 800179a:	f000 f923 	bl	80019e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800179e:	2000      	movs	r0, #0
 80017a0:	f000 f808 	bl	80017b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017a4:	f7ff f91a 	bl	80009dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017a8:	2300      	movs	r3, #0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	40022000 	.word	0x40022000

080017b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017bc:	4b12      	ldr	r3, [pc, #72]	; (8001808 <HAL_InitTick+0x54>)
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	4b12      	ldr	r3, [pc, #72]	; (800180c <HAL_InitTick+0x58>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	4619      	mov	r1, r3
 80017c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80017ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80017d2:	4618      	mov	r0, r3
 80017d4:	f000 f93b 	bl	8001a4e <HAL_SYSTICK_Config>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e00e      	b.n	8001800 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2b0f      	cmp	r3, #15
 80017e6:	d80a      	bhi.n	80017fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017e8:	2200      	movs	r2, #0
 80017ea:	6879      	ldr	r1, [r7, #4]
 80017ec:	f04f 30ff 	mov.w	r0, #4294967295
 80017f0:	f000 f903 	bl	80019fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017f4:	4a06      	ldr	r2, [pc, #24]	; (8001810 <HAL_InitTick+0x5c>)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017fa:	2300      	movs	r3, #0
 80017fc:	e000      	b.n	8001800 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
}
 8001800:	4618      	mov	r0, r3
 8001802:	3708      	adds	r7, #8
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	20000024 	.word	0x20000024
 800180c:	2000004c 	.word	0x2000004c
 8001810:	20000048 	.word	0x20000048

08001814 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001818:	4b05      	ldr	r3, [pc, #20]	; (8001830 <HAL_IncTick+0x1c>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	461a      	mov	r2, r3
 800181e:	4b05      	ldr	r3, [pc, #20]	; (8001834 <HAL_IncTick+0x20>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4413      	add	r3, r2
 8001824:	4a03      	ldr	r2, [pc, #12]	; (8001834 <HAL_IncTick+0x20>)
 8001826:	6013      	str	r3, [r2, #0]
}
 8001828:	bf00      	nop
 800182a:	46bd      	mov	sp, r7
 800182c:	bc80      	pop	{r7}
 800182e:	4770      	bx	lr
 8001830:	2000004c 	.word	0x2000004c
 8001834:	2000050c 	.word	0x2000050c

08001838 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  return uwTick;
 800183c:	4b02      	ldr	r3, [pc, #8]	; (8001848 <HAL_GetTick+0x10>)
 800183e:	681b      	ldr	r3, [r3, #0]
}
 8001840:	4618      	mov	r0, r3
 8001842:	46bd      	mov	sp, r7
 8001844:	bc80      	pop	{r7}
 8001846:	4770      	bx	lr
 8001848:	2000050c 	.word	0x2000050c

0800184c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800184c:	b480      	push	{r7}
 800184e:	b085      	sub	sp, #20
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f003 0307 	and.w	r3, r3, #7
 800185a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800185c:	4b0c      	ldr	r3, [pc, #48]	; (8001890 <__NVIC_SetPriorityGrouping+0x44>)
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001862:	68ba      	ldr	r2, [r7, #8]
 8001864:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001868:	4013      	ands	r3, r2
 800186a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001874:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001878:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800187c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800187e:	4a04      	ldr	r2, [pc, #16]	; (8001890 <__NVIC_SetPriorityGrouping+0x44>)
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	60d3      	str	r3, [r2, #12]
}
 8001884:	bf00      	nop
 8001886:	3714      	adds	r7, #20
 8001888:	46bd      	mov	sp, r7
 800188a:	bc80      	pop	{r7}
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	e000ed00 	.word	0xe000ed00

08001894 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001898:	4b04      	ldr	r3, [pc, #16]	; (80018ac <__NVIC_GetPriorityGrouping+0x18>)
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	0a1b      	lsrs	r3, r3, #8
 800189e:	f003 0307 	and.w	r3, r3, #7
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bc80      	pop	{r7}
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	e000ed00 	.word	0xe000ed00

080018b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	4603      	mov	r3, r0
 80018b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	db0b      	blt.n	80018da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018c2:	79fb      	ldrb	r3, [r7, #7]
 80018c4:	f003 021f 	and.w	r2, r3, #31
 80018c8:	4906      	ldr	r1, [pc, #24]	; (80018e4 <__NVIC_EnableIRQ+0x34>)
 80018ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ce:	095b      	lsrs	r3, r3, #5
 80018d0:	2001      	movs	r0, #1
 80018d2:	fa00 f202 	lsl.w	r2, r0, r2
 80018d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018da:	bf00      	nop
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	bc80      	pop	{r7}
 80018e2:	4770      	bx	lr
 80018e4:	e000e100 	.word	0xe000e100

080018e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	4603      	mov	r3, r0
 80018f0:	6039      	str	r1, [r7, #0]
 80018f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	db0a      	blt.n	8001912 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	b2da      	uxtb	r2, r3
 8001900:	490c      	ldr	r1, [pc, #48]	; (8001934 <__NVIC_SetPriority+0x4c>)
 8001902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001906:	0112      	lsls	r2, r2, #4
 8001908:	b2d2      	uxtb	r2, r2
 800190a:	440b      	add	r3, r1
 800190c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001910:	e00a      	b.n	8001928 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	b2da      	uxtb	r2, r3
 8001916:	4908      	ldr	r1, [pc, #32]	; (8001938 <__NVIC_SetPriority+0x50>)
 8001918:	79fb      	ldrb	r3, [r7, #7]
 800191a:	f003 030f 	and.w	r3, r3, #15
 800191e:	3b04      	subs	r3, #4
 8001920:	0112      	lsls	r2, r2, #4
 8001922:	b2d2      	uxtb	r2, r2
 8001924:	440b      	add	r3, r1
 8001926:	761a      	strb	r2, [r3, #24]
}
 8001928:	bf00      	nop
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	bc80      	pop	{r7}
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	e000e100 	.word	0xe000e100
 8001938:	e000ed00 	.word	0xe000ed00

0800193c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800193c:	b480      	push	{r7}
 800193e:	b089      	sub	sp, #36	; 0x24
 8001940:	af00      	add	r7, sp, #0
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	60b9      	str	r1, [r7, #8]
 8001946:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	f003 0307 	and.w	r3, r3, #7
 800194e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	f1c3 0307 	rsb	r3, r3, #7
 8001956:	2b04      	cmp	r3, #4
 8001958:	bf28      	it	cs
 800195a:	2304      	movcs	r3, #4
 800195c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	3304      	adds	r3, #4
 8001962:	2b06      	cmp	r3, #6
 8001964:	d902      	bls.n	800196c <NVIC_EncodePriority+0x30>
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	3b03      	subs	r3, #3
 800196a:	e000      	b.n	800196e <NVIC_EncodePriority+0x32>
 800196c:	2300      	movs	r3, #0
 800196e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001970:	f04f 32ff 	mov.w	r2, #4294967295
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	fa02 f303 	lsl.w	r3, r2, r3
 800197a:	43da      	mvns	r2, r3
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	401a      	ands	r2, r3
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001984:	f04f 31ff 	mov.w	r1, #4294967295
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	fa01 f303 	lsl.w	r3, r1, r3
 800198e:	43d9      	mvns	r1, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001994:	4313      	orrs	r3, r2
         );
}
 8001996:	4618      	mov	r0, r3
 8001998:	3724      	adds	r7, #36	; 0x24
 800199a:	46bd      	mov	sp, r7
 800199c:	bc80      	pop	{r7}
 800199e:	4770      	bx	lr

080019a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	3b01      	subs	r3, #1
 80019ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019b0:	d301      	bcc.n	80019b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019b2:	2301      	movs	r3, #1
 80019b4:	e00f      	b.n	80019d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019b6:	4a0a      	ldr	r2, [pc, #40]	; (80019e0 <SysTick_Config+0x40>)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	3b01      	subs	r3, #1
 80019bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019be:	210f      	movs	r1, #15
 80019c0:	f04f 30ff 	mov.w	r0, #4294967295
 80019c4:	f7ff ff90 	bl	80018e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019c8:	4b05      	ldr	r3, [pc, #20]	; (80019e0 <SysTick_Config+0x40>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019ce:	4b04      	ldr	r3, [pc, #16]	; (80019e0 <SysTick_Config+0x40>)
 80019d0:	2207      	movs	r2, #7
 80019d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	e000e010 	.word	0xe000e010

080019e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f7ff ff2d 	bl	800184c <__NVIC_SetPriorityGrouping>
}
 80019f2:	bf00      	nop
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b086      	sub	sp, #24
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	4603      	mov	r3, r0
 8001a02:	60b9      	str	r1, [r7, #8]
 8001a04:	607a      	str	r2, [r7, #4]
 8001a06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a0c:	f7ff ff42 	bl	8001894 <__NVIC_GetPriorityGrouping>
 8001a10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	68b9      	ldr	r1, [r7, #8]
 8001a16:	6978      	ldr	r0, [r7, #20]
 8001a18:	f7ff ff90 	bl	800193c <NVIC_EncodePriority>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a22:	4611      	mov	r1, r2
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff ff5f 	bl	80018e8 <__NVIC_SetPriority>
}
 8001a2a:	bf00      	nop
 8001a2c:	3718      	adds	r7, #24
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b082      	sub	sp, #8
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	4603      	mov	r3, r0
 8001a3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7ff ff35 	bl	80018b0 <__NVIC_EnableIRQ>
}
 8001a46:	bf00      	nop
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}

08001a4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	b082      	sub	sp, #8
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f7ff ffa2 	bl	80019a0 <SysTick_Config>
 8001a5c:	4603      	mov	r3, r0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a66:	b480      	push	{r7}
 8001a68:	b085      	sub	sp, #20
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d008      	beq.n	8001a8e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2204      	movs	r2, #4
 8001a80:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2200      	movs	r2, #0
 8001a86:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e020      	b.n	8001ad0 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f022 020e 	bic.w	r2, r2, #14
 8001a9c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f022 0201 	bic.w	r2, r2, #1
 8001aac:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ab6:	2101      	movs	r1, #1
 8001ab8:	fa01 f202 	lsl.w	r2, r1, r2
 8001abc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001ace:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3714      	adds	r7, #20
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bc80      	pop	{r7}
 8001ad8:	4770      	bx	lr
	...

08001adc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d005      	beq.n	8001afe <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2204      	movs	r2, #4
 8001af6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	73fb      	strb	r3, [r7, #15]
 8001afc:	e051      	b.n	8001ba2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f022 020e 	bic.w	r2, r2, #14
 8001b0c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f022 0201 	bic.w	r2, r2, #1
 8001b1c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a22      	ldr	r2, [pc, #136]	; (8001bac <HAL_DMA_Abort_IT+0xd0>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d029      	beq.n	8001b7c <HAL_DMA_Abort_IT+0xa0>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a20      	ldr	r2, [pc, #128]	; (8001bb0 <HAL_DMA_Abort_IT+0xd4>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d022      	beq.n	8001b78 <HAL_DMA_Abort_IT+0x9c>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a1f      	ldr	r2, [pc, #124]	; (8001bb4 <HAL_DMA_Abort_IT+0xd8>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d01a      	beq.n	8001b72 <HAL_DMA_Abort_IT+0x96>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a1d      	ldr	r2, [pc, #116]	; (8001bb8 <HAL_DMA_Abort_IT+0xdc>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d012      	beq.n	8001b6c <HAL_DMA_Abort_IT+0x90>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a1c      	ldr	r2, [pc, #112]	; (8001bbc <HAL_DMA_Abort_IT+0xe0>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d00a      	beq.n	8001b66 <HAL_DMA_Abort_IT+0x8a>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a1a      	ldr	r2, [pc, #104]	; (8001bc0 <HAL_DMA_Abort_IT+0xe4>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d102      	bne.n	8001b60 <HAL_DMA_Abort_IT+0x84>
 8001b5a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001b5e:	e00e      	b.n	8001b7e <HAL_DMA_Abort_IT+0xa2>
 8001b60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b64:	e00b      	b.n	8001b7e <HAL_DMA_Abort_IT+0xa2>
 8001b66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b6a:	e008      	b.n	8001b7e <HAL_DMA_Abort_IT+0xa2>
 8001b6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b70:	e005      	b.n	8001b7e <HAL_DMA_Abort_IT+0xa2>
 8001b72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b76:	e002      	b.n	8001b7e <HAL_DMA_Abort_IT+0xa2>
 8001b78:	2310      	movs	r3, #16
 8001b7a:	e000      	b.n	8001b7e <HAL_DMA_Abort_IT+0xa2>
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	4a11      	ldr	r2, [pc, #68]	; (8001bc4 <HAL_DMA_Abort_IT+0xe8>)
 8001b80:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2201      	movs	r2, #1
 8001b86:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d003      	beq.n	8001ba2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	4798      	blx	r3
    } 
  }
  return status;
 8001ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3710      	adds	r7, #16
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	40020008 	.word	0x40020008
 8001bb0:	4002001c 	.word	0x4002001c
 8001bb4:	40020030 	.word	0x40020030
 8001bb8:	40020044 	.word	0x40020044
 8001bbc:	40020058 	.word	0x40020058
 8001bc0:	4002006c 	.word	0x4002006c
 8001bc4:	40020000 	.word	0x40020000

08001bc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b08b      	sub	sp, #44	; 0x2c
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bda:	e169      	b.n	8001eb0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001bdc:	2201      	movs	r2, #1
 8001bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	69fa      	ldr	r2, [r7, #28]
 8001bec:	4013      	ands	r3, r2
 8001bee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	f040 8158 	bne.w	8001eaa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	4a9a      	ldr	r2, [pc, #616]	; (8001e68 <HAL_GPIO_Init+0x2a0>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d05e      	beq.n	8001cc2 <HAL_GPIO_Init+0xfa>
 8001c04:	4a98      	ldr	r2, [pc, #608]	; (8001e68 <HAL_GPIO_Init+0x2a0>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d875      	bhi.n	8001cf6 <HAL_GPIO_Init+0x12e>
 8001c0a:	4a98      	ldr	r2, [pc, #608]	; (8001e6c <HAL_GPIO_Init+0x2a4>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d058      	beq.n	8001cc2 <HAL_GPIO_Init+0xfa>
 8001c10:	4a96      	ldr	r2, [pc, #600]	; (8001e6c <HAL_GPIO_Init+0x2a4>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d86f      	bhi.n	8001cf6 <HAL_GPIO_Init+0x12e>
 8001c16:	4a96      	ldr	r2, [pc, #600]	; (8001e70 <HAL_GPIO_Init+0x2a8>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d052      	beq.n	8001cc2 <HAL_GPIO_Init+0xfa>
 8001c1c:	4a94      	ldr	r2, [pc, #592]	; (8001e70 <HAL_GPIO_Init+0x2a8>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d869      	bhi.n	8001cf6 <HAL_GPIO_Init+0x12e>
 8001c22:	4a94      	ldr	r2, [pc, #592]	; (8001e74 <HAL_GPIO_Init+0x2ac>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d04c      	beq.n	8001cc2 <HAL_GPIO_Init+0xfa>
 8001c28:	4a92      	ldr	r2, [pc, #584]	; (8001e74 <HAL_GPIO_Init+0x2ac>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d863      	bhi.n	8001cf6 <HAL_GPIO_Init+0x12e>
 8001c2e:	4a92      	ldr	r2, [pc, #584]	; (8001e78 <HAL_GPIO_Init+0x2b0>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d046      	beq.n	8001cc2 <HAL_GPIO_Init+0xfa>
 8001c34:	4a90      	ldr	r2, [pc, #576]	; (8001e78 <HAL_GPIO_Init+0x2b0>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d85d      	bhi.n	8001cf6 <HAL_GPIO_Init+0x12e>
 8001c3a:	2b12      	cmp	r3, #18
 8001c3c:	d82a      	bhi.n	8001c94 <HAL_GPIO_Init+0xcc>
 8001c3e:	2b12      	cmp	r3, #18
 8001c40:	d859      	bhi.n	8001cf6 <HAL_GPIO_Init+0x12e>
 8001c42:	a201      	add	r2, pc, #4	; (adr r2, 8001c48 <HAL_GPIO_Init+0x80>)
 8001c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c48:	08001cc3 	.word	0x08001cc3
 8001c4c:	08001c9d 	.word	0x08001c9d
 8001c50:	08001caf 	.word	0x08001caf
 8001c54:	08001cf1 	.word	0x08001cf1
 8001c58:	08001cf7 	.word	0x08001cf7
 8001c5c:	08001cf7 	.word	0x08001cf7
 8001c60:	08001cf7 	.word	0x08001cf7
 8001c64:	08001cf7 	.word	0x08001cf7
 8001c68:	08001cf7 	.word	0x08001cf7
 8001c6c:	08001cf7 	.word	0x08001cf7
 8001c70:	08001cf7 	.word	0x08001cf7
 8001c74:	08001cf7 	.word	0x08001cf7
 8001c78:	08001cf7 	.word	0x08001cf7
 8001c7c:	08001cf7 	.word	0x08001cf7
 8001c80:	08001cf7 	.word	0x08001cf7
 8001c84:	08001cf7 	.word	0x08001cf7
 8001c88:	08001cf7 	.word	0x08001cf7
 8001c8c:	08001ca5 	.word	0x08001ca5
 8001c90:	08001cb9 	.word	0x08001cb9
 8001c94:	4a79      	ldr	r2, [pc, #484]	; (8001e7c <HAL_GPIO_Init+0x2b4>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d013      	beq.n	8001cc2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c9a:	e02c      	b.n	8001cf6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	623b      	str	r3, [r7, #32]
          break;
 8001ca2:	e029      	b.n	8001cf8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	3304      	adds	r3, #4
 8001caa:	623b      	str	r3, [r7, #32]
          break;
 8001cac:	e024      	b.n	8001cf8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	3308      	adds	r3, #8
 8001cb4:	623b      	str	r3, [r7, #32]
          break;
 8001cb6:	e01f      	b.n	8001cf8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	330c      	adds	r3, #12
 8001cbe:	623b      	str	r3, [r7, #32]
          break;
 8001cc0:	e01a      	b.n	8001cf8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d102      	bne.n	8001cd0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001cca:	2304      	movs	r3, #4
 8001ccc:	623b      	str	r3, [r7, #32]
          break;
 8001cce:	e013      	b.n	8001cf8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d105      	bne.n	8001ce4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cd8:	2308      	movs	r3, #8
 8001cda:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	69fa      	ldr	r2, [r7, #28]
 8001ce0:	611a      	str	r2, [r3, #16]
          break;
 8001ce2:	e009      	b.n	8001cf8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ce4:	2308      	movs	r3, #8
 8001ce6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	69fa      	ldr	r2, [r7, #28]
 8001cec:	615a      	str	r2, [r3, #20]
          break;
 8001cee:	e003      	b.n	8001cf8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	623b      	str	r3, [r7, #32]
          break;
 8001cf4:	e000      	b.n	8001cf8 <HAL_GPIO_Init+0x130>
          break;
 8001cf6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	2bff      	cmp	r3, #255	; 0xff
 8001cfc:	d801      	bhi.n	8001d02 <HAL_GPIO_Init+0x13a>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	e001      	b.n	8001d06 <HAL_GPIO_Init+0x13e>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	3304      	adds	r3, #4
 8001d06:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	2bff      	cmp	r3, #255	; 0xff
 8001d0c:	d802      	bhi.n	8001d14 <HAL_GPIO_Init+0x14c>
 8001d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	e002      	b.n	8001d1a <HAL_GPIO_Init+0x152>
 8001d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d16:	3b08      	subs	r3, #8
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	210f      	movs	r1, #15
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	fa01 f303 	lsl.w	r3, r1, r3
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	401a      	ands	r2, r3
 8001d2c:	6a39      	ldr	r1, [r7, #32]
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	fa01 f303 	lsl.w	r3, r1, r3
 8001d34:	431a      	orrs	r2, r3
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	f000 80b1 	beq.w	8001eaa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d48:	4b4d      	ldr	r3, [pc, #308]	; (8001e80 <HAL_GPIO_Init+0x2b8>)
 8001d4a:	699b      	ldr	r3, [r3, #24]
 8001d4c:	4a4c      	ldr	r2, [pc, #304]	; (8001e80 <HAL_GPIO_Init+0x2b8>)
 8001d4e:	f043 0301 	orr.w	r3, r3, #1
 8001d52:	6193      	str	r3, [r2, #24]
 8001d54:	4b4a      	ldr	r3, [pc, #296]	; (8001e80 <HAL_GPIO_Init+0x2b8>)
 8001d56:	699b      	ldr	r3, [r3, #24]
 8001d58:	f003 0301 	and.w	r3, r3, #1
 8001d5c:	60bb      	str	r3, [r7, #8]
 8001d5e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d60:	4a48      	ldr	r2, [pc, #288]	; (8001e84 <HAL_GPIO_Init+0x2bc>)
 8001d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d64:	089b      	lsrs	r3, r3, #2
 8001d66:	3302      	adds	r3, #2
 8001d68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d6c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d70:	f003 0303 	and.w	r3, r3, #3
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	220f      	movs	r2, #15
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	68fa      	ldr	r2, [r7, #12]
 8001d80:	4013      	ands	r3, r2
 8001d82:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	4a40      	ldr	r2, [pc, #256]	; (8001e88 <HAL_GPIO_Init+0x2c0>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d013      	beq.n	8001db4 <HAL_GPIO_Init+0x1ec>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	4a3f      	ldr	r2, [pc, #252]	; (8001e8c <HAL_GPIO_Init+0x2c4>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d00d      	beq.n	8001db0 <HAL_GPIO_Init+0x1e8>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	4a3e      	ldr	r2, [pc, #248]	; (8001e90 <HAL_GPIO_Init+0x2c8>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d007      	beq.n	8001dac <HAL_GPIO_Init+0x1e4>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	4a3d      	ldr	r2, [pc, #244]	; (8001e94 <HAL_GPIO_Init+0x2cc>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d101      	bne.n	8001da8 <HAL_GPIO_Init+0x1e0>
 8001da4:	2303      	movs	r3, #3
 8001da6:	e006      	b.n	8001db6 <HAL_GPIO_Init+0x1ee>
 8001da8:	2304      	movs	r3, #4
 8001daa:	e004      	b.n	8001db6 <HAL_GPIO_Init+0x1ee>
 8001dac:	2302      	movs	r3, #2
 8001dae:	e002      	b.n	8001db6 <HAL_GPIO_Init+0x1ee>
 8001db0:	2301      	movs	r3, #1
 8001db2:	e000      	b.n	8001db6 <HAL_GPIO_Init+0x1ee>
 8001db4:	2300      	movs	r3, #0
 8001db6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001db8:	f002 0203 	and.w	r2, r2, #3
 8001dbc:	0092      	lsls	r2, r2, #2
 8001dbe:	4093      	lsls	r3, r2
 8001dc0:	68fa      	ldr	r2, [r7, #12]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001dc6:	492f      	ldr	r1, [pc, #188]	; (8001e84 <HAL_GPIO_Init+0x2bc>)
 8001dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dca:	089b      	lsrs	r3, r3, #2
 8001dcc:	3302      	adds	r3, #2
 8001dce:	68fa      	ldr	r2, [r7, #12]
 8001dd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d006      	beq.n	8001dee <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001de0:	4b2d      	ldr	r3, [pc, #180]	; (8001e98 <HAL_GPIO_Init+0x2d0>)
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	492c      	ldr	r1, [pc, #176]	; (8001e98 <HAL_GPIO_Init+0x2d0>)
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	600b      	str	r3, [r1, #0]
 8001dec:	e006      	b.n	8001dfc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001dee:	4b2a      	ldr	r3, [pc, #168]	; (8001e98 <HAL_GPIO_Init+0x2d0>)
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	43db      	mvns	r3, r3
 8001df6:	4928      	ldr	r1, [pc, #160]	; (8001e98 <HAL_GPIO_Init+0x2d0>)
 8001df8:	4013      	ands	r3, r2
 8001dfa:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d006      	beq.n	8001e16 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e08:	4b23      	ldr	r3, [pc, #140]	; (8001e98 <HAL_GPIO_Init+0x2d0>)
 8001e0a:	685a      	ldr	r2, [r3, #4]
 8001e0c:	4922      	ldr	r1, [pc, #136]	; (8001e98 <HAL_GPIO_Init+0x2d0>)
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	604b      	str	r3, [r1, #4]
 8001e14:	e006      	b.n	8001e24 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e16:	4b20      	ldr	r3, [pc, #128]	; (8001e98 <HAL_GPIO_Init+0x2d0>)
 8001e18:	685a      	ldr	r2, [r3, #4]
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	43db      	mvns	r3, r3
 8001e1e:	491e      	ldr	r1, [pc, #120]	; (8001e98 <HAL_GPIO_Init+0x2d0>)
 8001e20:	4013      	ands	r3, r2
 8001e22:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d006      	beq.n	8001e3e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e30:	4b19      	ldr	r3, [pc, #100]	; (8001e98 <HAL_GPIO_Init+0x2d0>)
 8001e32:	689a      	ldr	r2, [r3, #8]
 8001e34:	4918      	ldr	r1, [pc, #96]	; (8001e98 <HAL_GPIO_Init+0x2d0>)
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	608b      	str	r3, [r1, #8]
 8001e3c:	e006      	b.n	8001e4c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e3e:	4b16      	ldr	r3, [pc, #88]	; (8001e98 <HAL_GPIO_Init+0x2d0>)
 8001e40:	689a      	ldr	r2, [r3, #8]
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	43db      	mvns	r3, r3
 8001e46:	4914      	ldr	r1, [pc, #80]	; (8001e98 <HAL_GPIO_Init+0x2d0>)
 8001e48:	4013      	ands	r3, r2
 8001e4a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d021      	beq.n	8001e9c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e58:	4b0f      	ldr	r3, [pc, #60]	; (8001e98 <HAL_GPIO_Init+0x2d0>)
 8001e5a:	68da      	ldr	r2, [r3, #12]
 8001e5c:	490e      	ldr	r1, [pc, #56]	; (8001e98 <HAL_GPIO_Init+0x2d0>)
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	60cb      	str	r3, [r1, #12]
 8001e64:	e021      	b.n	8001eaa <HAL_GPIO_Init+0x2e2>
 8001e66:	bf00      	nop
 8001e68:	10320000 	.word	0x10320000
 8001e6c:	10310000 	.word	0x10310000
 8001e70:	10220000 	.word	0x10220000
 8001e74:	10210000 	.word	0x10210000
 8001e78:	10120000 	.word	0x10120000
 8001e7c:	10110000 	.word	0x10110000
 8001e80:	40021000 	.word	0x40021000
 8001e84:	40010000 	.word	0x40010000
 8001e88:	40010800 	.word	0x40010800
 8001e8c:	40010c00 	.word	0x40010c00
 8001e90:	40011000 	.word	0x40011000
 8001e94:	40011400 	.word	0x40011400
 8001e98:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e9c:	4b0b      	ldr	r3, [pc, #44]	; (8001ecc <HAL_GPIO_Init+0x304>)
 8001e9e:	68da      	ldr	r2, [r3, #12]
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	43db      	mvns	r3, r3
 8001ea4:	4909      	ldr	r1, [pc, #36]	; (8001ecc <HAL_GPIO_Init+0x304>)
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eac:	3301      	adds	r3, #1
 8001eae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb6:	fa22 f303 	lsr.w	r3, r2, r3
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	f47f ae8e 	bne.w	8001bdc <HAL_GPIO_Init+0x14>
  }
}
 8001ec0:	bf00      	nop
 8001ec2:	bf00      	nop
 8001ec4:	372c      	adds	r7, #44	; 0x2c
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bc80      	pop	{r7}
 8001eca:	4770      	bx	lr
 8001ecc:	40010400 	.word	0x40010400

08001ed0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	460b      	mov	r3, r1
 8001eda:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	689a      	ldr	r2, [r3, #8]
 8001ee0:	887b      	ldrh	r3, [r7, #2]
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d002      	beq.n	8001eee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	73fb      	strb	r3, [r7, #15]
 8001eec:	e001      	b.n	8001ef2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ef2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3714      	adds	r7, #20
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bc80      	pop	{r7}
 8001efc:	4770      	bx	lr

08001efe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001efe:	b480      	push	{r7}
 8001f00:	b083      	sub	sp, #12
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
 8001f06:	460b      	mov	r3, r1
 8001f08:	807b      	strh	r3, [r7, #2]
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f0e:	787b      	ldrb	r3, [r7, #1]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d003      	beq.n	8001f1c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f14:	887a      	ldrh	r2, [r7, #2]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f1a:	e003      	b.n	8001f24 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f1c:	887b      	ldrh	r3, [r7, #2]
 8001f1e:	041a      	lsls	r2, r3, #16
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	611a      	str	r2, [r3, #16]
}
 8001f24:	bf00      	nop
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bc80      	pop	{r7}
 8001f2c:	4770      	bx	lr
	...

08001f30 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	4603      	mov	r3, r0
 8001f38:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001f3a:	4b08      	ldr	r3, [pc, #32]	; (8001f5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f3c:	695a      	ldr	r2, [r3, #20]
 8001f3e:	88fb      	ldrh	r3, [r7, #6]
 8001f40:	4013      	ands	r3, r2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d006      	beq.n	8001f54 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f46:	4a05      	ldr	r2, [pc, #20]	; (8001f5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f48:	88fb      	ldrh	r3, [r7, #6]
 8001f4a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f4c:	88fb      	ldrh	r3, [r7, #6]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f000 f806 	bl	8001f60 <HAL_GPIO_EXTI_Callback>
  }
}
 8001f54:	bf00      	nop
 8001f56:	3708      	adds	r7, #8
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	40010400 	.word	0x40010400

08001f60 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	4603      	mov	r3, r0
 8001f68:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001f6a:	bf00      	nop
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bc80      	pop	{r7}
 8001f72:	4770      	bx	lr

08001f74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b086      	sub	sp, #24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d101      	bne.n	8001f86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e272      	b.n	800246c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	f000 8087 	beq.w	80020a2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f94:	4b92      	ldr	r3, [pc, #584]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f003 030c 	and.w	r3, r3, #12
 8001f9c:	2b04      	cmp	r3, #4
 8001f9e:	d00c      	beq.n	8001fba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001fa0:	4b8f      	ldr	r3, [pc, #572]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f003 030c 	and.w	r3, r3, #12
 8001fa8:	2b08      	cmp	r3, #8
 8001faa:	d112      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x5e>
 8001fac:	4b8c      	ldr	r3, [pc, #560]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fb8:	d10b      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fba:	4b89      	ldr	r3, [pc, #548]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d06c      	beq.n	80020a0 <HAL_RCC_OscConfig+0x12c>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d168      	bne.n	80020a0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e24c      	b.n	800246c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fda:	d106      	bne.n	8001fea <HAL_RCC_OscConfig+0x76>
 8001fdc:	4b80      	ldr	r3, [pc, #512]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a7f      	ldr	r2, [pc, #508]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 8001fe2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fe6:	6013      	str	r3, [r2, #0]
 8001fe8:	e02e      	b.n	8002048 <HAL_RCC_OscConfig+0xd4>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d10c      	bne.n	800200c <HAL_RCC_OscConfig+0x98>
 8001ff2:	4b7b      	ldr	r3, [pc, #492]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a7a      	ldr	r2, [pc, #488]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 8001ff8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ffc:	6013      	str	r3, [r2, #0]
 8001ffe:	4b78      	ldr	r3, [pc, #480]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a77      	ldr	r2, [pc, #476]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 8002004:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002008:	6013      	str	r3, [r2, #0]
 800200a:	e01d      	b.n	8002048 <HAL_RCC_OscConfig+0xd4>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002014:	d10c      	bne.n	8002030 <HAL_RCC_OscConfig+0xbc>
 8002016:	4b72      	ldr	r3, [pc, #456]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a71      	ldr	r2, [pc, #452]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 800201c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002020:	6013      	str	r3, [r2, #0]
 8002022:	4b6f      	ldr	r3, [pc, #444]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a6e      	ldr	r2, [pc, #440]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 8002028:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800202c:	6013      	str	r3, [r2, #0]
 800202e:	e00b      	b.n	8002048 <HAL_RCC_OscConfig+0xd4>
 8002030:	4b6b      	ldr	r3, [pc, #428]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a6a      	ldr	r2, [pc, #424]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 8002036:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800203a:	6013      	str	r3, [r2, #0]
 800203c:	4b68      	ldr	r3, [pc, #416]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a67      	ldr	r2, [pc, #412]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 8002042:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002046:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d013      	beq.n	8002078 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002050:	f7ff fbf2 	bl	8001838 <HAL_GetTick>
 8002054:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002056:	e008      	b.n	800206a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002058:	f7ff fbee 	bl	8001838 <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	2b64      	cmp	r3, #100	; 0x64
 8002064:	d901      	bls.n	800206a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e200      	b.n	800246c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800206a:	4b5d      	ldr	r3, [pc, #372]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d0f0      	beq.n	8002058 <HAL_RCC_OscConfig+0xe4>
 8002076:	e014      	b.n	80020a2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002078:	f7ff fbde 	bl	8001838 <HAL_GetTick>
 800207c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800207e:	e008      	b.n	8002092 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002080:	f7ff fbda 	bl	8001838 <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b64      	cmp	r3, #100	; 0x64
 800208c:	d901      	bls.n	8002092 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e1ec      	b.n	800246c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002092:	4b53      	ldr	r3, [pc, #332]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d1f0      	bne.n	8002080 <HAL_RCC_OscConfig+0x10c>
 800209e:	e000      	b.n	80020a2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0302 	and.w	r3, r3, #2
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d063      	beq.n	8002176 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020ae:	4b4c      	ldr	r3, [pc, #304]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f003 030c 	and.w	r3, r3, #12
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d00b      	beq.n	80020d2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80020ba:	4b49      	ldr	r3, [pc, #292]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f003 030c 	and.w	r3, r3, #12
 80020c2:	2b08      	cmp	r3, #8
 80020c4:	d11c      	bne.n	8002100 <HAL_RCC_OscConfig+0x18c>
 80020c6:	4b46      	ldr	r3, [pc, #280]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d116      	bne.n	8002100 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020d2:	4b43      	ldr	r3, [pc, #268]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d005      	beq.n	80020ea <HAL_RCC_OscConfig+0x176>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d001      	beq.n	80020ea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e1c0      	b.n	800246c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020ea:	4b3d      	ldr	r3, [pc, #244]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	695b      	ldr	r3, [r3, #20]
 80020f6:	00db      	lsls	r3, r3, #3
 80020f8:	4939      	ldr	r1, [pc, #228]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 80020fa:	4313      	orrs	r3, r2
 80020fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020fe:	e03a      	b.n	8002176 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	691b      	ldr	r3, [r3, #16]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d020      	beq.n	800214a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002108:	4b36      	ldr	r3, [pc, #216]	; (80021e4 <HAL_RCC_OscConfig+0x270>)
 800210a:	2201      	movs	r2, #1
 800210c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800210e:	f7ff fb93 	bl	8001838 <HAL_GetTick>
 8002112:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002114:	e008      	b.n	8002128 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002116:	f7ff fb8f 	bl	8001838 <HAL_GetTick>
 800211a:	4602      	mov	r2, r0
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	2b02      	cmp	r3, #2
 8002122:	d901      	bls.n	8002128 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e1a1      	b.n	800246c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002128:	4b2d      	ldr	r3, [pc, #180]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0302 	and.w	r3, r3, #2
 8002130:	2b00      	cmp	r3, #0
 8002132:	d0f0      	beq.n	8002116 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002134:	4b2a      	ldr	r3, [pc, #168]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	695b      	ldr	r3, [r3, #20]
 8002140:	00db      	lsls	r3, r3, #3
 8002142:	4927      	ldr	r1, [pc, #156]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 8002144:	4313      	orrs	r3, r2
 8002146:	600b      	str	r3, [r1, #0]
 8002148:	e015      	b.n	8002176 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800214a:	4b26      	ldr	r3, [pc, #152]	; (80021e4 <HAL_RCC_OscConfig+0x270>)
 800214c:	2200      	movs	r2, #0
 800214e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002150:	f7ff fb72 	bl	8001838 <HAL_GetTick>
 8002154:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002156:	e008      	b.n	800216a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002158:	f7ff fb6e 	bl	8001838 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	2b02      	cmp	r3, #2
 8002164:	d901      	bls.n	800216a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e180      	b.n	800246c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800216a:	4b1d      	ldr	r3, [pc, #116]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0302 	and.w	r3, r3, #2
 8002172:	2b00      	cmp	r3, #0
 8002174:	d1f0      	bne.n	8002158 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0308 	and.w	r3, r3, #8
 800217e:	2b00      	cmp	r3, #0
 8002180:	d03a      	beq.n	80021f8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	699b      	ldr	r3, [r3, #24]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d019      	beq.n	80021be <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800218a:	4b17      	ldr	r3, [pc, #92]	; (80021e8 <HAL_RCC_OscConfig+0x274>)
 800218c:	2201      	movs	r2, #1
 800218e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002190:	f7ff fb52 	bl	8001838 <HAL_GetTick>
 8002194:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002196:	e008      	b.n	80021aa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002198:	f7ff fb4e 	bl	8001838 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d901      	bls.n	80021aa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e160      	b.n	800246c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021aa:	4b0d      	ldr	r3, [pc, #52]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 80021ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ae:	f003 0302 	and.w	r3, r3, #2
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d0f0      	beq.n	8002198 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80021b6:	2001      	movs	r0, #1
 80021b8:	f000 fad8 	bl	800276c <RCC_Delay>
 80021bc:	e01c      	b.n	80021f8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021be:	4b0a      	ldr	r3, [pc, #40]	; (80021e8 <HAL_RCC_OscConfig+0x274>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021c4:	f7ff fb38 	bl	8001838 <HAL_GetTick>
 80021c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021ca:	e00f      	b.n	80021ec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021cc:	f7ff fb34 	bl	8001838 <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d908      	bls.n	80021ec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e146      	b.n	800246c <HAL_RCC_OscConfig+0x4f8>
 80021de:	bf00      	nop
 80021e0:	40021000 	.word	0x40021000
 80021e4:	42420000 	.word	0x42420000
 80021e8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021ec:	4b92      	ldr	r3, [pc, #584]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 80021ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f0:	f003 0302 	and.w	r3, r3, #2
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d1e9      	bne.n	80021cc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0304 	and.w	r3, r3, #4
 8002200:	2b00      	cmp	r3, #0
 8002202:	f000 80a6 	beq.w	8002352 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002206:	2300      	movs	r3, #0
 8002208:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800220a:	4b8b      	ldr	r3, [pc, #556]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 800220c:	69db      	ldr	r3, [r3, #28]
 800220e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d10d      	bne.n	8002232 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002216:	4b88      	ldr	r3, [pc, #544]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 8002218:	69db      	ldr	r3, [r3, #28]
 800221a:	4a87      	ldr	r2, [pc, #540]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 800221c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002220:	61d3      	str	r3, [r2, #28]
 8002222:	4b85      	ldr	r3, [pc, #532]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 8002224:	69db      	ldr	r3, [r3, #28]
 8002226:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800222a:	60bb      	str	r3, [r7, #8]
 800222c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800222e:	2301      	movs	r3, #1
 8002230:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002232:	4b82      	ldr	r3, [pc, #520]	; (800243c <HAL_RCC_OscConfig+0x4c8>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800223a:	2b00      	cmp	r3, #0
 800223c:	d118      	bne.n	8002270 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800223e:	4b7f      	ldr	r3, [pc, #508]	; (800243c <HAL_RCC_OscConfig+0x4c8>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a7e      	ldr	r2, [pc, #504]	; (800243c <HAL_RCC_OscConfig+0x4c8>)
 8002244:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002248:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800224a:	f7ff faf5 	bl	8001838 <HAL_GetTick>
 800224e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002250:	e008      	b.n	8002264 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002252:	f7ff faf1 	bl	8001838 <HAL_GetTick>
 8002256:	4602      	mov	r2, r0
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	2b64      	cmp	r3, #100	; 0x64
 800225e:	d901      	bls.n	8002264 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	e103      	b.n	800246c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002264:	4b75      	ldr	r3, [pc, #468]	; (800243c <HAL_RCC_OscConfig+0x4c8>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800226c:	2b00      	cmp	r3, #0
 800226e:	d0f0      	beq.n	8002252 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	2b01      	cmp	r3, #1
 8002276:	d106      	bne.n	8002286 <HAL_RCC_OscConfig+0x312>
 8002278:	4b6f      	ldr	r3, [pc, #444]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 800227a:	6a1b      	ldr	r3, [r3, #32]
 800227c:	4a6e      	ldr	r2, [pc, #440]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 800227e:	f043 0301 	orr.w	r3, r3, #1
 8002282:	6213      	str	r3, [r2, #32]
 8002284:	e02d      	b.n	80022e2 <HAL_RCC_OscConfig+0x36e>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d10c      	bne.n	80022a8 <HAL_RCC_OscConfig+0x334>
 800228e:	4b6a      	ldr	r3, [pc, #424]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 8002290:	6a1b      	ldr	r3, [r3, #32]
 8002292:	4a69      	ldr	r2, [pc, #420]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 8002294:	f023 0301 	bic.w	r3, r3, #1
 8002298:	6213      	str	r3, [r2, #32]
 800229a:	4b67      	ldr	r3, [pc, #412]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 800229c:	6a1b      	ldr	r3, [r3, #32]
 800229e:	4a66      	ldr	r2, [pc, #408]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 80022a0:	f023 0304 	bic.w	r3, r3, #4
 80022a4:	6213      	str	r3, [r2, #32]
 80022a6:	e01c      	b.n	80022e2 <HAL_RCC_OscConfig+0x36e>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	2b05      	cmp	r3, #5
 80022ae:	d10c      	bne.n	80022ca <HAL_RCC_OscConfig+0x356>
 80022b0:	4b61      	ldr	r3, [pc, #388]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 80022b2:	6a1b      	ldr	r3, [r3, #32]
 80022b4:	4a60      	ldr	r2, [pc, #384]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 80022b6:	f043 0304 	orr.w	r3, r3, #4
 80022ba:	6213      	str	r3, [r2, #32]
 80022bc:	4b5e      	ldr	r3, [pc, #376]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 80022be:	6a1b      	ldr	r3, [r3, #32]
 80022c0:	4a5d      	ldr	r2, [pc, #372]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 80022c2:	f043 0301 	orr.w	r3, r3, #1
 80022c6:	6213      	str	r3, [r2, #32]
 80022c8:	e00b      	b.n	80022e2 <HAL_RCC_OscConfig+0x36e>
 80022ca:	4b5b      	ldr	r3, [pc, #364]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 80022cc:	6a1b      	ldr	r3, [r3, #32]
 80022ce:	4a5a      	ldr	r2, [pc, #360]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 80022d0:	f023 0301 	bic.w	r3, r3, #1
 80022d4:	6213      	str	r3, [r2, #32]
 80022d6:	4b58      	ldr	r3, [pc, #352]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 80022d8:	6a1b      	ldr	r3, [r3, #32]
 80022da:	4a57      	ldr	r2, [pc, #348]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 80022dc:	f023 0304 	bic.w	r3, r3, #4
 80022e0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d015      	beq.n	8002316 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ea:	f7ff faa5 	bl	8001838 <HAL_GetTick>
 80022ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022f0:	e00a      	b.n	8002308 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022f2:	f7ff faa1 	bl	8001838 <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002300:	4293      	cmp	r3, r2
 8002302:	d901      	bls.n	8002308 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e0b1      	b.n	800246c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002308:	4b4b      	ldr	r3, [pc, #300]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 800230a:	6a1b      	ldr	r3, [r3, #32]
 800230c:	f003 0302 	and.w	r3, r3, #2
 8002310:	2b00      	cmp	r3, #0
 8002312:	d0ee      	beq.n	80022f2 <HAL_RCC_OscConfig+0x37e>
 8002314:	e014      	b.n	8002340 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002316:	f7ff fa8f 	bl	8001838 <HAL_GetTick>
 800231a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800231c:	e00a      	b.n	8002334 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800231e:	f7ff fa8b 	bl	8001838 <HAL_GetTick>
 8002322:	4602      	mov	r2, r0
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	f241 3288 	movw	r2, #5000	; 0x1388
 800232c:	4293      	cmp	r3, r2
 800232e:	d901      	bls.n	8002334 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	e09b      	b.n	800246c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002334:	4b40      	ldr	r3, [pc, #256]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 8002336:	6a1b      	ldr	r3, [r3, #32]
 8002338:	f003 0302 	and.w	r3, r3, #2
 800233c:	2b00      	cmp	r3, #0
 800233e:	d1ee      	bne.n	800231e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002340:	7dfb      	ldrb	r3, [r7, #23]
 8002342:	2b01      	cmp	r3, #1
 8002344:	d105      	bne.n	8002352 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002346:	4b3c      	ldr	r3, [pc, #240]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 8002348:	69db      	ldr	r3, [r3, #28]
 800234a:	4a3b      	ldr	r2, [pc, #236]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 800234c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002350:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	69db      	ldr	r3, [r3, #28]
 8002356:	2b00      	cmp	r3, #0
 8002358:	f000 8087 	beq.w	800246a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800235c:	4b36      	ldr	r3, [pc, #216]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f003 030c 	and.w	r3, r3, #12
 8002364:	2b08      	cmp	r3, #8
 8002366:	d061      	beq.n	800242c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	69db      	ldr	r3, [r3, #28]
 800236c:	2b02      	cmp	r3, #2
 800236e:	d146      	bne.n	80023fe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002370:	4b33      	ldr	r3, [pc, #204]	; (8002440 <HAL_RCC_OscConfig+0x4cc>)
 8002372:	2200      	movs	r2, #0
 8002374:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002376:	f7ff fa5f 	bl	8001838 <HAL_GetTick>
 800237a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800237c:	e008      	b.n	8002390 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800237e:	f7ff fa5b 	bl	8001838 <HAL_GetTick>
 8002382:	4602      	mov	r2, r0
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	2b02      	cmp	r3, #2
 800238a:	d901      	bls.n	8002390 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e06d      	b.n	800246c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002390:	4b29      	ldr	r3, [pc, #164]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d1f0      	bne.n	800237e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6a1b      	ldr	r3, [r3, #32]
 80023a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023a4:	d108      	bne.n	80023b8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80023a6:	4b24      	ldr	r3, [pc, #144]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	4921      	ldr	r1, [pc, #132]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 80023b4:	4313      	orrs	r3, r2
 80023b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023b8:	4b1f      	ldr	r3, [pc, #124]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6a19      	ldr	r1, [r3, #32]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c8:	430b      	orrs	r3, r1
 80023ca:	491b      	ldr	r1, [pc, #108]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 80023cc:	4313      	orrs	r3, r2
 80023ce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023d0:	4b1b      	ldr	r3, [pc, #108]	; (8002440 <HAL_RCC_OscConfig+0x4cc>)
 80023d2:	2201      	movs	r2, #1
 80023d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d6:	f7ff fa2f 	bl	8001838 <HAL_GetTick>
 80023da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023dc:	e008      	b.n	80023f0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023de:	f7ff fa2b 	bl	8001838 <HAL_GetTick>
 80023e2:	4602      	mov	r2, r0
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d901      	bls.n	80023f0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	e03d      	b.n	800246c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023f0:	4b11      	ldr	r3, [pc, #68]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d0f0      	beq.n	80023de <HAL_RCC_OscConfig+0x46a>
 80023fc:	e035      	b.n	800246a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023fe:	4b10      	ldr	r3, [pc, #64]	; (8002440 <HAL_RCC_OscConfig+0x4cc>)
 8002400:	2200      	movs	r2, #0
 8002402:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002404:	f7ff fa18 	bl	8001838 <HAL_GetTick>
 8002408:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800240a:	e008      	b.n	800241e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800240c:	f7ff fa14 	bl	8001838 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b02      	cmp	r3, #2
 8002418:	d901      	bls.n	800241e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e026      	b.n	800246c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800241e:	4b06      	ldr	r3, [pc, #24]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d1f0      	bne.n	800240c <HAL_RCC_OscConfig+0x498>
 800242a:	e01e      	b.n	800246a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	69db      	ldr	r3, [r3, #28]
 8002430:	2b01      	cmp	r3, #1
 8002432:	d107      	bne.n	8002444 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e019      	b.n	800246c <HAL_RCC_OscConfig+0x4f8>
 8002438:	40021000 	.word	0x40021000
 800243c:	40007000 	.word	0x40007000
 8002440:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002444:	4b0b      	ldr	r3, [pc, #44]	; (8002474 <HAL_RCC_OscConfig+0x500>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6a1b      	ldr	r3, [r3, #32]
 8002454:	429a      	cmp	r2, r3
 8002456:	d106      	bne.n	8002466 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002462:	429a      	cmp	r2, r3
 8002464:	d001      	beq.n	800246a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e000      	b.n	800246c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800246a:	2300      	movs	r3, #0
}
 800246c:	4618      	mov	r0, r3
 800246e:	3718      	adds	r7, #24
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	40021000 	.word	0x40021000

08002478 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d101      	bne.n	800248c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e0d0      	b.n	800262e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800248c:	4b6a      	ldr	r3, [pc, #424]	; (8002638 <HAL_RCC_ClockConfig+0x1c0>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0307 	and.w	r3, r3, #7
 8002494:	683a      	ldr	r2, [r7, #0]
 8002496:	429a      	cmp	r2, r3
 8002498:	d910      	bls.n	80024bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800249a:	4b67      	ldr	r3, [pc, #412]	; (8002638 <HAL_RCC_ClockConfig+0x1c0>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f023 0207 	bic.w	r2, r3, #7
 80024a2:	4965      	ldr	r1, [pc, #404]	; (8002638 <HAL_RCC_ClockConfig+0x1c0>)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024aa:	4b63      	ldr	r3, [pc, #396]	; (8002638 <HAL_RCC_ClockConfig+0x1c0>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0307 	and.w	r3, r3, #7
 80024b2:	683a      	ldr	r2, [r7, #0]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d001      	beq.n	80024bc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e0b8      	b.n	800262e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0302 	and.w	r3, r3, #2
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d020      	beq.n	800250a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0304 	and.w	r3, r3, #4
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d005      	beq.n	80024e0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024d4:	4b59      	ldr	r3, [pc, #356]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	4a58      	ldr	r2, [pc, #352]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 80024da:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80024de:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0308 	and.w	r3, r3, #8
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d005      	beq.n	80024f8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024ec:	4b53      	ldr	r3, [pc, #332]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	4a52      	ldr	r2, [pc, #328]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 80024f2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80024f6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024f8:	4b50      	ldr	r3, [pc, #320]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	494d      	ldr	r1, [pc, #308]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 8002506:	4313      	orrs	r3, r2
 8002508:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0301 	and.w	r3, r3, #1
 8002512:	2b00      	cmp	r3, #0
 8002514:	d040      	beq.n	8002598 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	2b01      	cmp	r3, #1
 800251c:	d107      	bne.n	800252e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800251e:	4b47      	ldr	r3, [pc, #284]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d115      	bne.n	8002556 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e07f      	b.n	800262e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	2b02      	cmp	r3, #2
 8002534:	d107      	bne.n	8002546 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002536:	4b41      	ldr	r3, [pc, #260]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d109      	bne.n	8002556 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e073      	b.n	800262e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002546:	4b3d      	ldr	r3, [pc, #244]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	2b00      	cmp	r3, #0
 8002550:	d101      	bne.n	8002556 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e06b      	b.n	800262e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002556:	4b39      	ldr	r3, [pc, #228]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f023 0203 	bic.w	r2, r3, #3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	4936      	ldr	r1, [pc, #216]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 8002564:	4313      	orrs	r3, r2
 8002566:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002568:	f7ff f966 	bl	8001838 <HAL_GetTick>
 800256c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800256e:	e00a      	b.n	8002586 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002570:	f7ff f962 	bl	8001838 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	f241 3288 	movw	r2, #5000	; 0x1388
 800257e:	4293      	cmp	r3, r2
 8002580:	d901      	bls.n	8002586 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e053      	b.n	800262e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002586:	4b2d      	ldr	r3, [pc, #180]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f003 020c 	and.w	r2, r3, #12
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	429a      	cmp	r2, r3
 8002596:	d1eb      	bne.n	8002570 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002598:	4b27      	ldr	r3, [pc, #156]	; (8002638 <HAL_RCC_ClockConfig+0x1c0>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0307 	and.w	r3, r3, #7
 80025a0:	683a      	ldr	r2, [r7, #0]
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d210      	bcs.n	80025c8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025a6:	4b24      	ldr	r3, [pc, #144]	; (8002638 <HAL_RCC_ClockConfig+0x1c0>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f023 0207 	bic.w	r2, r3, #7
 80025ae:	4922      	ldr	r1, [pc, #136]	; (8002638 <HAL_RCC_ClockConfig+0x1c0>)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025b6:	4b20      	ldr	r3, [pc, #128]	; (8002638 <HAL_RCC_ClockConfig+0x1c0>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0307 	and.w	r3, r3, #7
 80025be:	683a      	ldr	r2, [r7, #0]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d001      	beq.n	80025c8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e032      	b.n	800262e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0304 	and.w	r3, r3, #4
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d008      	beq.n	80025e6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025d4:	4b19      	ldr	r3, [pc, #100]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	4916      	ldr	r1, [pc, #88]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0308 	and.w	r3, r3, #8
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d009      	beq.n	8002606 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025f2:	4b12      	ldr	r3, [pc, #72]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	00db      	lsls	r3, r3, #3
 8002600:	490e      	ldr	r1, [pc, #56]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 8002602:	4313      	orrs	r3, r2
 8002604:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002606:	f000 f821 	bl	800264c <HAL_RCC_GetSysClockFreq>
 800260a:	4602      	mov	r2, r0
 800260c:	4b0b      	ldr	r3, [pc, #44]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	091b      	lsrs	r3, r3, #4
 8002612:	f003 030f 	and.w	r3, r3, #15
 8002616:	490a      	ldr	r1, [pc, #40]	; (8002640 <HAL_RCC_ClockConfig+0x1c8>)
 8002618:	5ccb      	ldrb	r3, [r1, r3]
 800261a:	fa22 f303 	lsr.w	r3, r2, r3
 800261e:	4a09      	ldr	r2, [pc, #36]	; (8002644 <HAL_RCC_ClockConfig+0x1cc>)
 8002620:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002622:	4b09      	ldr	r3, [pc, #36]	; (8002648 <HAL_RCC_ClockConfig+0x1d0>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4618      	mov	r0, r3
 8002628:	f7ff f8c4 	bl	80017b4 <HAL_InitTick>

  return HAL_OK;
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	3710      	adds	r7, #16
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	40022000 	.word	0x40022000
 800263c:	40021000 	.word	0x40021000
 8002640:	08004a74 	.word	0x08004a74
 8002644:	20000024 	.word	0x20000024
 8002648:	20000048 	.word	0x20000048

0800264c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800264c:	b490      	push	{r4, r7}
 800264e:	b08a      	sub	sp, #40	; 0x28
 8002650:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002652:	4b29      	ldr	r3, [pc, #164]	; (80026f8 <HAL_RCC_GetSysClockFreq+0xac>)
 8002654:	1d3c      	adds	r4, r7, #4
 8002656:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002658:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800265c:	f240 2301 	movw	r3, #513	; 0x201
 8002660:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002662:	2300      	movs	r3, #0
 8002664:	61fb      	str	r3, [r7, #28]
 8002666:	2300      	movs	r3, #0
 8002668:	61bb      	str	r3, [r7, #24]
 800266a:	2300      	movs	r3, #0
 800266c:	627b      	str	r3, [r7, #36]	; 0x24
 800266e:	2300      	movs	r3, #0
 8002670:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002672:	2300      	movs	r3, #0
 8002674:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002676:	4b21      	ldr	r3, [pc, #132]	; (80026fc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	f003 030c 	and.w	r3, r3, #12
 8002682:	2b04      	cmp	r3, #4
 8002684:	d002      	beq.n	800268c <HAL_RCC_GetSysClockFreq+0x40>
 8002686:	2b08      	cmp	r3, #8
 8002688:	d003      	beq.n	8002692 <HAL_RCC_GetSysClockFreq+0x46>
 800268a:	e02b      	b.n	80026e4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800268c:	4b1c      	ldr	r3, [pc, #112]	; (8002700 <HAL_RCC_GetSysClockFreq+0xb4>)
 800268e:	623b      	str	r3, [r7, #32]
      break;
 8002690:	e02b      	b.n	80026ea <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	0c9b      	lsrs	r3, r3, #18
 8002696:	f003 030f 	and.w	r3, r3, #15
 800269a:	3328      	adds	r3, #40	; 0x28
 800269c:	443b      	add	r3, r7
 800269e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80026a2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d012      	beq.n	80026d4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80026ae:	4b13      	ldr	r3, [pc, #76]	; (80026fc <HAL_RCC_GetSysClockFreq+0xb0>)
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	0c5b      	lsrs	r3, r3, #17
 80026b4:	f003 0301 	and.w	r3, r3, #1
 80026b8:	3328      	adds	r3, #40	; 0x28
 80026ba:	443b      	add	r3, r7
 80026bc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80026c0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	4a0e      	ldr	r2, [pc, #56]	; (8002700 <HAL_RCC_GetSysClockFreq+0xb4>)
 80026c6:	fb03 f202 	mul.w	r2, r3, r2
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d0:	627b      	str	r3, [r7, #36]	; 0x24
 80026d2:	e004      	b.n	80026de <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	4a0b      	ldr	r2, [pc, #44]	; (8002704 <HAL_RCC_GetSysClockFreq+0xb8>)
 80026d8:	fb02 f303 	mul.w	r3, r2, r3
 80026dc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80026de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e0:	623b      	str	r3, [r7, #32]
      break;
 80026e2:	e002      	b.n	80026ea <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80026e4:	4b06      	ldr	r3, [pc, #24]	; (8002700 <HAL_RCC_GetSysClockFreq+0xb4>)
 80026e6:	623b      	str	r3, [r7, #32]
      break;
 80026e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026ea:	6a3b      	ldr	r3, [r7, #32]
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3728      	adds	r7, #40	; 0x28
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bc90      	pop	{r4, r7}
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	08004a64 	.word	0x08004a64
 80026fc:	40021000 	.word	0x40021000
 8002700:	007a1200 	.word	0x007a1200
 8002704:	003d0900 	.word	0x003d0900

08002708 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800270c:	4b02      	ldr	r3, [pc, #8]	; (8002718 <HAL_RCC_GetHCLKFreq+0x10>)
 800270e:	681b      	ldr	r3, [r3, #0]
}
 8002710:	4618      	mov	r0, r3
 8002712:	46bd      	mov	sp, r7
 8002714:	bc80      	pop	{r7}
 8002716:	4770      	bx	lr
 8002718:	20000024 	.word	0x20000024

0800271c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002720:	f7ff fff2 	bl	8002708 <HAL_RCC_GetHCLKFreq>
 8002724:	4602      	mov	r2, r0
 8002726:	4b05      	ldr	r3, [pc, #20]	; (800273c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	0a1b      	lsrs	r3, r3, #8
 800272c:	f003 0307 	and.w	r3, r3, #7
 8002730:	4903      	ldr	r1, [pc, #12]	; (8002740 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002732:	5ccb      	ldrb	r3, [r1, r3]
 8002734:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002738:	4618      	mov	r0, r3
 800273a:	bd80      	pop	{r7, pc}
 800273c:	40021000 	.word	0x40021000
 8002740:	08004a84 	.word	0x08004a84

08002744 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002748:	f7ff ffde 	bl	8002708 <HAL_RCC_GetHCLKFreq>
 800274c:	4602      	mov	r2, r0
 800274e:	4b05      	ldr	r3, [pc, #20]	; (8002764 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	0adb      	lsrs	r3, r3, #11
 8002754:	f003 0307 	and.w	r3, r3, #7
 8002758:	4903      	ldr	r1, [pc, #12]	; (8002768 <HAL_RCC_GetPCLK2Freq+0x24>)
 800275a:	5ccb      	ldrb	r3, [r1, r3]
 800275c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002760:	4618      	mov	r0, r3
 8002762:	bd80      	pop	{r7, pc}
 8002764:	40021000 	.word	0x40021000
 8002768:	08004a84 	.word	0x08004a84

0800276c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800276c:	b480      	push	{r7}
 800276e:	b085      	sub	sp, #20
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002774:	4b0a      	ldr	r3, [pc, #40]	; (80027a0 <RCC_Delay+0x34>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a0a      	ldr	r2, [pc, #40]	; (80027a4 <RCC_Delay+0x38>)
 800277a:	fba2 2303 	umull	r2, r3, r2, r3
 800277e:	0a5b      	lsrs	r3, r3, #9
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	fb02 f303 	mul.w	r3, r2, r3
 8002786:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002788:	bf00      	nop
  }
  while (Delay --);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	1e5a      	subs	r2, r3, #1
 800278e:	60fa      	str	r2, [r7, #12]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d1f9      	bne.n	8002788 <RCC_Delay+0x1c>
}
 8002794:	bf00      	nop
 8002796:	bf00      	nop
 8002798:	3714      	adds	r7, #20
 800279a:	46bd      	mov	sp, r7
 800279c:	bc80      	pop	{r7}
 800279e:	4770      	bx	lr
 80027a0:	20000024 	.word	0x20000024
 80027a4:	10624dd3 	.word	0x10624dd3

080027a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d101      	bne.n	80027ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e041      	b.n	800283e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d106      	bne.n	80027d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f7fe f936 	bl	8000a40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2202      	movs	r2, #2
 80027d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	3304      	adds	r3, #4
 80027e4:	4619      	mov	r1, r3
 80027e6:	4610      	mov	r0, r2
 80027e8:	f000 fc28 	bl	800303c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3708      	adds	r7, #8
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
	...

08002848 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002848:	b480      	push	{r7}
 800284a:	b085      	sub	sp, #20
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002856:	b2db      	uxtb	r3, r3
 8002858:	2b01      	cmp	r3, #1
 800285a:	d001      	beq.n	8002860 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e03a      	b.n	80028d6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2202      	movs	r2, #2
 8002864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	68da      	ldr	r2, [r3, #12]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f042 0201 	orr.w	r2, r2, #1
 8002876:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a18      	ldr	r2, [pc, #96]	; (80028e0 <HAL_TIM_Base_Start_IT+0x98>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d00e      	beq.n	80028a0 <HAL_TIM_Base_Start_IT+0x58>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800288a:	d009      	beq.n	80028a0 <HAL_TIM_Base_Start_IT+0x58>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a14      	ldr	r2, [pc, #80]	; (80028e4 <HAL_TIM_Base_Start_IT+0x9c>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d004      	beq.n	80028a0 <HAL_TIM_Base_Start_IT+0x58>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a13      	ldr	r2, [pc, #76]	; (80028e8 <HAL_TIM_Base_Start_IT+0xa0>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d111      	bne.n	80028c4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f003 0307 	and.w	r3, r3, #7
 80028aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2b06      	cmp	r3, #6
 80028b0:	d010      	beq.n	80028d4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f042 0201 	orr.w	r2, r2, #1
 80028c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028c2:	e007      	b.n	80028d4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f042 0201 	orr.w	r2, r2, #1
 80028d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3714      	adds	r7, #20
 80028da:	46bd      	mov	sp, r7
 80028dc:	bc80      	pop	{r7}
 80028de:	4770      	bx	lr
 80028e0:	40012c00 	.word	0x40012c00
 80028e4:	40000400 	.word	0x40000400
 80028e8:	40000800 	.word	0x40000800

080028ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d101      	bne.n	80028fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e041      	b.n	8002982 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002904:	b2db      	uxtb	r3, r3
 8002906:	2b00      	cmp	r3, #0
 8002908:	d106      	bne.n	8002918 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f000 f839 	bl	800298a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2202      	movs	r2, #2
 800291c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	3304      	adds	r3, #4
 8002928:	4619      	mov	r1, r3
 800292a:	4610      	mov	r0, r2
 800292c:	f000 fb86 	bl	800303c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	3708      	adds	r7, #8
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}

0800298a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800298a:	b480      	push	{r7}
 800298c:	b083      	sub	sp, #12
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002992:	bf00      	nop
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	bc80      	pop	{r7}
 800299a:	4770      	bx	lr

0800299c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d109      	bne.n	80029c0 <HAL_TIM_PWM_Start+0x24>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	bf14      	ite	ne
 80029b8:	2301      	movne	r3, #1
 80029ba:	2300      	moveq	r3, #0
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	e022      	b.n	8002a06 <HAL_TIM_PWM_Start+0x6a>
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	2b04      	cmp	r3, #4
 80029c4:	d109      	bne.n	80029da <HAL_TIM_PWM_Start+0x3e>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	bf14      	ite	ne
 80029d2:	2301      	movne	r3, #1
 80029d4:	2300      	moveq	r3, #0
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	e015      	b.n	8002a06 <HAL_TIM_PWM_Start+0x6a>
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	2b08      	cmp	r3, #8
 80029de:	d109      	bne.n	80029f4 <HAL_TIM_PWM_Start+0x58>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	bf14      	ite	ne
 80029ec:	2301      	movne	r3, #1
 80029ee:	2300      	moveq	r3, #0
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	e008      	b.n	8002a06 <HAL_TIM_PWM_Start+0x6a>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	bf14      	ite	ne
 8002a00:	2301      	movne	r3, #1
 8002a02:	2300      	moveq	r3, #0
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d001      	beq.n	8002a0e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e05e      	b.n	8002acc <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d104      	bne.n	8002a1e <HAL_TIM_PWM_Start+0x82>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2202      	movs	r2, #2
 8002a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a1c:	e013      	b.n	8002a46 <HAL_TIM_PWM_Start+0xaa>
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	2b04      	cmp	r3, #4
 8002a22:	d104      	bne.n	8002a2e <HAL_TIM_PWM_Start+0x92>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2202      	movs	r2, #2
 8002a28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a2c:	e00b      	b.n	8002a46 <HAL_TIM_PWM_Start+0xaa>
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	2b08      	cmp	r3, #8
 8002a32:	d104      	bne.n	8002a3e <HAL_TIM_PWM_Start+0xa2>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2202      	movs	r2, #2
 8002a38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a3c:	e003      	b.n	8002a46 <HAL_TIM_PWM_Start+0xaa>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2202      	movs	r2, #2
 8002a42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	6839      	ldr	r1, [r7, #0]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f000 fd74 	bl	800353c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a1e      	ldr	r2, [pc, #120]	; (8002ad4 <HAL_TIM_PWM_Start+0x138>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d107      	bne.n	8002a6e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a6c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a18      	ldr	r2, [pc, #96]	; (8002ad4 <HAL_TIM_PWM_Start+0x138>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d00e      	beq.n	8002a96 <HAL_TIM_PWM_Start+0xfa>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a80:	d009      	beq.n	8002a96 <HAL_TIM_PWM_Start+0xfa>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a14      	ldr	r2, [pc, #80]	; (8002ad8 <HAL_TIM_PWM_Start+0x13c>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d004      	beq.n	8002a96 <HAL_TIM_PWM_Start+0xfa>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a12      	ldr	r2, [pc, #72]	; (8002adc <HAL_TIM_PWM_Start+0x140>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d111      	bne.n	8002aba <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f003 0307 	and.w	r3, r3, #7
 8002aa0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2b06      	cmp	r3, #6
 8002aa6:	d010      	beq.n	8002aca <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f042 0201 	orr.w	r2, r2, #1
 8002ab6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ab8:	e007      	b.n	8002aca <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f042 0201 	orr.w	r2, r2, #1
 8002ac8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002aca:	2300      	movs	r3, #0
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3710      	adds	r7, #16
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	40012c00 	.word	0x40012c00
 8002ad8:	40000400 	.word	0x40000400
 8002adc:	40000800 	.word	0x40000800

08002ae0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	691b      	ldr	r3, [r3, #16]
 8002aee:	f003 0302 	and.w	r3, r3, #2
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d122      	bne.n	8002b3c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	f003 0302 	and.w	r3, r3, #2
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d11b      	bne.n	8002b3c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f06f 0202 	mvn.w	r2, #2
 8002b0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2201      	movs	r2, #1
 8002b12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	699b      	ldr	r3, [r3, #24]
 8002b1a:	f003 0303 	and.w	r3, r3, #3
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d003      	beq.n	8002b2a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f000 fa6f 	bl	8003006 <HAL_TIM_IC_CaptureCallback>
 8002b28:	e005      	b.n	8002b36 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 fa62 	bl	8002ff4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f000 fa71 	bl	8003018 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	f003 0304 	and.w	r3, r3, #4
 8002b46:	2b04      	cmp	r3, #4
 8002b48:	d122      	bne.n	8002b90 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	f003 0304 	and.w	r3, r3, #4
 8002b54:	2b04      	cmp	r3, #4
 8002b56:	d11b      	bne.n	8002b90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f06f 0204 	mvn.w	r2, #4
 8002b60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2202      	movs	r2, #2
 8002b66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	699b      	ldr	r3, [r3, #24]
 8002b6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d003      	beq.n	8002b7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f000 fa45 	bl	8003006 <HAL_TIM_IC_CaptureCallback>
 8002b7c:	e005      	b.n	8002b8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f000 fa38 	bl	8002ff4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f000 fa47 	bl	8003018 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	691b      	ldr	r3, [r3, #16]
 8002b96:	f003 0308 	and.w	r3, r3, #8
 8002b9a:	2b08      	cmp	r3, #8
 8002b9c:	d122      	bne.n	8002be4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	f003 0308 	and.w	r3, r3, #8
 8002ba8:	2b08      	cmp	r3, #8
 8002baa:	d11b      	bne.n	8002be4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f06f 0208 	mvn.w	r2, #8
 8002bb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2204      	movs	r2, #4
 8002bba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	69db      	ldr	r3, [r3, #28]
 8002bc2:	f003 0303 	and.w	r3, r3, #3
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d003      	beq.n	8002bd2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f000 fa1b 	bl	8003006 <HAL_TIM_IC_CaptureCallback>
 8002bd0:	e005      	b.n	8002bde <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f000 fa0e 	bl	8002ff4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f000 fa1d 	bl	8003018 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	f003 0310 	and.w	r3, r3, #16
 8002bee:	2b10      	cmp	r3, #16
 8002bf0:	d122      	bne.n	8002c38 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	f003 0310 	and.w	r3, r3, #16
 8002bfc:	2b10      	cmp	r3, #16
 8002bfe:	d11b      	bne.n	8002c38 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f06f 0210 	mvn.w	r2, #16
 8002c08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2208      	movs	r2, #8
 8002c0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	69db      	ldr	r3, [r3, #28]
 8002c16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d003      	beq.n	8002c26 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f000 f9f1 	bl	8003006 <HAL_TIM_IC_CaptureCallback>
 8002c24:	e005      	b.n	8002c32 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f000 f9e4 	bl	8002ff4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f000 f9f3 	bl	8003018 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d10e      	bne.n	8002c64 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	f003 0301 	and.w	r3, r3, #1
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d107      	bne.n	8002c64 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f06f 0201 	mvn.w	r2, #1
 8002c5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f7fd fd78 	bl	8000754 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c6e:	2b80      	cmp	r3, #128	; 0x80
 8002c70:	d10e      	bne.n	8002c90 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c7c:	2b80      	cmp	r3, #128	; 0x80
 8002c7e:	d107      	bne.n	8002c90 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f000 fce1 	bl	8003652 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c9a:	2b40      	cmp	r3, #64	; 0x40
 8002c9c:	d10e      	bne.n	8002cbc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca8:	2b40      	cmp	r3, #64	; 0x40
 8002caa:	d107      	bne.n	8002cbc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002cb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 f9b7 	bl	800302a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	f003 0320 	and.w	r3, r3, #32
 8002cc6:	2b20      	cmp	r3, #32
 8002cc8:	d10e      	bne.n	8002ce8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	f003 0320 	and.w	r3, r3, #32
 8002cd4:	2b20      	cmp	r3, #32
 8002cd6:	d107      	bne.n	8002ce8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f06f 0220 	mvn.w	r2, #32
 8002ce0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f000 fcac 	bl	8003640 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ce8:	bf00      	nop
 8002cea:	3708      	adds	r7, #8
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d101      	bne.n	8002d0a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002d06:	2302      	movs	r3, #2
 8002d08:	e0ac      	b.n	8002e64 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2b0c      	cmp	r3, #12
 8002d16:	f200 809f 	bhi.w	8002e58 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002d1a:	a201      	add	r2, pc, #4	; (adr r2, 8002d20 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d20:	08002d55 	.word	0x08002d55
 8002d24:	08002e59 	.word	0x08002e59
 8002d28:	08002e59 	.word	0x08002e59
 8002d2c:	08002e59 	.word	0x08002e59
 8002d30:	08002d95 	.word	0x08002d95
 8002d34:	08002e59 	.word	0x08002e59
 8002d38:	08002e59 	.word	0x08002e59
 8002d3c:	08002e59 	.word	0x08002e59
 8002d40:	08002dd7 	.word	0x08002dd7
 8002d44:	08002e59 	.word	0x08002e59
 8002d48:	08002e59 	.word	0x08002e59
 8002d4c:	08002e59 	.word	0x08002e59
 8002d50:	08002e17 	.word	0x08002e17
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	68b9      	ldr	r1, [r7, #8]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f000 f9d0 	bl	8003100 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	699a      	ldr	r2, [r3, #24]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f042 0208 	orr.w	r2, r2, #8
 8002d6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	699a      	ldr	r2, [r3, #24]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f022 0204 	bic.w	r2, r2, #4
 8002d7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	6999      	ldr	r1, [r3, #24]
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	691a      	ldr	r2, [r3, #16]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	430a      	orrs	r2, r1
 8002d90:	619a      	str	r2, [r3, #24]
      break;
 8002d92:	e062      	b.n	8002e5a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	68b9      	ldr	r1, [r7, #8]
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f000 fa16 	bl	80031cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	699a      	ldr	r2, [r3, #24]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002dae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	699a      	ldr	r2, [r3, #24]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	6999      	ldr	r1, [r3, #24]
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	691b      	ldr	r3, [r3, #16]
 8002dca:	021a      	lsls	r2, r3, #8
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	430a      	orrs	r2, r1
 8002dd2:	619a      	str	r2, [r3, #24]
      break;
 8002dd4:	e041      	b.n	8002e5a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	68b9      	ldr	r1, [r7, #8]
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f000 fa5f 	bl	80032a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	69da      	ldr	r2, [r3, #28]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f042 0208 	orr.w	r2, r2, #8
 8002df0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	69da      	ldr	r2, [r3, #28]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f022 0204 	bic.w	r2, r2, #4
 8002e00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	69d9      	ldr	r1, [r3, #28]
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	691a      	ldr	r2, [r3, #16]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	430a      	orrs	r2, r1
 8002e12:	61da      	str	r2, [r3, #28]
      break;
 8002e14:	e021      	b.n	8002e5a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	68b9      	ldr	r1, [r7, #8]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f000 faa9 	bl	8003374 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	69da      	ldr	r2, [r3, #28]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	69da      	ldr	r2, [r3, #28]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	69d9      	ldr	r1, [r3, #28]
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	691b      	ldr	r3, [r3, #16]
 8002e4c:	021a      	lsls	r2, r3, #8
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	430a      	orrs	r2, r1
 8002e54:	61da      	str	r2, [r3, #28]
      break;
 8002e56:	e000      	b.n	8002e5a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002e58:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e62:	2300      	movs	r3, #0
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3710      	adds	r7, #16
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d101      	bne.n	8002e84 <HAL_TIM_ConfigClockSource+0x18>
 8002e80:	2302      	movs	r3, #2
 8002e82:	e0b3      	b.n	8002fec <HAL_TIM_ConfigClockSource+0x180>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2202      	movs	r2, #2
 8002e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002ea2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002eaa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	68fa      	ldr	r2, [r7, #12]
 8002eb2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ebc:	d03e      	beq.n	8002f3c <HAL_TIM_ConfigClockSource+0xd0>
 8002ebe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ec2:	f200 8087 	bhi.w	8002fd4 <HAL_TIM_ConfigClockSource+0x168>
 8002ec6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eca:	f000 8085 	beq.w	8002fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ece:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ed2:	d87f      	bhi.n	8002fd4 <HAL_TIM_ConfigClockSource+0x168>
 8002ed4:	2b70      	cmp	r3, #112	; 0x70
 8002ed6:	d01a      	beq.n	8002f0e <HAL_TIM_ConfigClockSource+0xa2>
 8002ed8:	2b70      	cmp	r3, #112	; 0x70
 8002eda:	d87b      	bhi.n	8002fd4 <HAL_TIM_ConfigClockSource+0x168>
 8002edc:	2b60      	cmp	r3, #96	; 0x60
 8002ede:	d050      	beq.n	8002f82 <HAL_TIM_ConfigClockSource+0x116>
 8002ee0:	2b60      	cmp	r3, #96	; 0x60
 8002ee2:	d877      	bhi.n	8002fd4 <HAL_TIM_ConfigClockSource+0x168>
 8002ee4:	2b50      	cmp	r3, #80	; 0x50
 8002ee6:	d03c      	beq.n	8002f62 <HAL_TIM_ConfigClockSource+0xf6>
 8002ee8:	2b50      	cmp	r3, #80	; 0x50
 8002eea:	d873      	bhi.n	8002fd4 <HAL_TIM_ConfigClockSource+0x168>
 8002eec:	2b40      	cmp	r3, #64	; 0x40
 8002eee:	d058      	beq.n	8002fa2 <HAL_TIM_ConfigClockSource+0x136>
 8002ef0:	2b40      	cmp	r3, #64	; 0x40
 8002ef2:	d86f      	bhi.n	8002fd4 <HAL_TIM_ConfigClockSource+0x168>
 8002ef4:	2b30      	cmp	r3, #48	; 0x30
 8002ef6:	d064      	beq.n	8002fc2 <HAL_TIM_ConfigClockSource+0x156>
 8002ef8:	2b30      	cmp	r3, #48	; 0x30
 8002efa:	d86b      	bhi.n	8002fd4 <HAL_TIM_ConfigClockSource+0x168>
 8002efc:	2b20      	cmp	r3, #32
 8002efe:	d060      	beq.n	8002fc2 <HAL_TIM_ConfigClockSource+0x156>
 8002f00:	2b20      	cmp	r3, #32
 8002f02:	d867      	bhi.n	8002fd4 <HAL_TIM_ConfigClockSource+0x168>
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d05c      	beq.n	8002fc2 <HAL_TIM_ConfigClockSource+0x156>
 8002f08:	2b10      	cmp	r3, #16
 8002f0a:	d05a      	beq.n	8002fc2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002f0c:	e062      	b.n	8002fd4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6818      	ldr	r0, [r3, #0]
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	6899      	ldr	r1, [r3, #8]
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	685a      	ldr	r2, [r3, #4]
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	f000 faee 	bl	80034fe <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002f30:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	68fa      	ldr	r2, [r7, #12]
 8002f38:	609a      	str	r2, [r3, #8]
      break;
 8002f3a:	e04e      	b.n	8002fda <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6818      	ldr	r0, [r3, #0]
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	6899      	ldr	r1, [r3, #8]
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	685a      	ldr	r2, [r3, #4]
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	f000 fad7 	bl	80034fe <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	689a      	ldr	r2, [r3, #8]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f5e:	609a      	str	r2, [r3, #8]
      break;
 8002f60:	e03b      	b.n	8002fda <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6818      	ldr	r0, [r3, #0]
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	6859      	ldr	r1, [r3, #4]
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	461a      	mov	r2, r3
 8002f70:	f000 fa4e 	bl	8003410 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2150      	movs	r1, #80	; 0x50
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f000 faa5 	bl	80034ca <TIM_ITRx_SetConfig>
      break;
 8002f80:	e02b      	b.n	8002fda <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6818      	ldr	r0, [r3, #0]
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	6859      	ldr	r1, [r3, #4]
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	461a      	mov	r2, r3
 8002f90:	f000 fa6c 	bl	800346c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2160      	movs	r1, #96	; 0x60
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f000 fa95 	bl	80034ca <TIM_ITRx_SetConfig>
      break;
 8002fa0:	e01b      	b.n	8002fda <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6818      	ldr	r0, [r3, #0]
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	6859      	ldr	r1, [r3, #4]
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	461a      	mov	r2, r3
 8002fb0:	f000 fa2e 	bl	8003410 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	2140      	movs	r1, #64	; 0x40
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f000 fa85 	bl	80034ca <TIM_ITRx_SetConfig>
      break;
 8002fc0:	e00b      	b.n	8002fda <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4619      	mov	r1, r3
 8002fcc:	4610      	mov	r0, r2
 8002fce:	f000 fa7c 	bl	80034ca <TIM_ITRx_SetConfig>
        break;
 8002fd2:	e002      	b.n	8002fda <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002fd4:	bf00      	nop
 8002fd6:	e000      	b.n	8002fda <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002fd8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2201      	movs	r2, #1
 8002fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fea:	2300      	movs	r3, #0
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3710      	adds	r7, #16
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ffc:	bf00      	nop
 8002ffe:	370c      	adds	r7, #12
 8003000:	46bd      	mov	sp, r7
 8003002:	bc80      	pop	{r7}
 8003004:	4770      	bx	lr

08003006 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003006:	b480      	push	{r7}
 8003008:	b083      	sub	sp, #12
 800300a:	af00      	add	r7, sp, #0
 800300c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800300e:	bf00      	nop
 8003010:	370c      	adds	r7, #12
 8003012:	46bd      	mov	sp, r7
 8003014:	bc80      	pop	{r7}
 8003016:	4770      	bx	lr

08003018 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003020:	bf00      	nop
 8003022:	370c      	adds	r7, #12
 8003024:	46bd      	mov	sp, r7
 8003026:	bc80      	pop	{r7}
 8003028:	4770      	bx	lr

0800302a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800302a:	b480      	push	{r7}
 800302c:	b083      	sub	sp, #12
 800302e:	af00      	add	r7, sp, #0
 8003030:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003032:	bf00      	nop
 8003034:	370c      	adds	r7, #12
 8003036:	46bd      	mov	sp, r7
 8003038:	bc80      	pop	{r7}
 800303a:	4770      	bx	lr

0800303c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800303c:	b480      	push	{r7}
 800303e:	b085      	sub	sp, #20
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	4a29      	ldr	r2, [pc, #164]	; (80030f4 <TIM_Base_SetConfig+0xb8>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d00b      	beq.n	800306c <TIM_Base_SetConfig+0x30>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800305a:	d007      	beq.n	800306c <TIM_Base_SetConfig+0x30>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4a26      	ldr	r2, [pc, #152]	; (80030f8 <TIM_Base_SetConfig+0xbc>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d003      	beq.n	800306c <TIM_Base_SetConfig+0x30>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	4a25      	ldr	r2, [pc, #148]	; (80030fc <TIM_Base_SetConfig+0xc0>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d108      	bne.n	800307e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003072:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	68fa      	ldr	r2, [r7, #12]
 800307a:	4313      	orrs	r3, r2
 800307c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a1c      	ldr	r2, [pc, #112]	; (80030f4 <TIM_Base_SetConfig+0xb8>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d00b      	beq.n	800309e <TIM_Base_SetConfig+0x62>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800308c:	d007      	beq.n	800309e <TIM_Base_SetConfig+0x62>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a19      	ldr	r2, [pc, #100]	; (80030f8 <TIM_Base_SetConfig+0xbc>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d003      	beq.n	800309e <TIM_Base_SetConfig+0x62>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a18      	ldr	r2, [pc, #96]	; (80030fc <TIM_Base_SetConfig+0xc0>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d108      	bne.n	80030b0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	68fa      	ldr	r2, [r7, #12]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	695b      	ldr	r3, [r3, #20]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	68fa      	ldr	r2, [r7, #12]
 80030c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	689a      	ldr	r2, [r3, #8]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	4a07      	ldr	r2, [pc, #28]	; (80030f4 <TIM_Base_SetConfig+0xb8>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d103      	bne.n	80030e4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	691a      	ldr	r2, [r3, #16]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	615a      	str	r2, [r3, #20]
}
 80030ea:	bf00      	nop
 80030ec:	3714      	adds	r7, #20
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bc80      	pop	{r7}
 80030f2:	4770      	bx	lr
 80030f4:	40012c00 	.word	0x40012c00
 80030f8:	40000400 	.word	0x40000400
 80030fc:	40000800 	.word	0x40000800

08003100 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003100:	b480      	push	{r7}
 8003102:	b087      	sub	sp, #28
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a1b      	ldr	r3, [r3, #32]
 800310e:	f023 0201 	bic.w	r2, r3, #1
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a1b      	ldr	r3, [r3, #32]
 800311a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	699b      	ldr	r3, [r3, #24]
 8003126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800312e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f023 0303 	bic.w	r3, r3, #3
 8003136:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	68fa      	ldr	r2, [r7, #12]
 800313e:	4313      	orrs	r3, r2
 8003140:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	f023 0302 	bic.w	r3, r3, #2
 8003148:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	697a      	ldr	r2, [r7, #20]
 8003150:	4313      	orrs	r3, r2
 8003152:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	4a1c      	ldr	r2, [pc, #112]	; (80031c8 <TIM_OC1_SetConfig+0xc8>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d10c      	bne.n	8003176 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	f023 0308 	bic.w	r3, r3, #8
 8003162:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	697a      	ldr	r2, [r7, #20]
 800316a:	4313      	orrs	r3, r2
 800316c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	f023 0304 	bic.w	r3, r3, #4
 8003174:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a13      	ldr	r2, [pc, #76]	; (80031c8 <TIM_OC1_SetConfig+0xc8>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d111      	bne.n	80031a2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003184:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800318c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	693a      	ldr	r2, [r7, #16]
 8003194:	4313      	orrs	r3, r2
 8003196:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	699b      	ldr	r3, [r3, #24]
 800319c:	693a      	ldr	r2, [r7, #16]
 800319e:	4313      	orrs	r3, r2
 80031a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	693a      	ldr	r2, [r7, #16]
 80031a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	68fa      	ldr	r2, [r7, #12]
 80031ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	685a      	ldr	r2, [r3, #4]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	697a      	ldr	r2, [r7, #20]
 80031ba:	621a      	str	r2, [r3, #32]
}
 80031bc:	bf00      	nop
 80031be:	371c      	adds	r7, #28
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bc80      	pop	{r7}
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop
 80031c8:	40012c00 	.word	0x40012c00

080031cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b087      	sub	sp, #28
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a1b      	ldr	r3, [r3, #32]
 80031da:	f023 0210 	bic.w	r2, r3, #16
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a1b      	ldr	r3, [r3, #32]
 80031e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	699b      	ldr	r3, [r3, #24]
 80031f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003202:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	021b      	lsls	r3, r3, #8
 800320a:	68fa      	ldr	r2, [r7, #12]
 800320c:	4313      	orrs	r3, r2
 800320e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	f023 0320 	bic.w	r3, r3, #32
 8003216:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	011b      	lsls	r3, r3, #4
 800321e:	697a      	ldr	r2, [r7, #20]
 8003220:	4313      	orrs	r3, r2
 8003222:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	4a1d      	ldr	r2, [pc, #116]	; (800329c <TIM_OC2_SetConfig+0xd0>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d10d      	bne.n	8003248 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003232:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	011b      	lsls	r3, r3, #4
 800323a:	697a      	ldr	r2, [r7, #20]
 800323c:	4313      	orrs	r3, r2
 800323e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003246:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	4a14      	ldr	r2, [pc, #80]	; (800329c <TIM_OC2_SetConfig+0xd0>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d113      	bne.n	8003278 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003256:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800325e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	695b      	ldr	r3, [r3, #20]
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	693a      	ldr	r2, [r7, #16]
 8003268:	4313      	orrs	r3, r2
 800326a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	699b      	ldr	r3, [r3, #24]
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	693a      	ldr	r2, [r7, #16]
 8003274:	4313      	orrs	r3, r2
 8003276:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	693a      	ldr	r2, [r7, #16]
 800327c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	68fa      	ldr	r2, [r7, #12]
 8003282:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	685a      	ldr	r2, [r3, #4]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	697a      	ldr	r2, [r7, #20]
 8003290:	621a      	str	r2, [r3, #32]
}
 8003292:	bf00      	nop
 8003294:	371c      	adds	r7, #28
 8003296:	46bd      	mov	sp, r7
 8003298:	bc80      	pop	{r7}
 800329a:	4770      	bx	lr
 800329c:	40012c00 	.word	0x40012c00

080032a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b087      	sub	sp, #28
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a1b      	ldr	r3, [r3, #32]
 80032ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a1b      	ldr	r3, [r3, #32]
 80032ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	69db      	ldr	r3, [r3, #28]
 80032c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f023 0303 	bic.w	r3, r3, #3
 80032d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	68fa      	ldr	r2, [r7, #12]
 80032de:	4313      	orrs	r3, r2
 80032e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80032e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	021b      	lsls	r3, r3, #8
 80032f0:	697a      	ldr	r2, [r7, #20]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a1d      	ldr	r2, [pc, #116]	; (8003370 <TIM_OC3_SetConfig+0xd0>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d10d      	bne.n	800331a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003304:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	021b      	lsls	r3, r3, #8
 800330c:	697a      	ldr	r2, [r7, #20]
 800330e:	4313      	orrs	r3, r2
 8003310:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003318:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a14      	ldr	r2, [pc, #80]	; (8003370 <TIM_OC3_SetConfig+0xd0>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d113      	bne.n	800334a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003328:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003330:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	695b      	ldr	r3, [r3, #20]
 8003336:	011b      	lsls	r3, r3, #4
 8003338:	693a      	ldr	r2, [r7, #16]
 800333a:	4313      	orrs	r3, r2
 800333c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	699b      	ldr	r3, [r3, #24]
 8003342:	011b      	lsls	r3, r3, #4
 8003344:	693a      	ldr	r2, [r7, #16]
 8003346:	4313      	orrs	r3, r2
 8003348:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	693a      	ldr	r2, [r7, #16]
 800334e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	68fa      	ldr	r2, [r7, #12]
 8003354:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	685a      	ldr	r2, [r3, #4]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	697a      	ldr	r2, [r7, #20]
 8003362:	621a      	str	r2, [r3, #32]
}
 8003364:	bf00      	nop
 8003366:	371c      	adds	r7, #28
 8003368:	46bd      	mov	sp, r7
 800336a:	bc80      	pop	{r7}
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	40012c00 	.word	0x40012c00

08003374 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003374:	b480      	push	{r7}
 8003376:	b087      	sub	sp, #28
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a1b      	ldr	r3, [r3, #32]
 8003382:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6a1b      	ldr	r3, [r3, #32]
 800338e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	69db      	ldr	r3, [r3, #28]
 800339a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	021b      	lsls	r3, r3, #8
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80033be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	031b      	lsls	r3, r3, #12
 80033c6:	693a      	ldr	r2, [r7, #16]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	4a0f      	ldr	r2, [pc, #60]	; (800340c <TIM_OC4_SetConfig+0x98>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d109      	bne.n	80033e8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	695b      	ldr	r3, [r3, #20]
 80033e0:	019b      	lsls	r3, r3, #6
 80033e2:	697a      	ldr	r2, [r7, #20]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	697a      	ldr	r2, [r7, #20]
 80033ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	68fa      	ldr	r2, [r7, #12]
 80033f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	685a      	ldr	r2, [r3, #4]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	693a      	ldr	r2, [r7, #16]
 8003400:	621a      	str	r2, [r3, #32]
}
 8003402:	bf00      	nop
 8003404:	371c      	adds	r7, #28
 8003406:	46bd      	mov	sp, r7
 8003408:	bc80      	pop	{r7}
 800340a:	4770      	bx	lr
 800340c:	40012c00 	.word	0x40012c00

08003410 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003410:	b480      	push	{r7}
 8003412:	b087      	sub	sp, #28
 8003414:	af00      	add	r7, sp, #0
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	60b9      	str	r1, [r7, #8]
 800341a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6a1b      	ldr	r3, [r3, #32]
 8003420:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6a1b      	ldr	r3, [r3, #32]
 8003426:	f023 0201 	bic.w	r2, r3, #1
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	699b      	ldr	r3, [r3, #24]
 8003432:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800343a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	011b      	lsls	r3, r3, #4
 8003440:	693a      	ldr	r2, [r7, #16]
 8003442:	4313      	orrs	r3, r2
 8003444:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	f023 030a 	bic.w	r3, r3, #10
 800344c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800344e:	697a      	ldr	r2, [r7, #20]
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	4313      	orrs	r3, r2
 8003454:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	693a      	ldr	r2, [r7, #16]
 800345a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	697a      	ldr	r2, [r7, #20]
 8003460:	621a      	str	r2, [r3, #32]
}
 8003462:	bf00      	nop
 8003464:	371c      	adds	r7, #28
 8003466:	46bd      	mov	sp, r7
 8003468:	bc80      	pop	{r7}
 800346a:	4770      	bx	lr

0800346c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800346c:	b480      	push	{r7}
 800346e:	b087      	sub	sp, #28
 8003470:	af00      	add	r7, sp, #0
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	60b9      	str	r1, [r7, #8]
 8003476:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6a1b      	ldr	r3, [r3, #32]
 800347c:	f023 0210 	bic.w	r2, r3, #16
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6a1b      	ldr	r3, [r3, #32]
 800348e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003496:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	031b      	lsls	r3, r3, #12
 800349c:	697a      	ldr	r2, [r7, #20]
 800349e:	4313      	orrs	r3, r2
 80034a0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80034a8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	011b      	lsls	r3, r3, #4
 80034ae:	693a      	ldr	r2, [r7, #16]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	697a      	ldr	r2, [r7, #20]
 80034b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	693a      	ldr	r2, [r7, #16]
 80034be:	621a      	str	r2, [r3, #32]
}
 80034c0:	bf00      	nop
 80034c2:	371c      	adds	r7, #28
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bc80      	pop	{r7}
 80034c8:	4770      	bx	lr

080034ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80034ca:	b480      	push	{r7}
 80034cc:	b085      	sub	sp, #20
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
 80034d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80034e2:	683a      	ldr	r2, [r7, #0]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	f043 0307 	orr.w	r3, r3, #7
 80034ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	68fa      	ldr	r2, [r7, #12]
 80034f2:	609a      	str	r2, [r3, #8]
}
 80034f4:	bf00      	nop
 80034f6:	3714      	adds	r7, #20
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bc80      	pop	{r7}
 80034fc:	4770      	bx	lr

080034fe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80034fe:	b480      	push	{r7}
 8003500:	b087      	sub	sp, #28
 8003502:	af00      	add	r7, sp, #0
 8003504:	60f8      	str	r0, [r7, #12]
 8003506:	60b9      	str	r1, [r7, #8]
 8003508:	607a      	str	r2, [r7, #4]
 800350a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003518:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	021a      	lsls	r2, r3, #8
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	431a      	orrs	r2, r3
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	4313      	orrs	r3, r2
 8003526:	697a      	ldr	r2, [r7, #20]
 8003528:	4313      	orrs	r3, r2
 800352a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	697a      	ldr	r2, [r7, #20]
 8003530:	609a      	str	r2, [r3, #8]
}
 8003532:	bf00      	nop
 8003534:	371c      	adds	r7, #28
 8003536:	46bd      	mov	sp, r7
 8003538:	bc80      	pop	{r7}
 800353a:	4770      	bx	lr

0800353c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800353c:	b480      	push	{r7}
 800353e:	b087      	sub	sp, #28
 8003540:	af00      	add	r7, sp, #0
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	60b9      	str	r1, [r7, #8]
 8003546:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	f003 031f 	and.w	r3, r3, #31
 800354e:	2201      	movs	r2, #1
 8003550:	fa02 f303 	lsl.w	r3, r2, r3
 8003554:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6a1a      	ldr	r2, [r3, #32]
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	43db      	mvns	r3, r3
 800355e:	401a      	ands	r2, r3
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6a1a      	ldr	r2, [r3, #32]
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	f003 031f 	and.w	r3, r3, #31
 800356e:	6879      	ldr	r1, [r7, #4]
 8003570:	fa01 f303 	lsl.w	r3, r1, r3
 8003574:	431a      	orrs	r2, r3
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	621a      	str	r2, [r3, #32]
}
 800357a:	bf00      	nop
 800357c:	371c      	adds	r7, #28
 800357e:	46bd      	mov	sp, r7
 8003580:	bc80      	pop	{r7}
 8003582:	4770      	bx	lr

08003584 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003584:	b480      	push	{r7}
 8003586:	b085      	sub	sp, #20
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003594:	2b01      	cmp	r3, #1
 8003596:	d101      	bne.n	800359c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003598:	2302      	movs	r3, #2
 800359a:	e046      	b.n	800362a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2202      	movs	r2, #2
 80035a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68fa      	ldr	r2, [r7, #12]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	68fa      	ldr	r2, [r7, #12]
 80035d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a16      	ldr	r2, [pc, #88]	; (8003634 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d00e      	beq.n	80035fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035e8:	d009      	beq.n	80035fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a12      	ldr	r2, [pc, #72]	; (8003638 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d004      	beq.n	80035fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a10      	ldr	r2, [pc, #64]	; (800363c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d10c      	bne.n	8003618 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003604:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	68ba      	ldr	r2, [r7, #8]
 800360c:	4313      	orrs	r3, r2
 800360e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	68ba      	ldr	r2, [r7, #8]
 8003616:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	3714      	adds	r7, #20
 800362e:	46bd      	mov	sp, r7
 8003630:	bc80      	pop	{r7}
 8003632:	4770      	bx	lr
 8003634:	40012c00 	.word	0x40012c00
 8003638:	40000400 	.word	0x40000400
 800363c:	40000800 	.word	0x40000800

08003640 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003648:	bf00      	nop
 800364a:	370c      	adds	r7, #12
 800364c:	46bd      	mov	sp, r7
 800364e:	bc80      	pop	{r7}
 8003650:	4770      	bx	lr

08003652 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003652:	b480      	push	{r7}
 8003654:	b083      	sub	sp, #12
 8003656:	af00      	add	r7, sp, #0
 8003658:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800365a:	bf00      	nop
 800365c:	370c      	adds	r7, #12
 800365e:	46bd      	mov	sp, r7
 8003660:	bc80      	pop	{r7}
 8003662:	4770      	bx	lr

08003664 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b082      	sub	sp, #8
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d101      	bne.n	8003676 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e03f      	b.n	80036f6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800367c:	b2db      	uxtb	r3, r3
 800367e:	2b00      	cmp	r3, #0
 8003680:	d106      	bne.n	8003690 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f7fd fa4a 	bl	8000b24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2224      	movs	r2, #36	; 0x24
 8003694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	68da      	ldr	r2, [r3, #12]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f000 fc8f 	bl	8003fcc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	691a      	ldr	r2, [r3, #16]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	695a      	ldr	r2, [r3, #20]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	68da      	ldr	r2, [r3, #12]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2220      	movs	r2, #32
 80036e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2220      	movs	r2, #32
 80036f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3708      	adds	r7, #8
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}

080036fe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036fe:	b580      	push	{r7, lr}
 8003700:	b08a      	sub	sp, #40	; 0x28
 8003702:	af02      	add	r7, sp, #8
 8003704:	60f8      	str	r0, [r7, #12]
 8003706:	60b9      	str	r1, [r7, #8]
 8003708:	603b      	str	r3, [r7, #0]
 800370a:	4613      	mov	r3, r2
 800370c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800370e:	2300      	movs	r3, #0
 8003710:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003718:	b2db      	uxtb	r3, r3
 800371a:	2b20      	cmp	r3, #32
 800371c:	d17c      	bne.n	8003818 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d002      	beq.n	800372a <HAL_UART_Transmit+0x2c>
 8003724:	88fb      	ldrh	r3, [r7, #6]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d101      	bne.n	800372e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e075      	b.n	800381a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003734:	2b01      	cmp	r3, #1
 8003736:	d101      	bne.n	800373c <HAL_UART_Transmit+0x3e>
 8003738:	2302      	movs	r3, #2
 800373a:	e06e      	b.n	800381a <HAL_UART_Transmit+0x11c>
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2200      	movs	r2, #0
 8003748:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2221      	movs	r2, #33	; 0x21
 800374e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003752:	f7fe f871 	bl	8001838 <HAL_GetTick>
 8003756:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	88fa      	ldrh	r2, [r7, #6]
 800375c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	88fa      	ldrh	r2, [r7, #6]
 8003762:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800376c:	d108      	bne.n	8003780 <HAL_UART_Transmit+0x82>
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	691b      	ldr	r3, [r3, #16]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d104      	bne.n	8003780 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003776:	2300      	movs	r3, #0
 8003778:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	61bb      	str	r3, [r7, #24]
 800377e:	e003      	b.n	8003788 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003784:	2300      	movs	r3, #0
 8003786:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2200      	movs	r2, #0
 800378c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003790:	e02a      	b.n	80037e8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	9300      	str	r3, [sp, #0]
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	2200      	movs	r2, #0
 800379a:	2180      	movs	r1, #128	; 0x80
 800379c:	68f8      	ldr	r0, [r7, #12]
 800379e:	f000 fa41 	bl	8003c24 <UART_WaitOnFlagUntilTimeout>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d001      	beq.n	80037ac <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80037a8:	2303      	movs	r3, #3
 80037aa:	e036      	b.n	800381a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d10b      	bne.n	80037ca <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	881b      	ldrh	r3, [r3, #0]
 80037b6:	461a      	mov	r2, r3
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037c0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	3302      	adds	r3, #2
 80037c6:	61bb      	str	r3, [r7, #24]
 80037c8:	e007      	b.n	80037da <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	781a      	ldrb	r2, [r3, #0]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	3301      	adds	r3, #1
 80037d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037de:	b29b      	uxth	r3, r3
 80037e0:	3b01      	subs	r3, #1
 80037e2:	b29a      	uxth	r2, r3
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d1cf      	bne.n	8003792 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	9300      	str	r3, [sp, #0]
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	2200      	movs	r2, #0
 80037fa:	2140      	movs	r1, #64	; 0x40
 80037fc:	68f8      	ldr	r0, [r7, #12]
 80037fe:	f000 fa11 	bl	8003c24 <UART_WaitOnFlagUntilTimeout>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d001      	beq.n	800380c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e006      	b.n	800381a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2220      	movs	r2, #32
 8003810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003814:	2300      	movs	r3, #0
 8003816:	e000      	b.n	800381a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003818:	2302      	movs	r3, #2
  }
}
 800381a:	4618      	mov	r0, r3
 800381c:	3720      	adds	r7, #32
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}

08003822 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003822:	b580      	push	{r7, lr}
 8003824:	b084      	sub	sp, #16
 8003826:	af00      	add	r7, sp, #0
 8003828:	60f8      	str	r0, [r7, #12]
 800382a:	60b9      	str	r1, [r7, #8]
 800382c:	4613      	mov	r3, r2
 800382e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003836:	b2db      	uxtb	r3, r3
 8003838:	2b20      	cmp	r3, #32
 800383a:	d11d      	bne.n	8003878 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d002      	beq.n	8003848 <HAL_UART_Receive_IT+0x26>
 8003842:	88fb      	ldrh	r3, [r7, #6]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d101      	bne.n	800384c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e016      	b.n	800387a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003852:	2b01      	cmp	r3, #1
 8003854:	d101      	bne.n	800385a <HAL_UART_Receive_IT+0x38>
 8003856:	2302      	movs	r3, #2
 8003858:	e00f      	b.n	800387a <HAL_UART_Receive_IT+0x58>
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2201      	movs	r2, #1
 800385e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2200      	movs	r2, #0
 8003866:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003868:	88fb      	ldrh	r3, [r7, #6]
 800386a:	461a      	mov	r2, r3
 800386c:	68b9      	ldr	r1, [r7, #8]
 800386e:	68f8      	ldr	r0, [r7, #12]
 8003870:	f000 fa22 	bl	8003cb8 <UART_Start_Receive_IT>
 8003874:	4603      	mov	r3, r0
 8003876:	e000      	b.n	800387a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003878:	2302      	movs	r3, #2
  }
}
 800387a:	4618      	mov	r0, r3
 800387c:	3710      	adds	r7, #16
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
	...

08003884 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b08a      	sub	sp, #40	; 0x28
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	695b      	ldr	r3, [r3, #20]
 80038a2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80038a4:	2300      	movs	r3, #0
 80038a6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80038a8:	2300      	movs	r3, #0
 80038aa:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80038ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ae:	f003 030f 	and.w	r3, r3, #15
 80038b2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d10d      	bne.n	80038d6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80038ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038bc:	f003 0320 	and.w	r3, r3, #32
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d008      	beq.n	80038d6 <HAL_UART_IRQHandler+0x52>
 80038c4:	6a3b      	ldr	r3, [r7, #32]
 80038c6:	f003 0320 	and.w	r3, r3, #32
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d003      	beq.n	80038d6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f000 fad2 	bl	8003e78 <UART_Receive_IT>
      return;
 80038d4:	e17b      	b.n	8003bce <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	f000 80b1 	beq.w	8003a40 <HAL_UART_IRQHandler+0x1bc>
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	f003 0301 	and.w	r3, r3, #1
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d105      	bne.n	80038f4 <HAL_UART_IRQHandler+0x70>
 80038e8:	6a3b      	ldr	r3, [r7, #32]
 80038ea:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	f000 80a6 	beq.w	8003a40 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80038f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f6:	f003 0301 	and.w	r3, r3, #1
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d00a      	beq.n	8003914 <HAL_UART_IRQHandler+0x90>
 80038fe:	6a3b      	ldr	r3, [r7, #32]
 8003900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003904:	2b00      	cmp	r3, #0
 8003906:	d005      	beq.n	8003914 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390c:	f043 0201 	orr.w	r2, r3, #1
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003916:	f003 0304 	and.w	r3, r3, #4
 800391a:	2b00      	cmp	r3, #0
 800391c:	d00a      	beq.n	8003934 <HAL_UART_IRQHandler+0xb0>
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	f003 0301 	and.w	r3, r3, #1
 8003924:	2b00      	cmp	r3, #0
 8003926:	d005      	beq.n	8003934 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392c:	f043 0202 	orr.w	r2, r3, #2
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003936:	f003 0302 	and.w	r3, r3, #2
 800393a:	2b00      	cmp	r3, #0
 800393c:	d00a      	beq.n	8003954 <HAL_UART_IRQHandler+0xd0>
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	f003 0301 	and.w	r3, r3, #1
 8003944:	2b00      	cmp	r3, #0
 8003946:	d005      	beq.n	8003954 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394c:	f043 0204 	orr.w	r2, r3, #4
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003956:	f003 0308 	and.w	r3, r3, #8
 800395a:	2b00      	cmp	r3, #0
 800395c:	d00f      	beq.n	800397e <HAL_UART_IRQHandler+0xfa>
 800395e:	6a3b      	ldr	r3, [r7, #32]
 8003960:	f003 0320 	and.w	r3, r3, #32
 8003964:	2b00      	cmp	r3, #0
 8003966:	d104      	bne.n	8003972 <HAL_UART_IRQHandler+0xee>
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	f003 0301 	and.w	r3, r3, #1
 800396e:	2b00      	cmp	r3, #0
 8003970:	d005      	beq.n	800397e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003976:	f043 0208 	orr.w	r2, r3, #8
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003982:	2b00      	cmp	r3, #0
 8003984:	f000 811e 	beq.w	8003bc4 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398a:	f003 0320 	and.w	r3, r3, #32
 800398e:	2b00      	cmp	r3, #0
 8003990:	d007      	beq.n	80039a2 <HAL_UART_IRQHandler+0x11e>
 8003992:	6a3b      	ldr	r3, [r7, #32]
 8003994:	f003 0320 	and.w	r3, r3, #32
 8003998:	2b00      	cmp	r3, #0
 800399a:	d002      	beq.n	80039a2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f000 fa6b 	bl	8003e78 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	695b      	ldr	r3, [r3, #20]
 80039a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	bf14      	ite	ne
 80039b0:	2301      	movne	r3, #1
 80039b2:	2300      	moveq	r3, #0
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039bc:	f003 0308 	and.w	r3, r3, #8
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d102      	bne.n	80039ca <HAL_UART_IRQHandler+0x146>
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d031      	beq.n	8003a2e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f000 f9ad 	bl	8003d2a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	695b      	ldr	r3, [r3, #20]
 80039d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d023      	beq.n	8003a26 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	695a      	ldr	r2, [r3, #20]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039ec:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d013      	beq.n	8003a1e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039fa:	4a76      	ldr	r2, [pc, #472]	; (8003bd4 <HAL_UART_IRQHandler+0x350>)
 80039fc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a02:	4618      	mov	r0, r3
 8003a04:	f7fe f86a 	bl	8001adc <HAL_DMA_Abort_IT>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d016      	beq.n	8003a3c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a18:	4610      	mov	r0, r2
 8003a1a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a1c:	e00e      	b.n	8003a3c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 f8ec 	bl	8003bfc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a24:	e00a      	b.n	8003a3c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 f8e8 	bl	8003bfc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a2c:	e006      	b.n	8003a3c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f000 f8e4 	bl	8003bfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003a3a:	e0c3      	b.n	8003bc4 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a3c:	bf00      	nop
    return;
 8003a3e:	e0c1      	b.n	8003bc4 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	f040 80a1 	bne.w	8003b8c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4c:	f003 0310 	and.w	r3, r3, #16
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	f000 809b 	beq.w	8003b8c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003a56:	6a3b      	ldr	r3, [r7, #32]
 8003a58:	f003 0310 	and.w	r3, r3, #16
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	f000 8095 	beq.w	8003b8c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a62:	2300      	movs	r3, #0
 8003a64:	60fb      	str	r3, [r7, #12]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	60fb      	str	r3, [r7, #12]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	60fb      	str	r3, [r7, #12]
 8003a76:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	695b      	ldr	r3, [r3, #20]
 8003a7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d04e      	beq.n	8003b24 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003a90:	8a3b      	ldrh	r3, [r7, #16]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	f000 8098 	beq.w	8003bc8 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003a9c:	8a3a      	ldrh	r2, [r7, #16]
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	f080 8092 	bcs.w	8003bc8 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	8a3a      	ldrh	r2, [r7, #16]
 8003aa8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aae:	699b      	ldr	r3, [r3, #24]
 8003ab0:	2b20      	cmp	r3, #32
 8003ab2:	d02b      	beq.n	8003b0c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	68da      	ldr	r2, [r3, #12]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ac2:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	695a      	ldr	r2, [r3, #20]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f022 0201 	bic.w	r2, r2, #1
 8003ad2:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	695a      	ldr	r2, [r3, #20]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ae2:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2220      	movs	r2, #32
 8003ae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	68da      	ldr	r2, [r3, #12]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f022 0210 	bic.w	r2, r2, #16
 8003b00:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b06:	4618      	mov	r0, r3
 8003b08:	f7fd ffad 	bl	8001a66 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f000 f876 	bl	8003c0e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003b22:	e051      	b.n	8003bc8 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d047      	beq.n	8003bcc <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003b3c:	8a7b      	ldrh	r3, [r7, #18]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d044      	beq.n	8003bcc <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	68da      	ldr	r2, [r3, #12]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003b50:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	695a      	ldr	r2, [r3, #20]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f022 0201 	bic.w	r2, r2, #1
 8003b60:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2220      	movs	r2, #32
 8003b66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	68da      	ldr	r2, [r3, #12]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f022 0210 	bic.w	r2, r2, #16
 8003b7e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b80:	8a7b      	ldrh	r3, [r7, #18]
 8003b82:	4619      	mov	r1, r3
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f000 f842 	bl	8003c0e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003b8a:	e01f      	b.n	8003bcc <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d008      	beq.n	8003ba8 <HAL_UART_IRQHandler+0x324>
 8003b96:	6a3b      	ldr	r3, [r7, #32]
 8003b98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d003      	beq.n	8003ba8 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f000 f902 	bl	8003daa <UART_Transmit_IT>
    return;
 8003ba6:	e012      	b.n	8003bce <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d00d      	beq.n	8003bce <HAL_UART_IRQHandler+0x34a>
 8003bb2:	6a3b      	ldr	r3, [r7, #32]
 8003bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d008      	beq.n	8003bce <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f000 f943 	bl	8003e48 <UART_EndTransmit_IT>
    return;
 8003bc2:	e004      	b.n	8003bce <HAL_UART_IRQHandler+0x34a>
    return;
 8003bc4:	bf00      	nop
 8003bc6:	e002      	b.n	8003bce <HAL_UART_IRQHandler+0x34a>
      return;
 8003bc8:	bf00      	nop
 8003bca:	e000      	b.n	8003bce <HAL_UART_IRQHandler+0x34a>
      return;
 8003bcc:	bf00      	nop
  }
}
 8003bce:	3728      	adds	r7, #40	; 0x28
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	08003d83 	.word	0x08003d83

08003bd8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003be0:	bf00      	nop
 8003be2:	370c      	adds	r7, #12
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bc80      	pop	{r7}
 8003be8:	4770      	bx	lr

08003bea <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003bea:	b480      	push	{r7}
 8003bec:	b083      	sub	sp, #12
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003bf2:	bf00      	nop
 8003bf4:	370c      	adds	r7, #12
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bc80      	pop	{r7}
 8003bfa:	4770      	bx	lr

08003bfc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003c04:	bf00      	nop
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bc80      	pop	{r7}
 8003c0c:	4770      	bx	lr

08003c0e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c0e:	b480      	push	{r7}
 8003c10:	b083      	sub	sp, #12
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	6078      	str	r0, [r7, #4]
 8003c16:	460b      	mov	r3, r1
 8003c18:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c1a:	bf00      	nop
 8003c1c:	370c      	adds	r7, #12
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bc80      	pop	{r7}
 8003c22:	4770      	bx	lr

08003c24 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b084      	sub	sp, #16
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	60f8      	str	r0, [r7, #12]
 8003c2c:	60b9      	str	r1, [r7, #8]
 8003c2e:	603b      	str	r3, [r7, #0]
 8003c30:	4613      	mov	r3, r2
 8003c32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c34:	e02c      	b.n	8003c90 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c3c:	d028      	beq.n	8003c90 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003c3e:	69bb      	ldr	r3, [r7, #24]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d007      	beq.n	8003c54 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c44:	f7fd fdf8 	bl	8001838 <HAL_GetTick>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	69ba      	ldr	r2, [r7, #24]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d21d      	bcs.n	8003c90 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	68da      	ldr	r2, [r3, #12]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003c62:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	695a      	ldr	r2, [r3, #20]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f022 0201 	bic.w	r2, r2, #1
 8003c72:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2220      	movs	r2, #32
 8003c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2220      	movs	r2, #32
 8003c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	e00f      	b.n	8003cb0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	4013      	ands	r3, r2
 8003c9a:	68ba      	ldr	r2, [r7, #8]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	bf0c      	ite	eq
 8003ca0:	2301      	moveq	r3, #1
 8003ca2:	2300      	movne	r3, #0
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	79fb      	ldrb	r3, [r7, #7]
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d0c3      	beq.n	8003c36 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003cae:	2300      	movs	r3, #0
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3710      	adds	r7, #16
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b085      	sub	sp, #20
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	4613      	mov	r3, r2
 8003cc4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	68ba      	ldr	r2, [r7, #8]
 8003cca:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	88fa      	ldrh	r2, [r7, #6]
 8003cd0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	88fa      	ldrh	r2, [r7, #6]
 8003cd6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2222      	movs	r2, #34	; 0x22
 8003ce2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	68da      	ldr	r2, [r3, #12]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cfc:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	695a      	ldr	r2, [r3, #20]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f042 0201 	orr.w	r2, r2, #1
 8003d0c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	68da      	ldr	r2, [r3, #12]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f042 0220 	orr.w	r2, r2, #32
 8003d1c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003d1e:	2300      	movs	r3, #0
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3714      	adds	r7, #20
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bc80      	pop	{r7}
 8003d28:	4770      	bx	lr

08003d2a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d2a:	b480      	push	{r7}
 8003d2c:	b083      	sub	sp, #12
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	68da      	ldr	r2, [r3, #12]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003d40:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	695a      	ldr	r2, [r3, #20]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f022 0201 	bic.w	r2, r2, #1
 8003d50:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d107      	bne.n	8003d6a <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	68da      	ldr	r2, [r3, #12]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f022 0210 	bic.w	r2, r2, #16
 8003d68:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2220      	movs	r2, #32
 8003d6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2200      	movs	r2, #0
 8003d76:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003d78:	bf00      	nop
 8003d7a:	370c      	adds	r7, #12
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bc80      	pop	{r7}
 8003d80:	4770      	bx	lr

08003d82 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d82:	b580      	push	{r7, lr}
 8003d84:	b084      	sub	sp, #16
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2200      	movs	r2, #0
 8003d94:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d9c:	68f8      	ldr	r0, [r7, #12]
 8003d9e:	f7ff ff2d 	bl	8003bfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003da2:	bf00      	nop
 8003da4:	3710      	adds	r7, #16
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}

08003daa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003daa:	b480      	push	{r7}
 8003dac:	b085      	sub	sp, #20
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	2b21      	cmp	r3, #33	; 0x21
 8003dbc:	d13e      	bne.n	8003e3c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dc6:	d114      	bne.n	8003df2 <UART_Transmit_IT+0x48>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	691b      	ldr	r3, [r3, #16]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d110      	bne.n	8003df2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6a1b      	ldr	r3, [r3, #32]
 8003dd4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	881b      	ldrh	r3, [r3, #0]
 8003dda:	461a      	mov	r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003de4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a1b      	ldr	r3, [r3, #32]
 8003dea:	1c9a      	adds	r2, r3, #2
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	621a      	str	r2, [r3, #32]
 8003df0:	e008      	b.n	8003e04 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a1b      	ldr	r3, [r3, #32]
 8003df6:	1c59      	adds	r1, r3, #1
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	6211      	str	r1, [r2, #32]
 8003dfc:	781a      	ldrb	r2, [r3, #0]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	3b01      	subs	r3, #1
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	4619      	mov	r1, r3
 8003e12:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d10f      	bne.n	8003e38 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	68da      	ldr	r2, [r3, #12]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e26:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	68da      	ldr	r2, [r3, #12]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e36:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	e000      	b.n	8003e3e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003e3c:	2302      	movs	r3, #2
  }
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3714      	adds	r7, #20
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bc80      	pop	{r7}
 8003e46:	4770      	bx	lr

08003e48 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b082      	sub	sp, #8
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	68da      	ldr	r2, [r3, #12]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e5e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2220      	movs	r2, #32
 8003e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f7ff feb5 	bl	8003bd8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003e6e:	2300      	movs	r3, #0
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3708      	adds	r7, #8
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b086      	sub	sp, #24
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	2b22      	cmp	r3, #34	; 0x22
 8003e8a:	f040 8099 	bne.w	8003fc0 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e96:	d117      	bne.n	8003ec8 <UART_Receive_IT+0x50>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	691b      	ldr	r3, [r3, #16]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d113      	bne.n	8003ec8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea8:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003eb6:	b29a      	uxth	r2, r3
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ec0:	1c9a      	adds	r2, r3, #2
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	629a      	str	r2, [r3, #40]	; 0x28
 8003ec6:	e026      	b.n	8003f16 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ecc:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eda:	d007      	beq.n	8003eec <UART_Receive_IT+0x74>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d10a      	bne.n	8003efa <UART_Receive_IT+0x82>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	691b      	ldr	r3, [r3, #16]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d106      	bne.n	8003efa <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	b2da      	uxtb	r2, r3
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	701a      	strb	r2, [r3, #0]
 8003ef8:	e008      	b.n	8003f0c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f06:	b2da      	uxtb	r2, r3
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f10:	1c5a      	adds	r2, r3, #1
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	3b01      	subs	r3, #1
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	4619      	mov	r1, r3
 8003f24:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d148      	bne.n	8003fbc <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	68da      	ldr	r2, [r3, #12]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f022 0220 	bic.w	r2, r2, #32
 8003f38:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	68da      	ldr	r2, [r3, #12]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f48:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	695a      	ldr	r2, [r3, #20]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f022 0201 	bic.w	r2, r2, #1
 8003f58:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2220      	movs	r2, #32
 8003f5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d123      	bne.n	8003fb2 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	68da      	ldr	r2, [r3, #12]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f022 0210 	bic.w	r2, r2, #16
 8003f7e:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0310 	and.w	r3, r3, #16
 8003f8a:	2b10      	cmp	r3, #16
 8003f8c:	d10a      	bne.n	8003fa4 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f8e:	2300      	movs	r3, #0
 8003f90:	60fb      	str	r3, [r7, #12]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	60fb      	str	r3, [r7, #12]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	60fb      	str	r3, [r7, #12]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003fa8:	4619      	mov	r1, r3
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f7ff fe2f 	bl	8003c0e <HAL_UARTEx_RxEventCallback>
 8003fb0:	e002      	b.n	8003fb8 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f7ff fe19 	bl	8003bea <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	e002      	b.n	8003fc2 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	e000      	b.n	8003fc2 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003fc0:	2302      	movs	r3, #2
  }
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3718      	adds	r7, #24
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
	...

08003fcc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	68da      	ldr	r2, [r3, #12]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	430a      	orrs	r2, r1
 8003fe8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	689a      	ldr	r2, [r3, #8]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	691b      	ldr	r3, [r3, #16]
 8003ff2:	431a      	orrs	r2, r3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	695b      	ldr	r3, [r3, #20]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004006:	f023 030c 	bic.w	r3, r3, #12
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	6812      	ldr	r2, [r2, #0]
 800400e:	68b9      	ldr	r1, [r7, #8]
 8004010:	430b      	orrs	r3, r1
 8004012:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	695b      	ldr	r3, [r3, #20]
 800401a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	699a      	ldr	r2, [r3, #24]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	430a      	orrs	r2, r1
 8004028:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a2c      	ldr	r2, [pc, #176]	; (80040e0 <UART_SetConfig+0x114>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d103      	bne.n	800403c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004034:	f7fe fb86 	bl	8002744 <HAL_RCC_GetPCLK2Freq>
 8004038:	60f8      	str	r0, [r7, #12]
 800403a:	e002      	b.n	8004042 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800403c:	f7fe fb6e 	bl	800271c <HAL_RCC_GetPCLK1Freq>
 8004040:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004042:	68fa      	ldr	r2, [r7, #12]
 8004044:	4613      	mov	r3, r2
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	4413      	add	r3, r2
 800404a:	009a      	lsls	r2, r3, #2
 800404c:	441a      	add	r2, r3
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	fbb2 f3f3 	udiv	r3, r2, r3
 8004058:	4a22      	ldr	r2, [pc, #136]	; (80040e4 <UART_SetConfig+0x118>)
 800405a:	fba2 2303 	umull	r2, r3, r2, r3
 800405e:	095b      	lsrs	r3, r3, #5
 8004060:	0119      	lsls	r1, r3, #4
 8004062:	68fa      	ldr	r2, [r7, #12]
 8004064:	4613      	mov	r3, r2
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	4413      	add	r3, r2
 800406a:	009a      	lsls	r2, r3, #2
 800406c:	441a      	add	r2, r3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	fbb2 f2f3 	udiv	r2, r2, r3
 8004078:	4b1a      	ldr	r3, [pc, #104]	; (80040e4 <UART_SetConfig+0x118>)
 800407a:	fba3 0302 	umull	r0, r3, r3, r2
 800407e:	095b      	lsrs	r3, r3, #5
 8004080:	2064      	movs	r0, #100	; 0x64
 8004082:	fb00 f303 	mul.w	r3, r0, r3
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	011b      	lsls	r3, r3, #4
 800408a:	3332      	adds	r3, #50	; 0x32
 800408c:	4a15      	ldr	r2, [pc, #84]	; (80040e4 <UART_SetConfig+0x118>)
 800408e:	fba2 2303 	umull	r2, r3, r2, r3
 8004092:	095b      	lsrs	r3, r3, #5
 8004094:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004098:	4419      	add	r1, r3
 800409a:	68fa      	ldr	r2, [r7, #12]
 800409c:	4613      	mov	r3, r2
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	4413      	add	r3, r2
 80040a2:	009a      	lsls	r2, r3, #2
 80040a4:	441a      	add	r2, r3
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80040b0:	4b0c      	ldr	r3, [pc, #48]	; (80040e4 <UART_SetConfig+0x118>)
 80040b2:	fba3 0302 	umull	r0, r3, r3, r2
 80040b6:	095b      	lsrs	r3, r3, #5
 80040b8:	2064      	movs	r0, #100	; 0x64
 80040ba:	fb00 f303 	mul.w	r3, r0, r3
 80040be:	1ad3      	subs	r3, r2, r3
 80040c0:	011b      	lsls	r3, r3, #4
 80040c2:	3332      	adds	r3, #50	; 0x32
 80040c4:	4a07      	ldr	r2, [pc, #28]	; (80040e4 <UART_SetConfig+0x118>)
 80040c6:	fba2 2303 	umull	r2, r3, r2, r3
 80040ca:	095b      	lsrs	r3, r3, #5
 80040cc:	f003 020f 	and.w	r2, r3, #15
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	440a      	add	r2, r1
 80040d6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80040d8:	bf00      	nop
 80040da:	3710      	adds	r7, #16
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	40013800 	.word	0x40013800
 80040e4:	51eb851f 	.word	0x51eb851f

080040e8 <__errno>:
 80040e8:	4b01      	ldr	r3, [pc, #4]	; (80040f0 <__errno+0x8>)
 80040ea:	6818      	ldr	r0, [r3, #0]
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop
 80040f0:	20000050 	.word	0x20000050

080040f4 <__libc_init_array>:
 80040f4:	b570      	push	{r4, r5, r6, lr}
 80040f6:	2600      	movs	r6, #0
 80040f8:	4d0c      	ldr	r5, [pc, #48]	; (800412c <__libc_init_array+0x38>)
 80040fa:	4c0d      	ldr	r4, [pc, #52]	; (8004130 <__libc_init_array+0x3c>)
 80040fc:	1b64      	subs	r4, r4, r5
 80040fe:	10a4      	asrs	r4, r4, #2
 8004100:	42a6      	cmp	r6, r4
 8004102:	d109      	bne.n	8004118 <__libc_init_array+0x24>
 8004104:	f000 fc9c 	bl	8004a40 <_init>
 8004108:	2600      	movs	r6, #0
 800410a:	4d0a      	ldr	r5, [pc, #40]	; (8004134 <__libc_init_array+0x40>)
 800410c:	4c0a      	ldr	r4, [pc, #40]	; (8004138 <__libc_init_array+0x44>)
 800410e:	1b64      	subs	r4, r4, r5
 8004110:	10a4      	asrs	r4, r4, #2
 8004112:	42a6      	cmp	r6, r4
 8004114:	d105      	bne.n	8004122 <__libc_init_array+0x2e>
 8004116:	bd70      	pop	{r4, r5, r6, pc}
 8004118:	f855 3b04 	ldr.w	r3, [r5], #4
 800411c:	4798      	blx	r3
 800411e:	3601      	adds	r6, #1
 8004120:	e7ee      	b.n	8004100 <__libc_init_array+0xc>
 8004122:	f855 3b04 	ldr.w	r3, [r5], #4
 8004126:	4798      	blx	r3
 8004128:	3601      	adds	r6, #1
 800412a:	e7f2      	b.n	8004112 <__libc_init_array+0x1e>
 800412c:	08004ac0 	.word	0x08004ac0
 8004130:	08004ac0 	.word	0x08004ac0
 8004134:	08004ac0 	.word	0x08004ac0
 8004138:	08004ac4 	.word	0x08004ac4

0800413c <memset>:
 800413c:	4603      	mov	r3, r0
 800413e:	4402      	add	r2, r0
 8004140:	4293      	cmp	r3, r2
 8004142:	d100      	bne.n	8004146 <memset+0xa>
 8004144:	4770      	bx	lr
 8004146:	f803 1b01 	strb.w	r1, [r3], #1
 800414a:	e7f9      	b.n	8004140 <memset+0x4>

0800414c <siprintf>:
 800414c:	b40e      	push	{r1, r2, r3}
 800414e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004152:	b500      	push	{lr}
 8004154:	b09c      	sub	sp, #112	; 0x70
 8004156:	ab1d      	add	r3, sp, #116	; 0x74
 8004158:	9002      	str	r0, [sp, #8]
 800415a:	9006      	str	r0, [sp, #24]
 800415c:	9107      	str	r1, [sp, #28]
 800415e:	9104      	str	r1, [sp, #16]
 8004160:	4808      	ldr	r0, [pc, #32]	; (8004184 <siprintf+0x38>)
 8004162:	4909      	ldr	r1, [pc, #36]	; (8004188 <siprintf+0x3c>)
 8004164:	f853 2b04 	ldr.w	r2, [r3], #4
 8004168:	9105      	str	r1, [sp, #20]
 800416a:	6800      	ldr	r0, [r0, #0]
 800416c:	a902      	add	r1, sp, #8
 800416e:	9301      	str	r3, [sp, #4]
 8004170:	f000 f868 	bl	8004244 <_svfiprintf_r>
 8004174:	2200      	movs	r2, #0
 8004176:	9b02      	ldr	r3, [sp, #8]
 8004178:	701a      	strb	r2, [r3, #0]
 800417a:	b01c      	add	sp, #112	; 0x70
 800417c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004180:	b003      	add	sp, #12
 8004182:	4770      	bx	lr
 8004184:	20000050 	.word	0x20000050
 8004188:	ffff0208 	.word	0xffff0208

0800418c <__ssputs_r>:
 800418c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004190:	688e      	ldr	r6, [r1, #8]
 8004192:	4682      	mov	sl, r0
 8004194:	429e      	cmp	r6, r3
 8004196:	460c      	mov	r4, r1
 8004198:	4690      	mov	r8, r2
 800419a:	461f      	mov	r7, r3
 800419c:	d838      	bhi.n	8004210 <__ssputs_r+0x84>
 800419e:	898a      	ldrh	r2, [r1, #12]
 80041a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80041a4:	d032      	beq.n	800420c <__ssputs_r+0x80>
 80041a6:	6825      	ldr	r5, [r4, #0]
 80041a8:	6909      	ldr	r1, [r1, #16]
 80041aa:	3301      	adds	r3, #1
 80041ac:	eba5 0901 	sub.w	r9, r5, r1
 80041b0:	6965      	ldr	r5, [r4, #20]
 80041b2:	444b      	add	r3, r9
 80041b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80041b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80041bc:	106d      	asrs	r5, r5, #1
 80041be:	429d      	cmp	r5, r3
 80041c0:	bf38      	it	cc
 80041c2:	461d      	movcc	r5, r3
 80041c4:	0553      	lsls	r3, r2, #21
 80041c6:	d531      	bpl.n	800422c <__ssputs_r+0xa0>
 80041c8:	4629      	mov	r1, r5
 80041ca:	f000 fb6f 	bl	80048ac <_malloc_r>
 80041ce:	4606      	mov	r6, r0
 80041d0:	b950      	cbnz	r0, 80041e8 <__ssputs_r+0x5c>
 80041d2:	230c      	movs	r3, #12
 80041d4:	f04f 30ff 	mov.w	r0, #4294967295
 80041d8:	f8ca 3000 	str.w	r3, [sl]
 80041dc:	89a3      	ldrh	r3, [r4, #12]
 80041de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041e2:	81a3      	strh	r3, [r4, #12]
 80041e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041e8:	464a      	mov	r2, r9
 80041ea:	6921      	ldr	r1, [r4, #16]
 80041ec:	f000 face 	bl	800478c <memcpy>
 80041f0:	89a3      	ldrh	r3, [r4, #12]
 80041f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80041f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041fa:	81a3      	strh	r3, [r4, #12]
 80041fc:	6126      	str	r6, [r4, #16]
 80041fe:	444e      	add	r6, r9
 8004200:	6026      	str	r6, [r4, #0]
 8004202:	463e      	mov	r6, r7
 8004204:	6165      	str	r5, [r4, #20]
 8004206:	eba5 0509 	sub.w	r5, r5, r9
 800420a:	60a5      	str	r5, [r4, #8]
 800420c:	42be      	cmp	r6, r7
 800420e:	d900      	bls.n	8004212 <__ssputs_r+0x86>
 8004210:	463e      	mov	r6, r7
 8004212:	4632      	mov	r2, r6
 8004214:	4641      	mov	r1, r8
 8004216:	6820      	ldr	r0, [r4, #0]
 8004218:	f000 fac6 	bl	80047a8 <memmove>
 800421c:	68a3      	ldr	r3, [r4, #8]
 800421e:	2000      	movs	r0, #0
 8004220:	1b9b      	subs	r3, r3, r6
 8004222:	60a3      	str	r3, [r4, #8]
 8004224:	6823      	ldr	r3, [r4, #0]
 8004226:	4433      	add	r3, r6
 8004228:	6023      	str	r3, [r4, #0]
 800422a:	e7db      	b.n	80041e4 <__ssputs_r+0x58>
 800422c:	462a      	mov	r2, r5
 800422e:	f000 fbb1 	bl	8004994 <_realloc_r>
 8004232:	4606      	mov	r6, r0
 8004234:	2800      	cmp	r0, #0
 8004236:	d1e1      	bne.n	80041fc <__ssputs_r+0x70>
 8004238:	4650      	mov	r0, sl
 800423a:	6921      	ldr	r1, [r4, #16]
 800423c:	f000 face 	bl	80047dc <_free_r>
 8004240:	e7c7      	b.n	80041d2 <__ssputs_r+0x46>
	...

08004244 <_svfiprintf_r>:
 8004244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004248:	4698      	mov	r8, r3
 800424a:	898b      	ldrh	r3, [r1, #12]
 800424c:	4607      	mov	r7, r0
 800424e:	061b      	lsls	r3, r3, #24
 8004250:	460d      	mov	r5, r1
 8004252:	4614      	mov	r4, r2
 8004254:	b09d      	sub	sp, #116	; 0x74
 8004256:	d50e      	bpl.n	8004276 <_svfiprintf_r+0x32>
 8004258:	690b      	ldr	r3, [r1, #16]
 800425a:	b963      	cbnz	r3, 8004276 <_svfiprintf_r+0x32>
 800425c:	2140      	movs	r1, #64	; 0x40
 800425e:	f000 fb25 	bl	80048ac <_malloc_r>
 8004262:	6028      	str	r0, [r5, #0]
 8004264:	6128      	str	r0, [r5, #16]
 8004266:	b920      	cbnz	r0, 8004272 <_svfiprintf_r+0x2e>
 8004268:	230c      	movs	r3, #12
 800426a:	603b      	str	r3, [r7, #0]
 800426c:	f04f 30ff 	mov.w	r0, #4294967295
 8004270:	e0d1      	b.n	8004416 <_svfiprintf_r+0x1d2>
 8004272:	2340      	movs	r3, #64	; 0x40
 8004274:	616b      	str	r3, [r5, #20]
 8004276:	2300      	movs	r3, #0
 8004278:	9309      	str	r3, [sp, #36]	; 0x24
 800427a:	2320      	movs	r3, #32
 800427c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004280:	2330      	movs	r3, #48	; 0x30
 8004282:	f04f 0901 	mov.w	r9, #1
 8004286:	f8cd 800c 	str.w	r8, [sp, #12]
 800428a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004430 <_svfiprintf_r+0x1ec>
 800428e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004292:	4623      	mov	r3, r4
 8004294:	469a      	mov	sl, r3
 8004296:	f813 2b01 	ldrb.w	r2, [r3], #1
 800429a:	b10a      	cbz	r2, 80042a0 <_svfiprintf_r+0x5c>
 800429c:	2a25      	cmp	r2, #37	; 0x25
 800429e:	d1f9      	bne.n	8004294 <_svfiprintf_r+0x50>
 80042a0:	ebba 0b04 	subs.w	fp, sl, r4
 80042a4:	d00b      	beq.n	80042be <_svfiprintf_r+0x7a>
 80042a6:	465b      	mov	r3, fp
 80042a8:	4622      	mov	r2, r4
 80042aa:	4629      	mov	r1, r5
 80042ac:	4638      	mov	r0, r7
 80042ae:	f7ff ff6d 	bl	800418c <__ssputs_r>
 80042b2:	3001      	adds	r0, #1
 80042b4:	f000 80aa 	beq.w	800440c <_svfiprintf_r+0x1c8>
 80042b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80042ba:	445a      	add	r2, fp
 80042bc:	9209      	str	r2, [sp, #36]	; 0x24
 80042be:	f89a 3000 	ldrb.w	r3, [sl]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	f000 80a2 	beq.w	800440c <_svfiprintf_r+0x1c8>
 80042c8:	2300      	movs	r3, #0
 80042ca:	f04f 32ff 	mov.w	r2, #4294967295
 80042ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80042d2:	f10a 0a01 	add.w	sl, sl, #1
 80042d6:	9304      	str	r3, [sp, #16]
 80042d8:	9307      	str	r3, [sp, #28]
 80042da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80042de:	931a      	str	r3, [sp, #104]	; 0x68
 80042e0:	4654      	mov	r4, sl
 80042e2:	2205      	movs	r2, #5
 80042e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042e8:	4851      	ldr	r0, [pc, #324]	; (8004430 <_svfiprintf_r+0x1ec>)
 80042ea:	f000 fa41 	bl	8004770 <memchr>
 80042ee:	9a04      	ldr	r2, [sp, #16]
 80042f0:	b9d8      	cbnz	r0, 800432a <_svfiprintf_r+0xe6>
 80042f2:	06d0      	lsls	r0, r2, #27
 80042f4:	bf44      	itt	mi
 80042f6:	2320      	movmi	r3, #32
 80042f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80042fc:	0711      	lsls	r1, r2, #28
 80042fe:	bf44      	itt	mi
 8004300:	232b      	movmi	r3, #43	; 0x2b
 8004302:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004306:	f89a 3000 	ldrb.w	r3, [sl]
 800430a:	2b2a      	cmp	r3, #42	; 0x2a
 800430c:	d015      	beq.n	800433a <_svfiprintf_r+0xf6>
 800430e:	4654      	mov	r4, sl
 8004310:	2000      	movs	r0, #0
 8004312:	f04f 0c0a 	mov.w	ip, #10
 8004316:	9a07      	ldr	r2, [sp, #28]
 8004318:	4621      	mov	r1, r4
 800431a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800431e:	3b30      	subs	r3, #48	; 0x30
 8004320:	2b09      	cmp	r3, #9
 8004322:	d94e      	bls.n	80043c2 <_svfiprintf_r+0x17e>
 8004324:	b1b0      	cbz	r0, 8004354 <_svfiprintf_r+0x110>
 8004326:	9207      	str	r2, [sp, #28]
 8004328:	e014      	b.n	8004354 <_svfiprintf_r+0x110>
 800432a:	eba0 0308 	sub.w	r3, r0, r8
 800432e:	fa09 f303 	lsl.w	r3, r9, r3
 8004332:	4313      	orrs	r3, r2
 8004334:	46a2      	mov	sl, r4
 8004336:	9304      	str	r3, [sp, #16]
 8004338:	e7d2      	b.n	80042e0 <_svfiprintf_r+0x9c>
 800433a:	9b03      	ldr	r3, [sp, #12]
 800433c:	1d19      	adds	r1, r3, #4
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	9103      	str	r1, [sp, #12]
 8004342:	2b00      	cmp	r3, #0
 8004344:	bfbb      	ittet	lt
 8004346:	425b      	neglt	r3, r3
 8004348:	f042 0202 	orrlt.w	r2, r2, #2
 800434c:	9307      	strge	r3, [sp, #28]
 800434e:	9307      	strlt	r3, [sp, #28]
 8004350:	bfb8      	it	lt
 8004352:	9204      	strlt	r2, [sp, #16]
 8004354:	7823      	ldrb	r3, [r4, #0]
 8004356:	2b2e      	cmp	r3, #46	; 0x2e
 8004358:	d10c      	bne.n	8004374 <_svfiprintf_r+0x130>
 800435a:	7863      	ldrb	r3, [r4, #1]
 800435c:	2b2a      	cmp	r3, #42	; 0x2a
 800435e:	d135      	bne.n	80043cc <_svfiprintf_r+0x188>
 8004360:	9b03      	ldr	r3, [sp, #12]
 8004362:	3402      	adds	r4, #2
 8004364:	1d1a      	adds	r2, r3, #4
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	9203      	str	r2, [sp, #12]
 800436a:	2b00      	cmp	r3, #0
 800436c:	bfb8      	it	lt
 800436e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004372:	9305      	str	r3, [sp, #20]
 8004374:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8004434 <_svfiprintf_r+0x1f0>
 8004378:	2203      	movs	r2, #3
 800437a:	4650      	mov	r0, sl
 800437c:	7821      	ldrb	r1, [r4, #0]
 800437e:	f000 f9f7 	bl	8004770 <memchr>
 8004382:	b140      	cbz	r0, 8004396 <_svfiprintf_r+0x152>
 8004384:	2340      	movs	r3, #64	; 0x40
 8004386:	eba0 000a 	sub.w	r0, r0, sl
 800438a:	fa03 f000 	lsl.w	r0, r3, r0
 800438e:	9b04      	ldr	r3, [sp, #16]
 8004390:	3401      	adds	r4, #1
 8004392:	4303      	orrs	r3, r0
 8004394:	9304      	str	r3, [sp, #16]
 8004396:	f814 1b01 	ldrb.w	r1, [r4], #1
 800439a:	2206      	movs	r2, #6
 800439c:	4826      	ldr	r0, [pc, #152]	; (8004438 <_svfiprintf_r+0x1f4>)
 800439e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80043a2:	f000 f9e5 	bl	8004770 <memchr>
 80043a6:	2800      	cmp	r0, #0
 80043a8:	d038      	beq.n	800441c <_svfiprintf_r+0x1d8>
 80043aa:	4b24      	ldr	r3, [pc, #144]	; (800443c <_svfiprintf_r+0x1f8>)
 80043ac:	bb1b      	cbnz	r3, 80043f6 <_svfiprintf_r+0x1b2>
 80043ae:	9b03      	ldr	r3, [sp, #12]
 80043b0:	3307      	adds	r3, #7
 80043b2:	f023 0307 	bic.w	r3, r3, #7
 80043b6:	3308      	adds	r3, #8
 80043b8:	9303      	str	r3, [sp, #12]
 80043ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043bc:	4433      	add	r3, r6
 80043be:	9309      	str	r3, [sp, #36]	; 0x24
 80043c0:	e767      	b.n	8004292 <_svfiprintf_r+0x4e>
 80043c2:	460c      	mov	r4, r1
 80043c4:	2001      	movs	r0, #1
 80043c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80043ca:	e7a5      	b.n	8004318 <_svfiprintf_r+0xd4>
 80043cc:	2300      	movs	r3, #0
 80043ce:	f04f 0c0a 	mov.w	ip, #10
 80043d2:	4619      	mov	r1, r3
 80043d4:	3401      	adds	r4, #1
 80043d6:	9305      	str	r3, [sp, #20]
 80043d8:	4620      	mov	r0, r4
 80043da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80043de:	3a30      	subs	r2, #48	; 0x30
 80043e0:	2a09      	cmp	r2, #9
 80043e2:	d903      	bls.n	80043ec <_svfiprintf_r+0x1a8>
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d0c5      	beq.n	8004374 <_svfiprintf_r+0x130>
 80043e8:	9105      	str	r1, [sp, #20]
 80043ea:	e7c3      	b.n	8004374 <_svfiprintf_r+0x130>
 80043ec:	4604      	mov	r4, r0
 80043ee:	2301      	movs	r3, #1
 80043f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80043f4:	e7f0      	b.n	80043d8 <_svfiprintf_r+0x194>
 80043f6:	ab03      	add	r3, sp, #12
 80043f8:	9300      	str	r3, [sp, #0]
 80043fa:	462a      	mov	r2, r5
 80043fc:	4638      	mov	r0, r7
 80043fe:	4b10      	ldr	r3, [pc, #64]	; (8004440 <_svfiprintf_r+0x1fc>)
 8004400:	a904      	add	r1, sp, #16
 8004402:	f3af 8000 	nop.w
 8004406:	1c42      	adds	r2, r0, #1
 8004408:	4606      	mov	r6, r0
 800440a:	d1d6      	bne.n	80043ba <_svfiprintf_r+0x176>
 800440c:	89ab      	ldrh	r3, [r5, #12]
 800440e:	065b      	lsls	r3, r3, #25
 8004410:	f53f af2c 	bmi.w	800426c <_svfiprintf_r+0x28>
 8004414:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004416:	b01d      	add	sp, #116	; 0x74
 8004418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800441c:	ab03      	add	r3, sp, #12
 800441e:	9300      	str	r3, [sp, #0]
 8004420:	462a      	mov	r2, r5
 8004422:	4638      	mov	r0, r7
 8004424:	4b06      	ldr	r3, [pc, #24]	; (8004440 <_svfiprintf_r+0x1fc>)
 8004426:	a904      	add	r1, sp, #16
 8004428:	f000 f87c 	bl	8004524 <_printf_i>
 800442c:	e7eb      	b.n	8004406 <_svfiprintf_r+0x1c2>
 800442e:	bf00      	nop
 8004430:	08004a8c 	.word	0x08004a8c
 8004434:	08004a92 	.word	0x08004a92
 8004438:	08004a96 	.word	0x08004a96
 800443c:	00000000 	.word	0x00000000
 8004440:	0800418d 	.word	0x0800418d

08004444 <_printf_common>:
 8004444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004448:	4616      	mov	r6, r2
 800444a:	4699      	mov	r9, r3
 800444c:	688a      	ldr	r2, [r1, #8]
 800444e:	690b      	ldr	r3, [r1, #16]
 8004450:	4607      	mov	r7, r0
 8004452:	4293      	cmp	r3, r2
 8004454:	bfb8      	it	lt
 8004456:	4613      	movlt	r3, r2
 8004458:	6033      	str	r3, [r6, #0]
 800445a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800445e:	460c      	mov	r4, r1
 8004460:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004464:	b10a      	cbz	r2, 800446a <_printf_common+0x26>
 8004466:	3301      	adds	r3, #1
 8004468:	6033      	str	r3, [r6, #0]
 800446a:	6823      	ldr	r3, [r4, #0]
 800446c:	0699      	lsls	r1, r3, #26
 800446e:	bf42      	ittt	mi
 8004470:	6833      	ldrmi	r3, [r6, #0]
 8004472:	3302      	addmi	r3, #2
 8004474:	6033      	strmi	r3, [r6, #0]
 8004476:	6825      	ldr	r5, [r4, #0]
 8004478:	f015 0506 	ands.w	r5, r5, #6
 800447c:	d106      	bne.n	800448c <_printf_common+0x48>
 800447e:	f104 0a19 	add.w	sl, r4, #25
 8004482:	68e3      	ldr	r3, [r4, #12]
 8004484:	6832      	ldr	r2, [r6, #0]
 8004486:	1a9b      	subs	r3, r3, r2
 8004488:	42ab      	cmp	r3, r5
 800448a:	dc28      	bgt.n	80044de <_printf_common+0x9a>
 800448c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004490:	1e13      	subs	r3, r2, #0
 8004492:	6822      	ldr	r2, [r4, #0]
 8004494:	bf18      	it	ne
 8004496:	2301      	movne	r3, #1
 8004498:	0692      	lsls	r2, r2, #26
 800449a:	d42d      	bmi.n	80044f8 <_printf_common+0xb4>
 800449c:	4649      	mov	r1, r9
 800449e:	4638      	mov	r0, r7
 80044a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80044a4:	47c0      	blx	r8
 80044a6:	3001      	adds	r0, #1
 80044a8:	d020      	beq.n	80044ec <_printf_common+0xa8>
 80044aa:	6823      	ldr	r3, [r4, #0]
 80044ac:	68e5      	ldr	r5, [r4, #12]
 80044ae:	f003 0306 	and.w	r3, r3, #6
 80044b2:	2b04      	cmp	r3, #4
 80044b4:	bf18      	it	ne
 80044b6:	2500      	movne	r5, #0
 80044b8:	6832      	ldr	r2, [r6, #0]
 80044ba:	f04f 0600 	mov.w	r6, #0
 80044be:	68a3      	ldr	r3, [r4, #8]
 80044c0:	bf08      	it	eq
 80044c2:	1aad      	subeq	r5, r5, r2
 80044c4:	6922      	ldr	r2, [r4, #16]
 80044c6:	bf08      	it	eq
 80044c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80044cc:	4293      	cmp	r3, r2
 80044ce:	bfc4      	itt	gt
 80044d0:	1a9b      	subgt	r3, r3, r2
 80044d2:	18ed      	addgt	r5, r5, r3
 80044d4:	341a      	adds	r4, #26
 80044d6:	42b5      	cmp	r5, r6
 80044d8:	d11a      	bne.n	8004510 <_printf_common+0xcc>
 80044da:	2000      	movs	r0, #0
 80044dc:	e008      	b.n	80044f0 <_printf_common+0xac>
 80044de:	2301      	movs	r3, #1
 80044e0:	4652      	mov	r2, sl
 80044e2:	4649      	mov	r1, r9
 80044e4:	4638      	mov	r0, r7
 80044e6:	47c0      	blx	r8
 80044e8:	3001      	adds	r0, #1
 80044ea:	d103      	bne.n	80044f4 <_printf_common+0xb0>
 80044ec:	f04f 30ff 	mov.w	r0, #4294967295
 80044f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044f4:	3501      	adds	r5, #1
 80044f6:	e7c4      	b.n	8004482 <_printf_common+0x3e>
 80044f8:	2030      	movs	r0, #48	; 0x30
 80044fa:	18e1      	adds	r1, r4, r3
 80044fc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004500:	1c5a      	adds	r2, r3, #1
 8004502:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004506:	4422      	add	r2, r4
 8004508:	3302      	adds	r3, #2
 800450a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800450e:	e7c5      	b.n	800449c <_printf_common+0x58>
 8004510:	2301      	movs	r3, #1
 8004512:	4622      	mov	r2, r4
 8004514:	4649      	mov	r1, r9
 8004516:	4638      	mov	r0, r7
 8004518:	47c0      	blx	r8
 800451a:	3001      	adds	r0, #1
 800451c:	d0e6      	beq.n	80044ec <_printf_common+0xa8>
 800451e:	3601      	adds	r6, #1
 8004520:	e7d9      	b.n	80044d6 <_printf_common+0x92>
	...

08004524 <_printf_i>:
 8004524:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004528:	7e0f      	ldrb	r7, [r1, #24]
 800452a:	4691      	mov	r9, r2
 800452c:	2f78      	cmp	r7, #120	; 0x78
 800452e:	4680      	mov	r8, r0
 8004530:	460c      	mov	r4, r1
 8004532:	469a      	mov	sl, r3
 8004534:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004536:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800453a:	d807      	bhi.n	800454c <_printf_i+0x28>
 800453c:	2f62      	cmp	r7, #98	; 0x62
 800453e:	d80a      	bhi.n	8004556 <_printf_i+0x32>
 8004540:	2f00      	cmp	r7, #0
 8004542:	f000 80d9 	beq.w	80046f8 <_printf_i+0x1d4>
 8004546:	2f58      	cmp	r7, #88	; 0x58
 8004548:	f000 80a4 	beq.w	8004694 <_printf_i+0x170>
 800454c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004550:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004554:	e03a      	b.n	80045cc <_printf_i+0xa8>
 8004556:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800455a:	2b15      	cmp	r3, #21
 800455c:	d8f6      	bhi.n	800454c <_printf_i+0x28>
 800455e:	a101      	add	r1, pc, #4	; (adr r1, 8004564 <_printf_i+0x40>)
 8004560:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004564:	080045bd 	.word	0x080045bd
 8004568:	080045d1 	.word	0x080045d1
 800456c:	0800454d 	.word	0x0800454d
 8004570:	0800454d 	.word	0x0800454d
 8004574:	0800454d 	.word	0x0800454d
 8004578:	0800454d 	.word	0x0800454d
 800457c:	080045d1 	.word	0x080045d1
 8004580:	0800454d 	.word	0x0800454d
 8004584:	0800454d 	.word	0x0800454d
 8004588:	0800454d 	.word	0x0800454d
 800458c:	0800454d 	.word	0x0800454d
 8004590:	080046df 	.word	0x080046df
 8004594:	08004601 	.word	0x08004601
 8004598:	080046c1 	.word	0x080046c1
 800459c:	0800454d 	.word	0x0800454d
 80045a0:	0800454d 	.word	0x0800454d
 80045a4:	08004701 	.word	0x08004701
 80045a8:	0800454d 	.word	0x0800454d
 80045ac:	08004601 	.word	0x08004601
 80045b0:	0800454d 	.word	0x0800454d
 80045b4:	0800454d 	.word	0x0800454d
 80045b8:	080046c9 	.word	0x080046c9
 80045bc:	682b      	ldr	r3, [r5, #0]
 80045be:	1d1a      	adds	r2, r3, #4
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	602a      	str	r2, [r5, #0]
 80045c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80045c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80045cc:	2301      	movs	r3, #1
 80045ce:	e0a4      	b.n	800471a <_printf_i+0x1f6>
 80045d0:	6820      	ldr	r0, [r4, #0]
 80045d2:	6829      	ldr	r1, [r5, #0]
 80045d4:	0606      	lsls	r6, r0, #24
 80045d6:	f101 0304 	add.w	r3, r1, #4
 80045da:	d50a      	bpl.n	80045f2 <_printf_i+0xce>
 80045dc:	680e      	ldr	r6, [r1, #0]
 80045de:	602b      	str	r3, [r5, #0]
 80045e0:	2e00      	cmp	r6, #0
 80045e2:	da03      	bge.n	80045ec <_printf_i+0xc8>
 80045e4:	232d      	movs	r3, #45	; 0x2d
 80045e6:	4276      	negs	r6, r6
 80045e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045ec:	230a      	movs	r3, #10
 80045ee:	485e      	ldr	r0, [pc, #376]	; (8004768 <_printf_i+0x244>)
 80045f0:	e019      	b.n	8004626 <_printf_i+0x102>
 80045f2:	680e      	ldr	r6, [r1, #0]
 80045f4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80045f8:	602b      	str	r3, [r5, #0]
 80045fa:	bf18      	it	ne
 80045fc:	b236      	sxthne	r6, r6
 80045fe:	e7ef      	b.n	80045e0 <_printf_i+0xbc>
 8004600:	682b      	ldr	r3, [r5, #0]
 8004602:	6820      	ldr	r0, [r4, #0]
 8004604:	1d19      	adds	r1, r3, #4
 8004606:	6029      	str	r1, [r5, #0]
 8004608:	0601      	lsls	r1, r0, #24
 800460a:	d501      	bpl.n	8004610 <_printf_i+0xec>
 800460c:	681e      	ldr	r6, [r3, #0]
 800460e:	e002      	b.n	8004616 <_printf_i+0xf2>
 8004610:	0646      	lsls	r6, r0, #25
 8004612:	d5fb      	bpl.n	800460c <_printf_i+0xe8>
 8004614:	881e      	ldrh	r6, [r3, #0]
 8004616:	2f6f      	cmp	r7, #111	; 0x6f
 8004618:	bf0c      	ite	eq
 800461a:	2308      	moveq	r3, #8
 800461c:	230a      	movne	r3, #10
 800461e:	4852      	ldr	r0, [pc, #328]	; (8004768 <_printf_i+0x244>)
 8004620:	2100      	movs	r1, #0
 8004622:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004626:	6865      	ldr	r5, [r4, #4]
 8004628:	2d00      	cmp	r5, #0
 800462a:	bfa8      	it	ge
 800462c:	6821      	ldrge	r1, [r4, #0]
 800462e:	60a5      	str	r5, [r4, #8]
 8004630:	bfa4      	itt	ge
 8004632:	f021 0104 	bicge.w	r1, r1, #4
 8004636:	6021      	strge	r1, [r4, #0]
 8004638:	b90e      	cbnz	r6, 800463e <_printf_i+0x11a>
 800463a:	2d00      	cmp	r5, #0
 800463c:	d04d      	beq.n	80046da <_printf_i+0x1b6>
 800463e:	4615      	mov	r5, r2
 8004640:	fbb6 f1f3 	udiv	r1, r6, r3
 8004644:	fb03 6711 	mls	r7, r3, r1, r6
 8004648:	5dc7      	ldrb	r7, [r0, r7]
 800464a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800464e:	4637      	mov	r7, r6
 8004650:	42bb      	cmp	r3, r7
 8004652:	460e      	mov	r6, r1
 8004654:	d9f4      	bls.n	8004640 <_printf_i+0x11c>
 8004656:	2b08      	cmp	r3, #8
 8004658:	d10b      	bne.n	8004672 <_printf_i+0x14e>
 800465a:	6823      	ldr	r3, [r4, #0]
 800465c:	07de      	lsls	r6, r3, #31
 800465e:	d508      	bpl.n	8004672 <_printf_i+0x14e>
 8004660:	6923      	ldr	r3, [r4, #16]
 8004662:	6861      	ldr	r1, [r4, #4]
 8004664:	4299      	cmp	r1, r3
 8004666:	bfde      	ittt	le
 8004668:	2330      	movle	r3, #48	; 0x30
 800466a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800466e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004672:	1b52      	subs	r2, r2, r5
 8004674:	6122      	str	r2, [r4, #16]
 8004676:	464b      	mov	r3, r9
 8004678:	4621      	mov	r1, r4
 800467a:	4640      	mov	r0, r8
 800467c:	f8cd a000 	str.w	sl, [sp]
 8004680:	aa03      	add	r2, sp, #12
 8004682:	f7ff fedf 	bl	8004444 <_printf_common>
 8004686:	3001      	adds	r0, #1
 8004688:	d14c      	bne.n	8004724 <_printf_i+0x200>
 800468a:	f04f 30ff 	mov.w	r0, #4294967295
 800468e:	b004      	add	sp, #16
 8004690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004694:	4834      	ldr	r0, [pc, #208]	; (8004768 <_printf_i+0x244>)
 8004696:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800469a:	6829      	ldr	r1, [r5, #0]
 800469c:	6823      	ldr	r3, [r4, #0]
 800469e:	f851 6b04 	ldr.w	r6, [r1], #4
 80046a2:	6029      	str	r1, [r5, #0]
 80046a4:	061d      	lsls	r5, r3, #24
 80046a6:	d514      	bpl.n	80046d2 <_printf_i+0x1ae>
 80046a8:	07df      	lsls	r7, r3, #31
 80046aa:	bf44      	itt	mi
 80046ac:	f043 0320 	orrmi.w	r3, r3, #32
 80046b0:	6023      	strmi	r3, [r4, #0]
 80046b2:	b91e      	cbnz	r6, 80046bc <_printf_i+0x198>
 80046b4:	6823      	ldr	r3, [r4, #0]
 80046b6:	f023 0320 	bic.w	r3, r3, #32
 80046ba:	6023      	str	r3, [r4, #0]
 80046bc:	2310      	movs	r3, #16
 80046be:	e7af      	b.n	8004620 <_printf_i+0xfc>
 80046c0:	6823      	ldr	r3, [r4, #0]
 80046c2:	f043 0320 	orr.w	r3, r3, #32
 80046c6:	6023      	str	r3, [r4, #0]
 80046c8:	2378      	movs	r3, #120	; 0x78
 80046ca:	4828      	ldr	r0, [pc, #160]	; (800476c <_printf_i+0x248>)
 80046cc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80046d0:	e7e3      	b.n	800469a <_printf_i+0x176>
 80046d2:	0659      	lsls	r1, r3, #25
 80046d4:	bf48      	it	mi
 80046d6:	b2b6      	uxthmi	r6, r6
 80046d8:	e7e6      	b.n	80046a8 <_printf_i+0x184>
 80046da:	4615      	mov	r5, r2
 80046dc:	e7bb      	b.n	8004656 <_printf_i+0x132>
 80046de:	682b      	ldr	r3, [r5, #0]
 80046e0:	6826      	ldr	r6, [r4, #0]
 80046e2:	1d18      	adds	r0, r3, #4
 80046e4:	6961      	ldr	r1, [r4, #20]
 80046e6:	6028      	str	r0, [r5, #0]
 80046e8:	0635      	lsls	r5, r6, #24
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	d501      	bpl.n	80046f2 <_printf_i+0x1ce>
 80046ee:	6019      	str	r1, [r3, #0]
 80046f0:	e002      	b.n	80046f8 <_printf_i+0x1d4>
 80046f2:	0670      	lsls	r0, r6, #25
 80046f4:	d5fb      	bpl.n	80046ee <_printf_i+0x1ca>
 80046f6:	8019      	strh	r1, [r3, #0]
 80046f8:	2300      	movs	r3, #0
 80046fa:	4615      	mov	r5, r2
 80046fc:	6123      	str	r3, [r4, #16]
 80046fe:	e7ba      	b.n	8004676 <_printf_i+0x152>
 8004700:	682b      	ldr	r3, [r5, #0]
 8004702:	2100      	movs	r1, #0
 8004704:	1d1a      	adds	r2, r3, #4
 8004706:	602a      	str	r2, [r5, #0]
 8004708:	681d      	ldr	r5, [r3, #0]
 800470a:	6862      	ldr	r2, [r4, #4]
 800470c:	4628      	mov	r0, r5
 800470e:	f000 f82f 	bl	8004770 <memchr>
 8004712:	b108      	cbz	r0, 8004718 <_printf_i+0x1f4>
 8004714:	1b40      	subs	r0, r0, r5
 8004716:	6060      	str	r0, [r4, #4]
 8004718:	6863      	ldr	r3, [r4, #4]
 800471a:	6123      	str	r3, [r4, #16]
 800471c:	2300      	movs	r3, #0
 800471e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004722:	e7a8      	b.n	8004676 <_printf_i+0x152>
 8004724:	462a      	mov	r2, r5
 8004726:	4649      	mov	r1, r9
 8004728:	4640      	mov	r0, r8
 800472a:	6923      	ldr	r3, [r4, #16]
 800472c:	47d0      	blx	sl
 800472e:	3001      	adds	r0, #1
 8004730:	d0ab      	beq.n	800468a <_printf_i+0x166>
 8004732:	6823      	ldr	r3, [r4, #0]
 8004734:	079b      	lsls	r3, r3, #30
 8004736:	d413      	bmi.n	8004760 <_printf_i+0x23c>
 8004738:	68e0      	ldr	r0, [r4, #12]
 800473a:	9b03      	ldr	r3, [sp, #12]
 800473c:	4298      	cmp	r0, r3
 800473e:	bfb8      	it	lt
 8004740:	4618      	movlt	r0, r3
 8004742:	e7a4      	b.n	800468e <_printf_i+0x16a>
 8004744:	2301      	movs	r3, #1
 8004746:	4632      	mov	r2, r6
 8004748:	4649      	mov	r1, r9
 800474a:	4640      	mov	r0, r8
 800474c:	47d0      	blx	sl
 800474e:	3001      	adds	r0, #1
 8004750:	d09b      	beq.n	800468a <_printf_i+0x166>
 8004752:	3501      	adds	r5, #1
 8004754:	68e3      	ldr	r3, [r4, #12]
 8004756:	9903      	ldr	r1, [sp, #12]
 8004758:	1a5b      	subs	r3, r3, r1
 800475a:	42ab      	cmp	r3, r5
 800475c:	dcf2      	bgt.n	8004744 <_printf_i+0x220>
 800475e:	e7eb      	b.n	8004738 <_printf_i+0x214>
 8004760:	2500      	movs	r5, #0
 8004762:	f104 0619 	add.w	r6, r4, #25
 8004766:	e7f5      	b.n	8004754 <_printf_i+0x230>
 8004768:	08004a9d 	.word	0x08004a9d
 800476c:	08004aae 	.word	0x08004aae

08004770 <memchr>:
 8004770:	4603      	mov	r3, r0
 8004772:	b510      	push	{r4, lr}
 8004774:	b2c9      	uxtb	r1, r1
 8004776:	4402      	add	r2, r0
 8004778:	4293      	cmp	r3, r2
 800477a:	4618      	mov	r0, r3
 800477c:	d101      	bne.n	8004782 <memchr+0x12>
 800477e:	2000      	movs	r0, #0
 8004780:	e003      	b.n	800478a <memchr+0x1a>
 8004782:	7804      	ldrb	r4, [r0, #0]
 8004784:	3301      	adds	r3, #1
 8004786:	428c      	cmp	r4, r1
 8004788:	d1f6      	bne.n	8004778 <memchr+0x8>
 800478a:	bd10      	pop	{r4, pc}

0800478c <memcpy>:
 800478c:	440a      	add	r2, r1
 800478e:	4291      	cmp	r1, r2
 8004790:	f100 33ff 	add.w	r3, r0, #4294967295
 8004794:	d100      	bne.n	8004798 <memcpy+0xc>
 8004796:	4770      	bx	lr
 8004798:	b510      	push	{r4, lr}
 800479a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800479e:	4291      	cmp	r1, r2
 80047a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80047a4:	d1f9      	bne.n	800479a <memcpy+0xe>
 80047a6:	bd10      	pop	{r4, pc}

080047a8 <memmove>:
 80047a8:	4288      	cmp	r0, r1
 80047aa:	b510      	push	{r4, lr}
 80047ac:	eb01 0402 	add.w	r4, r1, r2
 80047b0:	d902      	bls.n	80047b8 <memmove+0x10>
 80047b2:	4284      	cmp	r4, r0
 80047b4:	4623      	mov	r3, r4
 80047b6:	d807      	bhi.n	80047c8 <memmove+0x20>
 80047b8:	1e43      	subs	r3, r0, #1
 80047ba:	42a1      	cmp	r1, r4
 80047bc:	d008      	beq.n	80047d0 <memmove+0x28>
 80047be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80047c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80047c6:	e7f8      	b.n	80047ba <memmove+0x12>
 80047c8:	4601      	mov	r1, r0
 80047ca:	4402      	add	r2, r0
 80047cc:	428a      	cmp	r2, r1
 80047ce:	d100      	bne.n	80047d2 <memmove+0x2a>
 80047d0:	bd10      	pop	{r4, pc}
 80047d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80047d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80047da:	e7f7      	b.n	80047cc <memmove+0x24>

080047dc <_free_r>:
 80047dc:	b538      	push	{r3, r4, r5, lr}
 80047de:	4605      	mov	r5, r0
 80047e0:	2900      	cmp	r1, #0
 80047e2:	d040      	beq.n	8004866 <_free_r+0x8a>
 80047e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047e8:	1f0c      	subs	r4, r1, #4
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	bfb8      	it	lt
 80047ee:	18e4      	addlt	r4, r4, r3
 80047f0:	f000 f910 	bl	8004a14 <__malloc_lock>
 80047f4:	4a1c      	ldr	r2, [pc, #112]	; (8004868 <_free_r+0x8c>)
 80047f6:	6813      	ldr	r3, [r2, #0]
 80047f8:	b933      	cbnz	r3, 8004808 <_free_r+0x2c>
 80047fa:	6063      	str	r3, [r4, #4]
 80047fc:	6014      	str	r4, [r2, #0]
 80047fe:	4628      	mov	r0, r5
 8004800:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004804:	f000 b90c 	b.w	8004a20 <__malloc_unlock>
 8004808:	42a3      	cmp	r3, r4
 800480a:	d908      	bls.n	800481e <_free_r+0x42>
 800480c:	6820      	ldr	r0, [r4, #0]
 800480e:	1821      	adds	r1, r4, r0
 8004810:	428b      	cmp	r3, r1
 8004812:	bf01      	itttt	eq
 8004814:	6819      	ldreq	r1, [r3, #0]
 8004816:	685b      	ldreq	r3, [r3, #4]
 8004818:	1809      	addeq	r1, r1, r0
 800481a:	6021      	streq	r1, [r4, #0]
 800481c:	e7ed      	b.n	80047fa <_free_r+0x1e>
 800481e:	461a      	mov	r2, r3
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	b10b      	cbz	r3, 8004828 <_free_r+0x4c>
 8004824:	42a3      	cmp	r3, r4
 8004826:	d9fa      	bls.n	800481e <_free_r+0x42>
 8004828:	6811      	ldr	r1, [r2, #0]
 800482a:	1850      	adds	r0, r2, r1
 800482c:	42a0      	cmp	r0, r4
 800482e:	d10b      	bne.n	8004848 <_free_r+0x6c>
 8004830:	6820      	ldr	r0, [r4, #0]
 8004832:	4401      	add	r1, r0
 8004834:	1850      	adds	r0, r2, r1
 8004836:	4283      	cmp	r3, r0
 8004838:	6011      	str	r1, [r2, #0]
 800483a:	d1e0      	bne.n	80047fe <_free_r+0x22>
 800483c:	6818      	ldr	r0, [r3, #0]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	4401      	add	r1, r0
 8004842:	6011      	str	r1, [r2, #0]
 8004844:	6053      	str	r3, [r2, #4]
 8004846:	e7da      	b.n	80047fe <_free_r+0x22>
 8004848:	d902      	bls.n	8004850 <_free_r+0x74>
 800484a:	230c      	movs	r3, #12
 800484c:	602b      	str	r3, [r5, #0]
 800484e:	e7d6      	b.n	80047fe <_free_r+0x22>
 8004850:	6820      	ldr	r0, [r4, #0]
 8004852:	1821      	adds	r1, r4, r0
 8004854:	428b      	cmp	r3, r1
 8004856:	bf01      	itttt	eq
 8004858:	6819      	ldreq	r1, [r3, #0]
 800485a:	685b      	ldreq	r3, [r3, #4]
 800485c:	1809      	addeq	r1, r1, r0
 800485e:	6021      	streq	r1, [r4, #0]
 8004860:	6063      	str	r3, [r4, #4]
 8004862:	6054      	str	r4, [r2, #4]
 8004864:	e7cb      	b.n	80047fe <_free_r+0x22>
 8004866:	bd38      	pop	{r3, r4, r5, pc}
 8004868:	20000510 	.word	0x20000510

0800486c <sbrk_aligned>:
 800486c:	b570      	push	{r4, r5, r6, lr}
 800486e:	4e0e      	ldr	r6, [pc, #56]	; (80048a8 <sbrk_aligned+0x3c>)
 8004870:	460c      	mov	r4, r1
 8004872:	6831      	ldr	r1, [r6, #0]
 8004874:	4605      	mov	r5, r0
 8004876:	b911      	cbnz	r1, 800487e <sbrk_aligned+0x12>
 8004878:	f000 f8bc 	bl	80049f4 <_sbrk_r>
 800487c:	6030      	str	r0, [r6, #0]
 800487e:	4621      	mov	r1, r4
 8004880:	4628      	mov	r0, r5
 8004882:	f000 f8b7 	bl	80049f4 <_sbrk_r>
 8004886:	1c43      	adds	r3, r0, #1
 8004888:	d00a      	beq.n	80048a0 <sbrk_aligned+0x34>
 800488a:	1cc4      	adds	r4, r0, #3
 800488c:	f024 0403 	bic.w	r4, r4, #3
 8004890:	42a0      	cmp	r0, r4
 8004892:	d007      	beq.n	80048a4 <sbrk_aligned+0x38>
 8004894:	1a21      	subs	r1, r4, r0
 8004896:	4628      	mov	r0, r5
 8004898:	f000 f8ac 	bl	80049f4 <_sbrk_r>
 800489c:	3001      	adds	r0, #1
 800489e:	d101      	bne.n	80048a4 <sbrk_aligned+0x38>
 80048a0:	f04f 34ff 	mov.w	r4, #4294967295
 80048a4:	4620      	mov	r0, r4
 80048a6:	bd70      	pop	{r4, r5, r6, pc}
 80048a8:	20000514 	.word	0x20000514

080048ac <_malloc_r>:
 80048ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048b0:	1ccd      	adds	r5, r1, #3
 80048b2:	f025 0503 	bic.w	r5, r5, #3
 80048b6:	3508      	adds	r5, #8
 80048b8:	2d0c      	cmp	r5, #12
 80048ba:	bf38      	it	cc
 80048bc:	250c      	movcc	r5, #12
 80048be:	2d00      	cmp	r5, #0
 80048c0:	4607      	mov	r7, r0
 80048c2:	db01      	blt.n	80048c8 <_malloc_r+0x1c>
 80048c4:	42a9      	cmp	r1, r5
 80048c6:	d905      	bls.n	80048d4 <_malloc_r+0x28>
 80048c8:	230c      	movs	r3, #12
 80048ca:	2600      	movs	r6, #0
 80048cc:	603b      	str	r3, [r7, #0]
 80048ce:	4630      	mov	r0, r6
 80048d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048d4:	4e2e      	ldr	r6, [pc, #184]	; (8004990 <_malloc_r+0xe4>)
 80048d6:	f000 f89d 	bl	8004a14 <__malloc_lock>
 80048da:	6833      	ldr	r3, [r6, #0]
 80048dc:	461c      	mov	r4, r3
 80048de:	bb34      	cbnz	r4, 800492e <_malloc_r+0x82>
 80048e0:	4629      	mov	r1, r5
 80048e2:	4638      	mov	r0, r7
 80048e4:	f7ff ffc2 	bl	800486c <sbrk_aligned>
 80048e8:	1c43      	adds	r3, r0, #1
 80048ea:	4604      	mov	r4, r0
 80048ec:	d14d      	bne.n	800498a <_malloc_r+0xde>
 80048ee:	6834      	ldr	r4, [r6, #0]
 80048f0:	4626      	mov	r6, r4
 80048f2:	2e00      	cmp	r6, #0
 80048f4:	d140      	bne.n	8004978 <_malloc_r+0xcc>
 80048f6:	6823      	ldr	r3, [r4, #0]
 80048f8:	4631      	mov	r1, r6
 80048fa:	4638      	mov	r0, r7
 80048fc:	eb04 0803 	add.w	r8, r4, r3
 8004900:	f000 f878 	bl	80049f4 <_sbrk_r>
 8004904:	4580      	cmp	r8, r0
 8004906:	d13a      	bne.n	800497e <_malloc_r+0xd2>
 8004908:	6821      	ldr	r1, [r4, #0]
 800490a:	3503      	adds	r5, #3
 800490c:	1a6d      	subs	r5, r5, r1
 800490e:	f025 0503 	bic.w	r5, r5, #3
 8004912:	3508      	adds	r5, #8
 8004914:	2d0c      	cmp	r5, #12
 8004916:	bf38      	it	cc
 8004918:	250c      	movcc	r5, #12
 800491a:	4638      	mov	r0, r7
 800491c:	4629      	mov	r1, r5
 800491e:	f7ff ffa5 	bl	800486c <sbrk_aligned>
 8004922:	3001      	adds	r0, #1
 8004924:	d02b      	beq.n	800497e <_malloc_r+0xd2>
 8004926:	6823      	ldr	r3, [r4, #0]
 8004928:	442b      	add	r3, r5
 800492a:	6023      	str	r3, [r4, #0]
 800492c:	e00e      	b.n	800494c <_malloc_r+0xa0>
 800492e:	6822      	ldr	r2, [r4, #0]
 8004930:	1b52      	subs	r2, r2, r5
 8004932:	d41e      	bmi.n	8004972 <_malloc_r+0xc6>
 8004934:	2a0b      	cmp	r2, #11
 8004936:	d916      	bls.n	8004966 <_malloc_r+0xba>
 8004938:	1961      	adds	r1, r4, r5
 800493a:	42a3      	cmp	r3, r4
 800493c:	6025      	str	r5, [r4, #0]
 800493e:	bf18      	it	ne
 8004940:	6059      	strne	r1, [r3, #4]
 8004942:	6863      	ldr	r3, [r4, #4]
 8004944:	bf08      	it	eq
 8004946:	6031      	streq	r1, [r6, #0]
 8004948:	5162      	str	r2, [r4, r5]
 800494a:	604b      	str	r3, [r1, #4]
 800494c:	4638      	mov	r0, r7
 800494e:	f104 060b 	add.w	r6, r4, #11
 8004952:	f000 f865 	bl	8004a20 <__malloc_unlock>
 8004956:	f026 0607 	bic.w	r6, r6, #7
 800495a:	1d23      	adds	r3, r4, #4
 800495c:	1af2      	subs	r2, r6, r3
 800495e:	d0b6      	beq.n	80048ce <_malloc_r+0x22>
 8004960:	1b9b      	subs	r3, r3, r6
 8004962:	50a3      	str	r3, [r4, r2]
 8004964:	e7b3      	b.n	80048ce <_malloc_r+0x22>
 8004966:	6862      	ldr	r2, [r4, #4]
 8004968:	42a3      	cmp	r3, r4
 800496a:	bf0c      	ite	eq
 800496c:	6032      	streq	r2, [r6, #0]
 800496e:	605a      	strne	r2, [r3, #4]
 8004970:	e7ec      	b.n	800494c <_malloc_r+0xa0>
 8004972:	4623      	mov	r3, r4
 8004974:	6864      	ldr	r4, [r4, #4]
 8004976:	e7b2      	b.n	80048de <_malloc_r+0x32>
 8004978:	4634      	mov	r4, r6
 800497a:	6876      	ldr	r6, [r6, #4]
 800497c:	e7b9      	b.n	80048f2 <_malloc_r+0x46>
 800497e:	230c      	movs	r3, #12
 8004980:	4638      	mov	r0, r7
 8004982:	603b      	str	r3, [r7, #0]
 8004984:	f000 f84c 	bl	8004a20 <__malloc_unlock>
 8004988:	e7a1      	b.n	80048ce <_malloc_r+0x22>
 800498a:	6025      	str	r5, [r4, #0]
 800498c:	e7de      	b.n	800494c <_malloc_r+0xa0>
 800498e:	bf00      	nop
 8004990:	20000510 	.word	0x20000510

08004994 <_realloc_r>:
 8004994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004998:	4680      	mov	r8, r0
 800499a:	4614      	mov	r4, r2
 800499c:	460e      	mov	r6, r1
 800499e:	b921      	cbnz	r1, 80049aa <_realloc_r+0x16>
 80049a0:	4611      	mov	r1, r2
 80049a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80049a6:	f7ff bf81 	b.w	80048ac <_malloc_r>
 80049aa:	b92a      	cbnz	r2, 80049b8 <_realloc_r+0x24>
 80049ac:	f7ff ff16 	bl	80047dc <_free_r>
 80049b0:	4625      	mov	r5, r4
 80049b2:	4628      	mov	r0, r5
 80049b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049b8:	f000 f838 	bl	8004a2c <_malloc_usable_size_r>
 80049bc:	4284      	cmp	r4, r0
 80049be:	4607      	mov	r7, r0
 80049c0:	d802      	bhi.n	80049c8 <_realloc_r+0x34>
 80049c2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80049c6:	d812      	bhi.n	80049ee <_realloc_r+0x5a>
 80049c8:	4621      	mov	r1, r4
 80049ca:	4640      	mov	r0, r8
 80049cc:	f7ff ff6e 	bl	80048ac <_malloc_r>
 80049d0:	4605      	mov	r5, r0
 80049d2:	2800      	cmp	r0, #0
 80049d4:	d0ed      	beq.n	80049b2 <_realloc_r+0x1e>
 80049d6:	42bc      	cmp	r4, r7
 80049d8:	4622      	mov	r2, r4
 80049da:	4631      	mov	r1, r6
 80049dc:	bf28      	it	cs
 80049de:	463a      	movcs	r2, r7
 80049e0:	f7ff fed4 	bl	800478c <memcpy>
 80049e4:	4631      	mov	r1, r6
 80049e6:	4640      	mov	r0, r8
 80049e8:	f7ff fef8 	bl	80047dc <_free_r>
 80049ec:	e7e1      	b.n	80049b2 <_realloc_r+0x1e>
 80049ee:	4635      	mov	r5, r6
 80049f0:	e7df      	b.n	80049b2 <_realloc_r+0x1e>
	...

080049f4 <_sbrk_r>:
 80049f4:	b538      	push	{r3, r4, r5, lr}
 80049f6:	2300      	movs	r3, #0
 80049f8:	4d05      	ldr	r5, [pc, #20]	; (8004a10 <_sbrk_r+0x1c>)
 80049fa:	4604      	mov	r4, r0
 80049fc:	4608      	mov	r0, r1
 80049fe:	602b      	str	r3, [r5, #0]
 8004a00:	f7fc f924 	bl	8000c4c <_sbrk>
 8004a04:	1c43      	adds	r3, r0, #1
 8004a06:	d102      	bne.n	8004a0e <_sbrk_r+0x1a>
 8004a08:	682b      	ldr	r3, [r5, #0]
 8004a0a:	b103      	cbz	r3, 8004a0e <_sbrk_r+0x1a>
 8004a0c:	6023      	str	r3, [r4, #0]
 8004a0e:	bd38      	pop	{r3, r4, r5, pc}
 8004a10:	20000518 	.word	0x20000518

08004a14 <__malloc_lock>:
 8004a14:	4801      	ldr	r0, [pc, #4]	; (8004a1c <__malloc_lock+0x8>)
 8004a16:	f000 b811 	b.w	8004a3c <__retarget_lock_acquire_recursive>
 8004a1a:	bf00      	nop
 8004a1c:	2000051c 	.word	0x2000051c

08004a20 <__malloc_unlock>:
 8004a20:	4801      	ldr	r0, [pc, #4]	; (8004a28 <__malloc_unlock+0x8>)
 8004a22:	f000 b80c 	b.w	8004a3e <__retarget_lock_release_recursive>
 8004a26:	bf00      	nop
 8004a28:	2000051c 	.word	0x2000051c

08004a2c <_malloc_usable_size_r>:
 8004a2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a30:	1f18      	subs	r0, r3, #4
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	bfbc      	itt	lt
 8004a36:	580b      	ldrlt	r3, [r1, r0]
 8004a38:	18c0      	addlt	r0, r0, r3
 8004a3a:	4770      	bx	lr

08004a3c <__retarget_lock_acquire_recursive>:
 8004a3c:	4770      	bx	lr

08004a3e <__retarget_lock_release_recursive>:
 8004a3e:	4770      	bx	lr

08004a40 <_init>:
 8004a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a42:	bf00      	nop
 8004a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a46:	bc08      	pop	{r3}
 8004a48:	469e      	mov	lr, r3
 8004a4a:	4770      	bx	lr

08004a4c <_fini>:
 8004a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a4e:	bf00      	nop
 8004a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a52:	bc08      	pop	{r3}
 8004a54:	469e      	mov	lr, r3
 8004a56:	4770      	bx	lr
