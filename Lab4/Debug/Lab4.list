
Lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002670  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800277c  0800277c  0001277c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800279c  0800279c  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  0800279c  0800279c  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800279c  0800279c  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800279c  0800279c  0001279c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080027a0  080027a0  000127a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080027a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b4  20000018  080027bc  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003cc  080027bc  000203cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   000086cc  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000197c  00000000  00000000  0002870d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a18  00000000  00000000  0002a090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000940  00000000  00000000  0002aaa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015e76  00000000  00000000  0002b3e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ad28  00000000  00000000  0004125e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000821d3  00000000  00000000  0004bf86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ce159  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028c8  00000000  00000000  000ce1ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000018 	.word	0x20000018
 8000128:	00000000 	.word	0x00000000
 800012c:	08002764 	.word	0x08002764

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000001c 	.word	0x2000001c
 8000148:	08002764 	.word	0x08002764

0800014c <button_reading>:
uint8_t buttonBuffer [N0_OF_BUTTONS];
static uint8_t flagForButtonPress3s [N0_OF_BUTTONS];
static uint16_t counterForButtonPress3s [N0_OF_BUTTONS ];
// mode  time  select button
// RESET INC DEC
void button_reading ( void ) {
 800014c:	b590      	push	{r4, r7, lr}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
	for ( char i = 0; i < N0_OF_BUTTONS ; i ++) {
 8000152:	2300      	movs	r3, #0
 8000154:	71fb      	strb	r3, [r7, #7]
 8000156:	e088      	b.n	800026a <button_reading+0x11e>
			Key_2[i]=Key_1[i];
 8000158:	79fa      	ldrb	r2, [r7, #7]
 800015a:	79fb      	ldrb	r3, [r7, #7]
 800015c:	4947      	ldr	r1, [pc, #284]	; (800027c <button_reading+0x130>)
 800015e:	5c89      	ldrb	r1, [r1, r2]
 8000160:	4a47      	ldr	r2, [pc, #284]	; (8000280 <button_reading+0x134>)
 8000162:	54d1      	strb	r1, [r2, r3]
			Key_1[i]=Key_0[i];
 8000164:	79fa      	ldrb	r2, [r7, #7]
 8000166:	79fb      	ldrb	r3, [r7, #7]
 8000168:	4946      	ldr	r1, [pc, #280]	; (8000284 <button_reading+0x138>)
 800016a:	5c89      	ldrb	r1, [r1, r2]
 800016c:	4a43      	ldr	r2, [pc, #268]	; (800027c <button_reading+0x130>)
 800016e:	54d1      	strb	r1, [r2, r3]
			if (i==0)  Key_0[i] = HAL_GPIO_ReadPin(butMode_GPIO_Port, butMode_Pin );
 8000170:	79fb      	ldrb	r3, [r7, #7]
 8000172:	2b00      	cmp	r3, #0
 8000174:	d109      	bne.n	800018a <button_reading+0x3e>
 8000176:	79fc      	ldrb	r4, [r7, #7]
 8000178:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800017c:	4842      	ldr	r0, [pc, #264]	; (8000288 <button_reading+0x13c>)
 800017e:	f001 fab1 	bl	80016e4 <HAL_GPIO_ReadPin>
 8000182:	4603      	mov	r3, r0
 8000184:	461a      	mov	r2, r3
 8000186:	4b3f      	ldr	r3, [pc, #252]	; (8000284 <button_reading+0x138>)
 8000188:	551a      	strb	r2, [r3, r4]
			if (i==1)  Key_0[i] = HAL_GPIO_ReadPin(butTime_GPIO_Port, butTime_Pin );
 800018a:	79fb      	ldrb	r3, [r7, #7]
 800018c:	2b01      	cmp	r3, #1
 800018e:	d109      	bne.n	80001a4 <button_reading+0x58>
 8000190:	79fc      	ldrb	r4, [r7, #7]
 8000192:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000196:	483c      	ldr	r0, [pc, #240]	; (8000288 <button_reading+0x13c>)
 8000198:	f001 faa4 	bl	80016e4 <HAL_GPIO_ReadPin>
 800019c:	4603      	mov	r3, r0
 800019e:	461a      	mov	r2, r3
 80001a0:	4b38      	ldr	r3, [pc, #224]	; (8000284 <button_reading+0x138>)
 80001a2:	551a      	strb	r2, [r3, r4]
			if (i==2)  Key_0[i] = HAL_GPIO_ReadPin(butFirm_GPIO_Port, butFirm_Pin );
 80001a4:	79fb      	ldrb	r3, [r7, #7]
 80001a6:	2b02      	cmp	r3, #2
 80001a8:	d109      	bne.n	80001be <button_reading+0x72>
 80001aa:	79fc      	ldrb	r4, [r7, #7]
 80001ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80001b0:	4835      	ldr	r0, [pc, #212]	; (8000288 <button_reading+0x13c>)
 80001b2:	f001 fa97 	bl	80016e4 <HAL_GPIO_ReadPin>
 80001b6:	4603      	mov	r3, r0
 80001b8:	461a      	mov	r2, r3
 80001ba:	4b32      	ldr	r3, [pc, #200]	; (8000284 <button_reading+0x138>)
 80001bc:	551a      	strb	r2, [r3, r4]

			if(Key_2[i]==Key_1[i] && Key_1[i]==Key_0[i]){
 80001be:	79fb      	ldrb	r3, [r7, #7]
 80001c0:	4a2f      	ldr	r2, [pc, #188]	; (8000280 <button_reading+0x134>)
 80001c2:	5cd2      	ldrb	r2, [r2, r3]
 80001c4:	79fb      	ldrb	r3, [r7, #7]
 80001c6:	492d      	ldr	r1, [pc, #180]	; (800027c <button_reading+0x130>)
 80001c8:	5ccb      	ldrb	r3, [r1, r3]
 80001ca:	429a      	cmp	r2, r3
 80001cc:	d14a      	bne.n	8000264 <button_reading+0x118>
 80001ce:	79fb      	ldrb	r3, [r7, #7]
 80001d0:	4a2a      	ldr	r2, [pc, #168]	; (800027c <button_reading+0x130>)
 80001d2:	5cd2      	ldrb	r2, [r2, r3]
 80001d4:	79fb      	ldrb	r3, [r7, #7]
 80001d6:	492b      	ldr	r1, [pc, #172]	; (8000284 <button_reading+0x138>)
 80001d8:	5ccb      	ldrb	r3, [r1, r3]
 80001da:	429a      	cmp	r2, r3
 80001dc:	d142      	bne.n	8000264 <button_reading+0x118>
				if(Key_3[i]!=Key_2[i]){
 80001de:	79fb      	ldrb	r3, [r7, #7]
 80001e0:	4a2a      	ldr	r2, [pc, #168]	; (800028c <button_reading+0x140>)
 80001e2:	5cd2      	ldrb	r2, [r2, r3]
 80001e4:	79fb      	ldrb	r3, [r7, #7]
 80001e6:	4926      	ldr	r1, [pc, #152]	; (8000280 <button_reading+0x134>)
 80001e8:	5ccb      	ldrb	r3, [r1, r3]
 80001ea:	429a      	cmp	r2, r3
 80001ec:	d022      	beq.n	8000234 <button_reading+0xe8>
					Key_3[i]=Key_2[i];
 80001ee:	79fa      	ldrb	r2, [r7, #7]
 80001f0:	79fb      	ldrb	r3, [r7, #7]
 80001f2:	4923      	ldr	r1, [pc, #140]	; (8000280 <button_reading+0x134>)
 80001f4:	5c89      	ldrb	r1, [r1, r2]
 80001f6:	4a25      	ldr	r2, [pc, #148]	; (800028c <button_reading+0x140>)
 80001f8:	54d1      	strb	r1, [r2, r3]
					if(Key_3[i]==BUTTON_IS_PRESSED){
 80001fa:	79fb      	ldrb	r3, [r7, #7]
 80001fc:	4a23      	ldr	r2, [pc, #140]	; (800028c <button_reading+0x140>)
 80001fe:	5cd3      	ldrb	r3, [r2, r3]
 8000200:	2b00      	cmp	r3, #0
 8000202:	d109      	bne.n	8000218 <button_reading+0xcc>
						buttonBuffer[i]=BUTTON_IS_PRESSED;
 8000204:	79fb      	ldrb	r3, [r7, #7]
 8000206:	4a22      	ldr	r2, [pc, #136]	; (8000290 <button_reading+0x144>)
 8000208:	2100      	movs	r1, #0
 800020a:	54d1      	strb	r1, [r2, r3]
						counterForButtonPress3s[i]=DURATION_FOR_AUTO_INCREASING;
 800020c:	79fb      	ldrb	r3, [r7, #7]
 800020e:	4a21      	ldr	r2, [pc, #132]	; (8000294 <button_reading+0x148>)
 8000210:	2164      	movs	r1, #100	; 0x64
 8000212:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000216:	e025      	b.n	8000264 <button_reading+0x118>
					}else{
						buttonBuffer[i]=BUTTON_IS_RELEASED;
 8000218:	79fb      	ldrb	r3, [r7, #7]
 800021a:	4a1d      	ldr	r2, [pc, #116]	; (8000290 <button_reading+0x144>)
 800021c:	2101      	movs	r1, #1
 800021e:	54d1      	strb	r1, [r2, r3]
						flagForButtonPress3s[i]=0;
 8000220:	79fb      	ldrb	r3, [r7, #7]
 8000222:	4a1d      	ldr	r2, [pc, #116]	; (8000298 <button_reading+0x14c>)
 8000224:	2100      	movs	r1, #0
 8000226:	54d1      	strb	r1, [r2, r3]
						FLAG_CHECK_PRESSED[i]=1;
 8000228:	79fb      	ldrb	r3, [r7, #7]
 800022a:	4a1c      	ldr	r2, [pc, #112]	; (800029c <button_reading+0x150>)
 800022c:	2101      	movs	r1, #1
 800022e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000232:	e017      	b.n	8000264 <button_reading+0x118>
					}
				}else{
					if(Key_3[i]==BUTTON_IS_PRESSED){
 8000234:	79fb      	ldrb	r3, [r7, #7]
 8000236:	4a15      	ldr	r2, [pc, #84]	; (800028c <button_reading+0x140>)
 8000238:	5cd3      	ldrb	r3, [r2, r3]
 800023a:	2b00      	cmp	r3, #0
 800023c:	d112      	bne.n	8000264 <button_reading+0x118>
						counterForButtonPress3s[i]--;
 800023e:	79fb      	ldrb	r3, [r7, #7]
 8000240:	4a14      	ldr	r2, [pc, #80]	; (8000294 <button_reading+0x148>)
 8000242:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000246:	3a01      	subs	r2, #1
 8000248:	b291      	uxth	r1, r2
 800024a:	4a12      	ldr	r2, [pc, #72]	; (8000294 <button_reading+0x148>)
 800024c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						if(counterForButtonPress3s[i]==0){
 8000250:	79fb      	ldrb	r3, [r7, #7]
 8000252:	4a10      	ldr	r2, [pc, #64]	; (8000294 <button_reading+0x148>)
 8000254:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000258:	2b00      	cmp	r3, #0
 800025a:	d103      	bne.n	8000264 <button_reading+0x118>
							flagForButtonPress3s[i]=1;
 800025c:	79fb      	ldrb	r3, [r7, #7]
 800025e:	4a0e      	ldr	r2, [pc, #56]	; (8000298 <button_reading+0x14c>)
 8000260:	2101      	movs	r1, #1
 8000262:	54d1      	strb	r1, [r2, r3]
	for ( char i = 0; i < N0_OF_BUTTONS ; i ++) {
 8000264:	79fb      	ldrb	r3, [r7, #7]
 8000266:	3301      	adds	r3, #1
 8000268:	71fb      	strb	r3, [r7, #7]
 800026a:	79fb      	ldrb	r3, [r7, #7]
 800026c:	2b02      	cmp	r3, #2
 800026e:	f67f af73 	bls.w	8000158 <button_reading+0xc>
						}
					}
			}
		}
	}
}
 8000272:	bf00      	nop
 8000274:	bf00      	nop
 8000276:	370c      	adds	r7, #12
 8000278:	46bd      	mov	sp, r7
 800027a:	bd90      	pop	{r4, r7, pc}
 800027c:	20000040 	.word	0x20000040
 8000280:	20000044 	.word	0x20000044
 8000284:	2000003c 	.word	0x2000003c
 8000288:	40010800 	.word	0x40010800
 800028c:	20000048 	.word	0x20000048
 8000290:	2000004c 	.word	0x2000004c
 8000294:	20000034 	.word	0x20000034
 8000298:	20000050 	.word	0x20000050
 800029c:	20000000 	.word	0x20000000

080002a0 <is_button_pressed>:
unsigned char is_button_pressed ( uint8_t index ) {
 80002a0:	b480      	push	{r7}
 80002a2:	b083      	sub	sp, #12
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	4603      	mov	r3, r0
 80002a8:	71fb      	strb	r3, [r7, #7]
	if( index >= N0_OF_BUTTONS ) return 0;
 80002aa:	79fb      	ldrb	r3, [r7, #7]
 80002ac:	2b02      	cmp	r3, #2
 80002ae:	d901      	bls.n	80002b4 <is_button_pressed+0x14>
 80002b0:	2300      	movs	r3, #0
 80002b2:	e012      	b.n	80002da <is_button_pressed+0x3a>
	if(buttonBuffer[index]==BUTTON_IS_PRESSED && FLAG_CHECK_PRESSED[index]==1 ){
 80002b4:	79fb      	ldrb	r3, [r7, #7]
 80002b6:	4a0b      	ldr	r2, [pc, #44]	; (80002e4 <is_button_pressed+0x44>)
 80002b8:	5cd3      	ldrb	r3, [r2, r3]
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d10c      	bne.n	80002d8 <is_button_pressed+0x38>
 80002be:	79fb      	ldrb	r3, [r7, #7]
 80002c0:	4a09      	ldr	r2, [pc, #36]	; (80002e8 <is_button_pressed+0x48>)
 80002c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002c6:	2b01      	cmp	r3, #1
 80002c8:	d106      	bne.n	80002d8 <is_button_pressed+0x38>
		FLAG_CHECK_PRESSED[index]=0;
 80002ca:	79fb      	ldrb	r3, [r7, #7]
 80002cc:	4a06      	ldr	r2, [pc, #24]	; (80002e8 <is_button_pressed+0x48>)
 80002ce:	2100      	movs	r1, #0
 80002d0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 80002d4:	2301      	movs	r3, #1
 80002d6:	e000      	b.n	80002da <is_button_pressed+0x3a>
	}
	return 0;
 80002d8:	2300      	movs	r3, #0
}
 80002da:	4618      	mov	r0, r3
 80002dc:	370c      	adds	r7, #12
 80002de:	46bd      	mov	sp, r7
 80002e0:	bc80      	pop	{r7}
 80002e2:	4770      	bx	lr
 80002e4:	2000004c 	.word	0x2000004c
 80002e8:	20000000 	.word	0x20000000

080002ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002f0:	f000 ff0c 	bl	800110c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002f4:	f000 f886 	bl	8000404 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002f8:	f000 f90c 	bl	8000514 <MX_GPIO_Init>
  MX_TIM2_Init();
 80002fc:	f000 f8be 	bl	800047c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000300:	4834      	ldr	r0, [pc, #208]	; (80003d4 <main+0xe8>)
 8000302:	f001 fe6f 	bl	8001fe4 <HAL_TIM_Base_Start_IT>
  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);
 8000306:	2201      	movs	r2, #1
 8000308:	2180      	movs	r1, #128	; 0x80
 800030a:	4833      	ldr	r0, [pc, #204]	; (80003d8 <main+0xec>)
 800030c:	f001 fa01 	bl	8001712 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);
 8000310:	2201      	movs	r2, #1
 8000312:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000316:	4830      	ldr	r0, [pc, #192]	; (80003d8 <main+0xec>)
 8000318:	f001 f9fb 	bl	8001712 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(LEDR_GPIO_Port, LEDR_Pin, 0);
 800031c:	2200      	movs	r2, #0
 800031e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000322:	482d      	ldr	r0, [pc, #180]	; (80003d8 <main+0xec>)
 8000324:	f001 f9f5 	bl	8001712 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LEDG_GPIO_Port, LEDG_Pin, 1);
 8000328:	2201      	movs	r2, #1
 800032a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800032e:	482a      	ldr	r0, [pc, #168]	; (80003d8 <main+0xec>)
 8000330:	f001 f9ef 	bl	8001712 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LEDY_GPIO_Port, LEDY_Pin, 1);
 8000334:	2201      	movs	r2, #1
 8000336:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800033a:	4827      	ldr	r0, [pc, #156]	; (80003d8 <main+0xec>)
 800033c:	f001 f9e9 	bl	8001712 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(LEDR2_GPIO_Port, LEDR2_Pin, 1);
 8000340:	2201      	movs	r2, #1
 8000342:	2180      	movs	r1, #128	; 0x80
 8000344:	4825      	ldr	r0, [pc, #148]	; (80003dc <main+0xf0>)
 8000346:	f001 f9e4 	bl	8001712 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LEDG2_GPIO_Port, LEDG2_Pin, 1);
 800034a:	2201      	movs	r2, #1
 800034c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000350:	4822      	ldr	r0, [pc, #136]	; (80003dc <main+0xf0>)
 8000352:	f001 f9de 	bl	8001712 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LEDY2_GPIO_Port, LEDY2_Pin, 1);
 8000356:	2201      	movs	r2, #1
 8000358:	f44f 7100 	mov.w	r1, #512	; 0x200
 800035c:	481f      	ldr	r0, [pc, #124]	; (80003dc <main+0xf0>)
 800035e:	f001 f9d8 	bl	8001712 <HAL_GPIO_WritePin>
   /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  SCH_Init();
 8000362:	f000 f94b 	bl	80005fc <SCH_Init>
  SCH_Add_Task(button_reading, 0, 1);
 8000366:	2201      	movs	r2, #1
 8000368:	2100      	movs	r1, #0
 800036a:	481d      	ldr	r0, [pc, #116]	; (80003e0 <main+0xf4>)
 800036c:	f000 f9ba 	bl	80006e4 <SCH_Add_Task>

  SCH_Add_Task(Led1_end, 1, 1);
 8000370:	2201      	movs	r2, #1
 8000372:	2101      	movs	r1, #1
 8000374:	481b      	ldr	r0, [pc, #108]	; (80003e4 <main+0xf8>)
 8000376:	f000 f9b5 	bl	80006e4 <SCH_Add_Task>
  SCH_Add_Task(Led2_end, 2, 1);
 800037a:	2201      	movs	r2, #1
 800037c:	2102      	movs	r1, #2
 800037e:	481a      	ldr	r0, [pc, #104]	; (80003e8 <main+0xfc>)
 8000380:	f000 f9b0 	bl	80006e4 <SCH_Add_Task>

  SCH_Add_Task(LedR_Display, 2, 50);
 8000384:	2232      	movs	r2, #50	; 0x32
 8000386:	2102      	movs	r1, #2
 8000388:	4818      	ldr	r0, [pc, #96]	; (80003ec <main+0x100>)
 800038a:	f000 f9ab 	bl	80006e4 <SCH_Add_Task>
  SCH_Add_Task(LedY_Display, 3, 150);
 800038e:	2296      	movs	r2, #150	; 0x96
 8000390:	2103      	movs	r1, #3
 8000392:	4817      	ldr	r0, [pc, #92]	; (80003f0 <main+0x104>)
 8000394:	f000 f9a6 	bl	80006e4 <SCH_Add_Task>
  SCH_Add_Task(LedG_Display, 5, 200);
 8000398:	22c8      	movs	r2, #200	; 0xc8
 800039a:	2105      	movs	r1, #5
 800039c:	4815      	ldr	r0, [pc, #84]	; (80003f4 <main+0x108>)
 800039e:	f000 f9a1 	bl	80006e4 <SCH_Add_Task>

  SCH_Add_Task(incTime, 7, 100);
 80003a2:	2264      	movs	r2, #100	; 0x64
 80003a4:	2107      	movs	r1, #7
 80003a6:	4814      	ldr	r0, [pc, #80]	; (80003f8 <main+0x10c>)
 80003a8:	f000 f99c 	bl	80006e4 <SCH_Add_Task>

  SCH_Add_Task(display7SEG_2, 500, 0);
 80003ac:	2200      	movs	r2, #0
 80003ae:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80003b2:	4812      	ldr	r0, [pc, #72]	; (80003fc <main+0x110>)
 80003b4:	f000 f996 	bl	80006e4 <SCH_Add_Task>
  SCH_Add_Task(display7SEG_1, 9, 100);
 80003b8:	2264      	movs	r2, #100	; 0x64
 80003ba:	2109      	movs	r1, #9
 80003bc:	4810      	ldr	r0, [pc, #64]	; (8000400 <main+0x114>)
 80003be:	f000 f991 	bl	80006e4 <SCH_Add_Task>
  SCH_Add_Task(display7SEG_2, 1500, 0);
 80003c2:	2200      	movs	r2, #0
 80003c4:	f240 51dc 	movw	r1, #1500	; 0x5dc
 80003c8:	480c      	ldr	r0, [pc, #48]	; (80003fc <main+0x110>)
 80003ca:	f000 f98b 	bl	80006e4 <SCH_Add_Task>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SCH_Dispatch_Tasks();
 80003ce:	f000 f9ed 	bl	80007ac <SCH_Dispatch_Tasks>
 80003d2:	e7fc      	b.n	80003ce <main+0xe2>
 80003d4:	20000054 	.word	0x20000054
 80003d8:	40010800 	.word	0x40010800
 80003dc:	40010c00 	.word	0x40010c00
 80003e0:	0800014d 	.word	0x0800014d
 80003e4:	0800107d 	.word	0x0800107d
 80003e8:	0800109d 	.word	0x0800109d
 80003ec:	080009b1 	.word	0x080009b1
 80003f0:	080009e1 	.word	0x080009e1
 80003f4:	080009c9 	.word	0x080009c9
 80003f8:	080009f9 	.word	0x080009f9
 80003fc:	08000a2d 	.word	0x08000a2d
 8000400:	08000d55 	.word	0x08000d55

08000404 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b090      	sub	sp, #64	; 0x40
 8000408:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800040a:	f107 0318 	add.w	r3, r7, #24
 800040e:	2228      	movs	r2, #40	; 0x28
 8000410:	2100      	movs	r1, #0
 8000412:	4618      	mov	r0, r3
 8000414:	f002 f99e 	bl	8002754 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000418:	1d3b      	adds	r3, r7, #4
 800041a:	2200      	movs	r2, #0
 800041c:	601a      	str	r2, [r3, #0]
 800041e:	605a      	str	r2, [r3, #4]
 8000420:	609a      	str	r2, [r3, #8]
 8000422:	60da      	str	r2, [r3, #12]
 8000424:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000426:	2302      	movs	r3, #2
 8000428:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800042a:	2301      	movs	r3, #1
 800042c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800042e:	2310      	movs	r3, #16
 8000430:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000432:	2300      	movs	r3, #0
 8000434:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000436:	f107 0318 	add.w	r3, r7, #24
 800043a:	4618      	mov	r0, r3
 800043c:	f001 f99a 	bl	8001774 <HAL_RCC_OscConfig>
 8000440:	4603      	mov	r3, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	d001      	beq.n	800044a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000446:	f000 f8d3 	bl	80005f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800044a:	230f      	movs	r3, #15
 800044c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800044e:	2300      	movs	r3, #0
 8000450:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000452:	2300      	movs	r3, #0
 8000454:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000456:	2300      	movs	r3, #0
 8000458:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800045a:	2300      	movs	r3, #0
 800045c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800045e:	1d3b      	adds	r3, r7, #4
 8000460:	2100      	movs	r1, #0
 8000462:	4618      	mov	r0, r3
 8000464:	f001 fc08 	bl	8001c78 <HAL_RCC_ClockConfig>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d001      	beq.n	8000472 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800046e:	f000 f8bf 	bl	80005f0 <Error_Handler>
  }
}
 8000472:	bf00      	nop
 8000474:	3740      	adds	r7, #64	; 0x40
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}
	...

0800047c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b086      	sub	sp, #24
 8000480:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000482:	f107 0308 	add.w	r3, r7, #8
 8000486:	2200      	movs	r2, #0
 8000488:	601a      	str	r2, [r3, #0]
 800048a:	605a      	str	r2, [r3, #4]
 800048c:	609a      	str	r2, [r3, #8]
 800048e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000490:	463b      	mov	r3, r7
 8000492:	2200      	movs	r2, #0
 8000494:	601a      	str	r2, [r3, #0]
 8000496:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000498:	4b1d      	ldr	r3, [pc, #116]	; (8000510 <MX_TIM2_Init+0x94>)
 800049a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800049e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80004a0:	4b1b      	ldr	r3, [pc, #108]	; (8000510 <MX_TIM2_Init+0x94>)
 80004a2:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80004a6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004a8:	4b19      	ldr	r3, [pc, #100]	; (8000510 <MX_TIM2_Init+0x94>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80004ae:	4b18      	ldr	r3, [pc, #96]	; (8000510 <MX_TIM2_Init+0x94>)
 80004b0:	2209      	movs	r2, #9
 80004b2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004b4:	4b16      	ldr	r3, [pc, #88]	; (8000510 <MX_TIM2_Init+0x94>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004ba:	4b15      	ldr	r3, [pc, #84]	; (8000510 <MX_TIM2_Init+0x94>)
 80004bc:	2200      	movs	r2, #0
 80004be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80004c0:	4813      	ldr	r0, [pc, #76]	; (8000510 <MX_TIM2_Init+0x94>)
 80004c2:	f001 fd3f 	bl	8001f44 <HAL_TIM_Base_Init>
 80004c6:	4603      	mov	r3, r0
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d001      	beq.n	80004d0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80004cc:	f000 f890 	bl	80005f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004d4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80004d6:	f107 0308 	add.w	r3, r7, #8
 80004da:	4619      	mov	r1, r3
 80004dc:	480c      	ldr	r0, [pc, #48]	; (8000510 <MX_TIM2_Init+0x94>)
 80004de:	f001 fed5 	bl	800228c <HAL_TIM_ConfigClockSource>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d001      	beq.n	80004ec <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80004e8:	f000 f882 	bl	80005f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004ec:	2300      	movs	r3, #0
 80004ee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004f0:	2300      	movs	r3, #0
 80004f2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004f4:	463b      	mov	r3, r7
 80004f6:	4619      	mov	r1, r3
 80004f8:	4805      	ldr	r0, [pc, #20]	; (8000510 <MX_TIM2_Init+0x94>)
 80004fa:	f002 f89d 	bl	8002638 <HAL_TIMEx_MasterConfigSynchronization>
 80004fe:	4603      	mov	r3, r0
 8000500:	2b00      	cmp	r3, #0
 8000502:	d001      	beq.n	8000508 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000504:	f000 f874 	bl	80005f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000508:	bf00      	nop
 800050a:	3718      	adds	r7, #24
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}
 8000510:	20000054 	.word	0x20000054

08000514 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b086      	sub	sp, #24
 8000518:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800051a:	f107 0308 	add.w	r3, r7, #8
 800051e:	2200      	movs	r2, #0
 8000520:	601a      	str	r2, [r3, #0]
 8000522:	605a      	str	r2, [r3, #4]
 8000524:	609a      	str	r2, [r3, #8]
 8000526:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000528:	4b29      	ldr	r3, [pc, #164]	; (80005d0 <MX_GPIO_Init+0xbc>)
 800052a:	699b      	ldr	r3, [r3, #24]
 800052c:	4a28      	ldr	r2, [pc, #160]	; (80005d0 <MX_GPIO_Init+0xbc>)
 800052e:	f043 0304 	orr.w	r3, r3, #4
 8000532:	6193      	str	r3, [r2, #24]
 8000534:	4b26      	ldr	r3, [pc, #152]	; (80005d0 <MX_GPIO_Init+0xbc>)
 8000536:	699b      	ldr	r3, [r3, #24]
 8000538:	f003 0304 	and.w	r3, r3, #4
 800053c:	607b      	str	r3, [r7, #4]
 800053e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000540:	4b23      	ldr	r3, [pc, #140]	; (80005d0 <MX_GPIO_Init+0xbc>)
 8000542:	699b      	ldr	r3, [r3, #24]
 8000544:	4a22      	ldr	r2, [pc, #136]	; (80005d0 <MX_GPIO_Init+0xbc>)
 8000546:	f043 0308 	orr.w	r3, r3, #8
 800054a:	6193      	str	r3, [r2, #24]
 800054c:	4b20      	ldr	r3, [pc, #128]	; (80005d0 <MX_GPIO_Init+0xbc>)
 800054e:	699b      	ldr	r3, [r3, #24]
 8000550:	f003 0308 	and.w	r3, r3, #8
 8000554:	603b      	str	r3, [r7, #0]
 8000556:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, a1_Pin|b1_Pin|c1_Pin|d1_Pin
 8000558:	2200      	movs	r2, #0
 800055a:	f640 71ff 	movw	r1, #4095	; 0xfff
 800055e:	481d      	ldr	r0, [pc, #116]	; (80005d4 <MX_GPIO_Init+0xc0>)
 8000560:	f001 f8d7 	bl	8001712 <HAL_GPIO_WritePin>
                          |e1_Pin|f1_Pin|g1_Pin|EN1_Pin
                          |EN2_Pin|LEDR_Pin|LEDG_Pin|LEDY_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, a2_Pin|b2_Pin|c2_Pin|d2_Pin
 8000564:	2200      	movs	r2, #0
 8000566:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800056a:	481b      	ldr	r0, [pc, #108]	; (80005d8 <MX_GPIO_Init+0xc4>)
 800056c:	f001 f8d1 	bl	8001712 <HAL_GPIO_WritePin>
                          |LEDG2_Pin|LEDY2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : a1_Pin b1_Pin c1_Pin d1_Pin
                           e1_Pin f1_Pin g1_Pin EN1_Pin
                           EN2_Pin LEDR_Pin LEDG_Pin LEDY_Pin */
  GPIO_InitStruct.Pin = a1_Pin|b1_Pin|c1_Pin|d1_Pin
 8000570:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000574:	60bb      	str	r3, [r7, #8]
                          |e1_Pin|f1_Pin|g1_Pin|EN1_Pin
                          |EN2_Pin|LEDR_Pin|LEDG_Pin|LEDY_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000576:	2301      	movs	r3, #1
 8000578:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057a:	2300      	movs	r3, #0
 800057c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800057e:	2302      	movs	r3, #2
 8000580:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000582:	f107 0308 	add.w	r3, r7, #8
 8000586:	4619      	mov	r1, r3
 8000588:	4812      	ldr	r0, [pc, #72]	; (80005d4 <MX_GPIO_Init+0xc0>)
 800058a:	f000 ff2f 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pins : a2_Pin b2_Pin c2_Pin d2_Pin
                           e2_Pin f2_Pin g2_Pin LEDR2_Pin
                           LEDG2_Pin LEDY2_Pin */
  GPIO_InitStruct.Pin = a2_Pin|b2_Pin|c2_Pin|d2_Pin
 800058e:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8000592:	60bb      	str	r3, [r7, #8]
                          |e2_Pin|f2_Pin|g2_Pin|LEDR2_Pin
                          |LEDG2_Pin|LEDY2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000594:	2301      	movs	r3, #1
 8000596:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000598:	2300      	movs	r3, #0
 800059a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800059c:	2302      	movs	r3, #2
 800059e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005a0:	f107 0308 	add.w	r3, r7, #8
 80005a4:	4619      	mov	r1, r3
 80005a6:	480c      	ldr	r0, [pc, #48]	; (80005d8 <MX_GPIO_Init+0xc4>)
 80005a8:	f000 ff20 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pins : butMode_Pin butTime_Pin butFirm_Pin */
  GPIO_InitStruct.Pin = butMode_Pin|butTime_Pin|butFirm_Pin;
 80005ac:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80005b0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005b2:	2300      	movs	r3, #0
 80005b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b6:	2300      	movs	r3, #0
 80005b8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ba:	f107 0308 	add.w	r3, r7, #8
 80005be:	4619      	mov	r1, r3
 80005c0:	4804      	ldr	r0, [pc, #16]	; (80005d4 <MX_GPIO_Init+0xc0>)
 80005c2:	f000 ff13 	bl	80013ec <HAL_GPIO_Init>

}
 80005c6:	bf00      	nop
 80005c8:	3718      	adds	r7, #24
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40021000 	.word	0x40021000
 80005d4:	40010800 	.word	0x40010800
 80005d8:	40010c00 	.word	0x40010c00

080005dc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim ) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
	SCH_Update_Tasks();
 80005e4:	f000 f824 	bl	8000630 <SCH_Update_Tasks>
}
 80005e8:	bf00      	nop
 80005ea:	3708      	adds	r7, #8
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005f4:	b672      	cpsid	i
}
 80005f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005f8:	e7fe      	b.n	80005f8 <Error_Handler+0x8>
	...

080005fc <SCH_Init>:
#include "scheduler.h"
sTask SCH_tasks_G [SCH_MAX_TASKS];
int 	Error_code_G = 0 ;
int 	task_id = 0;

void SCH_Init(void){
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
	unsigned char i ;
	for (i=0; i<SCH_MAX_TASKS; i++) SCH_Delete_Task(i);
 8000602:	2300      	movs	r3, #0
 8000604:	71fb      	strb	r3, [r7, #7]
 8000606:	e006      	b.n	8000616 <SCH_Init+0x1a>
 8000608:	79fb      	ldrb	r3, [r7, #7]
 800060a:	4618      	mov	r0, r3
 800060c:	f000 f90e 	bl	800082c <SCH_Delete_Task>
 8000610:	79fb      	ldrb	r3, [r7, #7]
 8000612:	3301      	adds	r3, #1
 8000614:	71fb      	strb	r3, [r7, #7]
 8000616:	79fb      	ldrb	r3, [r7, #7]
 8000618:	2b27      	cmp	r3, #39	; 0x27
 800061a:	d9f5      	bls.n	8000608 <SCH_Init+0xc>
	Error_code_G = 8;
 800061c:	4b03      	ldr	r3, [pc, #12]	; (800062c <SCH_Init+0x30>)
 800061e:	2208      	movs	r2, #8
 8000620:	601a      	str	r2, [r3, #0]
	//Timer_Init();
	//Watchdog_Init();
}
 8000622:	bf00      	nop
 8000624:	3708      	adds	r7, #8
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	200003bc 	.word	0x200003bc

08000630 <SCH_Update_Tasks>:
void SCH_Update_Tasks(){
 8000630:	b480      	push	{r7}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
	unsigned char index;
	for (index = 0; index <SCH_MAX_TASKS; index ++){
 8000636:	2300      	movs	r3, #0
 8000638:	71fb      	strb	r3, [r7, #7]
 800063a:	e047      	b.n	80006cc <SCH_Update_Tasks+0x9c>
		if (SCH_tasks_G[index].task != 0){
 800063c:	79fa      	ldrb	r2, [r7, #7]
 800063e:	4928      	ldr	r1, [pc, #160]	; (80006e0 <SCH_Update_Tasks+0xb0>)
 8000640:	4613      	mov	r3, r2
 8000642:	009b      	lsls	r3, r3, #2
 8000644:	4413      	add	r3, r2
 8000646:	009b      	lsls	r3, r3, #2
 8000648:	440b      	add	r3, r1
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d03a      	beq.n	80006c6 <SCH_Update_Tasks+0x96>
			if (SCH_tasks_G[index].Delay == 0){
 8000650:	79fa      	ldrb	r2, [r7, #7]
 8000652:	4923      	ldr	r1, [pc, #140]	; (80006e0 <SCH_Update_Tasks+0xb0>)
 8000654:	4613      	mov	r3, r2
 8000656:	009b      	lsls	r3, r3, #2
 8000658:	4413      	add	r3, r2
 800065a:	009b      	lsls	r3, r3, #2
 800065c:	440b      	add	r3, r1
 800065e:	3304      	adds	r3, #4
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d11c      	bne.n	80006a0 <SCH_Update_Tasks+0x70>
				SCH_tasks_G[index].RunMe = 1;
 8000666:	79fa      	ldrb	r2, [r7, #7]
 8000668:	491d      	ldr	r1, [pc, #116]	; (80006e0 <SCH_Update_Tasks+0xb0>)
 800066a:	4613      	mov	r3, r2
 800066c:	009b      	lsls	r3, r3, #2
 800066e:	4413      	add	r3, r2
 8000670:	009b      	lsls	r3, r3, #2
 8000672:	440b      	add	r3, r1
 8000674:	330c      	adds	r3, #12
 8000676:	2201      	movs	r2, #1
 8000678:	701a      	strb	r2, [r3, #0]
				SCH_tasks_G[index].Delay = SCH_tasks_G[index].Period;
 800067a:	79f9      	ldrb	r1, [r7, #7]
 800067c:	79fa      	ldrb	r2, [r7, #7]
 800067e:	4818      	ldr	r0, [pc, #96]	; (80006e0 <SCH_Update_Tasks+0xb0>)
 8000680:	460b      	mov	r3, r1
 8000682:	009b      	lsls	r3, r3, #2
 8000684:	440b      	add	r3, r1
 8000686:	009b      	lsls	r3, r3, #2
 8000688:	4403      	add	r3, r0
 800068a:	3308      	adds	r3, #8
 800068c:	6819      	ldr	r1, [r3, #0]
 800068e:	4814      	ldr	r0, [pc, #80]	; (80006e0 <SCH_Update_Tasks+0xb0>)
 8000690:	4613      	mov	r3, r2
 8000692:	009b      	lsls	r3, r3, #2
 8000694:	4413      	add	r3, r2
 8000696:	009b      	lsls	r3, r3, #2
 8000698:	4403      	add	r3, r0
 800069a:	3304      	adds	r3, #4
 800069c:	6019      	str	r1, [r3, #0]
 800069e:	e012      	b.n	80006c6 <SCH_Update_Tasks+0x96>
			} else SCH_tasks_G[index].Delay -= 1;
 80006a0:	79fa      	ldrb	r2, [r7, #7]
 80006a2:	490f      	ldr	r1, [pc, #60]	; (80006e0 <SCH_Update_Tasks+0xb0>)
 80006a4:	4613      	mov	r3, r2
 80006a6:	009b      	lsls	r3, r3, #2
 80006a8:	4413      	add	r3, r2
 80006aa:	009b      	lsls	r3, r3, #2
 80006ac:	440b      	add	r3, r1
 80006ae:	3304      	adds	r3, #4
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	79fa      	ldrb	r2, [r7, #7]
 80006b4:	1e59      	subs	r1, r3, #1
 80006b6:	480a      	ldr	r0, [pc, #40]	; (80006e0 <SCH_Update_Tasks+0xb0>)
 80006b8:	4613      	mov	r3, r2
 80006ba:	009b      	lsls	r3, r3, #2
 80006bc:	4413      	add	r3, r2
 80006be:	009b      	lsls	r3, r3, #2
 80006c0:	4403      	add	r3, r0
 80006c2:	3304      	adds	r3, #4
 80006c4:	6019      	str	r1, [r3, #0]
	for (index = 0; index <SCH_MAX_TASKS; index ++){
 80006c6:	79fb      	ldrb	r3, [r7, #7]
 80006c8:	3301      	adds	r3, #1
 80006ca:	71fb      	strb	r3, [r7, #7]
 80006cc:	79fb      	ldrb	r3, [r7, #7]
 80006ce:	2b27      	cmp	r3, #39	; 0x27
 80006d0:	d9b4      	bls.n	800063c <SCH_Update_Tasks+0xc>
		}
	}
}
 80006d2:	bf00      	nop
 80006d4:	bf00      	nop
 80006d6:	370c      	adds	r7, #12
 80006d8:	46bd      	mov	sp, r7
 80006da:	bc80      	pop	{r7}
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop
 80006e0:	2000009c 	.word	0x2000009c

080006e4 <SCH_Add_Task>:
int SCH_Add_Task(void (*task), int delay, int period){
 80006e4:	b480      	push	{r7}
 80006e6:	b087      	sub	sp, #28
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	60f8      	str	r0, [r7, #12]
 80006ec:	60b9      	str	r1, [r7, #8]
 80006ee:	607a      	str	r2, [r7, #4]
	unsigned char index=0;
 80006f0:	2300      	movs	r3, #0
 80006f2:	75fb      	strb	r3, [r7, #23]
	while ((SCH_tasks_G[index].task!=0) && (index < SCH_MAX_TASKS))
 80006f4:	e002      	b.n	80006fc <SCH_Add_Task+0x18>
		index ++;
 80006f6:	7dfb      	ldrb	r3, [r7, #23]
 80006f8:	3301      	adds	r3, #1
 80006fa:	75fb      	strb	r3, [r7, #23]
	while ((SCH_tasks_G[index].task!=0) && (index < SCH_MAX_TASKS))
 80006fc:	7dfa      	ldrb	r2, [r7, #23]
 80006fe:	4928      	ldr	r1, [pc, #160]	; (80007a0 <SCH_Add_Task+0xbc>)
 8000700:	4613      	mov	r3, r2
 8000702:	009b      	lsls	r3, r3, #2
 8000704:	4413      	add	r3, r2
 8000706:	009b      	lsls	r3, r3, #2
 8000708:	440b      	add	r3, r1
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d002      	beq.n	8000716 <SCH_Add_Task+0x32>
 8000710:	7dfb      	ldrb	r3, [r7, #23]
 8000712:	2b27      	cmp	r3, #39	; 0x27
 8000714:	d9ef      	bls.n	80006f6 <SCH_Add_Task+0x12>

	if (index== SCH_MAX_TASKS){
 8000716:	7dfb      	ldrb	r3, [r7, #23]
 8000718:	2b28      	cmp	r3, #40	; 0x28
 800071a:	d104      	bne.n	8000726 <SCH_Add_Task+0x42>
		Error_code_G = ERROR_SCH_TOO_MANY_TASKS;
 800071c:	4b21      	ldr	r3, [pc, #132]	; (80007a4 <SCH_Add_Task+0xc0>)
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
		return SCH_MAX_TASKS;
 8000722:	2328      	movs	r3, #40	; 0x28
 8000724:	e036      	b.n	8000794 <SCH_Add_Task+0xb0>
	}
	SCH_tasks_G[index].task 	= task;
 8000726:	7dfa      	ldrb	r2, [r7, #23]
 8000728:	68f9      	ldr	r1, [r7, #12]
 800072a:	481d      	ldr	r0, [pc, #116]	; (80007a0 <SCH_Add_Task+0xbc>)
 800072c:	4613      	mov	r3, r2
 800072e:	009b      	lsls	r3, r3, #2
 8000730:	4413      	add	r3, r2
 8000732:	009b      	lsls	r3, r3, #2
 8000734:	4403      	add	r3, r0
 8000736:	6019      	str	r1, [r3, #0]
	SCH_tasks_G[index].Delay 	= delay;
 8000738:	7dfa      	ldrb	r2, [r7, #23]
 800073a:	68b9      	ldr	r1, [r7, #8]
 800073c:	4818      	ldr	r0, [pc, #96]	; (80007a0 <SCH_Add_Task+0xbc>)
 800073e:	4613      	mov	r3, r2
 8000740:	009b      	lsls	r3, r3, #2
 8000742:	4413      	add	r3, r2
 8000744:	009b      	lsls	r3, r3, #2
 8000746:	4403      	add	r3, r0
 8000748:	3304      	adds	r3, #4
 800074a:	6019      	str	r1, [r3, #0]
	SCH_tasks_G[index].Period 	= period;
 800074c:	7dfa      	ldrb	r2, [r7, #23]
 800074e:	6879      	ldr	r1, [r7, #4]
 8000750:	4813      	ldr	r0, [pc, #76]	; (80007a0 <SCH_Add_Task+0xbc>)
 8000752:	4613      	mov	r3, r2
 8000754:	009b      	lsls	r3, r3, #2
 8000756:	4413      	add	r3, r2
 8000758:	009b      	lsls	r3, r3, #2
 800075a:	4403      	add	r3, r0
 800075c:	3308      	adds	r3, #8
 800075e:	6019      	str	r1, [r3, #0]
	SCH_tasks_G[index].RunMe 	= 0;
 8000760:	7dfa      	ldrb	r2, [r7, #23]
 8000762:	490f      	ldr	r1, [pc, #60]	; (80007a0 <SCH_Add_Task+0xbc>)
 8000764:	4613      	mov	r3, r2
 8000766:	009b      	lsls	r3, r3, #2
 8000768:	4413      	add	r3, r2
 800076a:	009b      	lsls	r3, r3, #2
 800076c:	440b      	add	r3, r1
 800076e:	330c      	adds	r3, #12
 8000770:	2200      	movs	r2, #0
 8000772:	701a      	strb	r2, [r3, #0]
	SCH_tasks_G[index].TaskId 	= task_id++;
 8000774:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <SCH_Add_Task+0xc4>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	1c5a      	adds	r2, r3, #1
 800077a:	490b      	ldr	r1, [pc, #44]	; (80007a8 <SCH_Add_Task+0xc4>)
 800077c:	600a      	str	r2, [r1, #0]
 800077e:	7dfa      	ldrb	r2, [r7, #23]
 8000780:	4618      	mov	r0, r3
 8000782:	4907      	ldr	r1, [pc, #28]	; (80007a0 <SCH_Add_Task+0xbc>)
 8000784:	4613      	mov	r3, r2
 8000786:	009b      	lsls	r3, r3, #2
 8000788:	4413      	add	r3, r2
 800078a:	009b      	lsls	r3, r3, #2
 800078c:	440b      	add	r3, r1
 800078e:	3310      	adds	r3, #16
 8000790:	6018      	str	r0, [r3, #0]

	return index;
 8000792:	7dfb      	ldrb	r3, [r7, #23]
}
 8000794:	4618      	mov	r0, r3
 8000796:	371c      	adds	r7, #28
 8000798:	46bd      	mov	sp, r7
 800079a:	bc80      	pop	{r7}
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	2000009c 	.word	0x2000009c
 80007a4:	200003bc 	.word	0x200003bc
 80007a8:	200003c0 	.word	0x200003c0

080007ac <SCH_Dispatch_Tasks>:
void SCH_Dispatch_Tasks(void){
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
	unsigned char index;
	for (index = 0; index < SCH_MAX_TASKS; index++){
 80007b2:	2300      	movs	r3, #0
 80007b4:	71fb      	strb	r3, [r7, #7]
 80007b6:	e02f      	b.n	8000818 <SCH_Dispatch_Tasks+0x6c>
		if (SCH_tasks_G[index].RunMe == 1){
 80007b8:	79fa      	ldrb	r2, [r7, #7]
 80007ba:	491b      	ldr	r1, [pc, #108]	; (8000828 <SCH_Dispatch_Tasks+0x7c>)
 80007bc:	4613      	mov	r3, r2
 80007be:	009b      	lsls	r3, r3, #2
 80007c0:	4413      	add	r3, r2
 80007c2:	009b      	lsls	r3, r3, #2
 80007c4:	440b      	add	r3, r1
 80007c6:	330c      	adds	r3, #12
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	2b01      	cmp	r3, #1
 80007cc:	d121      	bne.n	8000812 <SCH_Dispatch_Tasks+0x66>
			(*SCH_tasks_G[index].task)();
 80007ce:	79fa      	ldrb	r2, [r7, #7]
 80007d0:	4915      	ldr	r1, [pc, #84]	; (8000828 <SCH_Dispatch_Tasks+0x7c>)
 80007d2:	4613      	mov	r3, r2
 80007d4:	009b      	lsls	r3, r3, #2
 80007d6:	4413      	add	r3, r2
 80007d8:	009b      	lsls	r3, r3, #2
 80007da:	440b      	add	r3, r1
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4798      	blx	r3
			SCH_tasks_G[index].RunMe = 0;
 80007e0:	79fa      	ldrb	r2, [r7, #7]
 80007e2:	4911      	ldr	r1, [pc, #68]	; (8000828 <SCH_Dispatch_Tasks+0x7c>)
 80007e4:	4613      	mov	r3, r2
 80007e6:	009b      	lsls	r3, r3, #2
 80007e8:	4413      	add	r3, r2
 80007ea:	009b      	lsls	r3, r3, #2
 80007ec:	440b      	add	r3, r1
 80007ee:	330c      	adds	r3, #12
 80007f0:	2200      	movs	r2, #0
 80007f2:	701a      	strb	r2, [r3, #0]
			if (SCH_tasks_G[index].Period == 0)
 80007f4:	79fa      	ldrb	r2, [r7, #7]
 80007f6:	490c      	ldr	r1, [pc, #48]	; (8000828 <SCH_Dispatch_Tasks+0x7c>)
 80007f8:	4613      	mov	r3, r2
 80007fa:	009b      	lsls	r3, r3, #2
 80007fc:	4413      	add	r3, r2
 80007fe:	009b      	lsls	r3, r3, #2
 8000800:	440b      	add	r3, r1
 8000802:	3308      	adds	r3, #8
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d103      	bne.n	8000812 <SCH_Dispatch_Tasks+0x66>
				SCH_Delete_Task(index);
 800080a:	79fb      	ldrb	r3, [r7, #7]
 800080c:	4618      	mov	r0, r3
 800080e:	f000 f80d 	bl	800082c <SCH_Delete_Task>
	for (index = 0; index < SCH_MAX_TASKS; index++){
 8000812:	79fb      	ldrb	r3, [r7, #7]
 8000814:	3301      	adds	r3, #1
 8000816:	71fb      	strb	r3, [r7, #7]
 8000818:	79fb      	ldrb	r3, [r7, #7]
 800081a:	2b27      	cmp	r3, #39	; 0x27
 800081c:	d9cc      	bls.n	80007b8 <SCH_Dispatch_Tasks+0xc>
		}

	}

}
 800081e:	bf00      	nop
 8000820:	bf00      	nop
 8000822:	3708      	adds	r7, #8
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	2000009c 	.word	0x2000009c

0800082c <SCH_Delete_Task>:
int SCH_Delete_Task(int index){
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
	//TODO
	if (SCH_tasks_G[index].task == 0){
 8000834:	491d      	ldr	r1, [pc, #116]	; (80008ac <SCH_Delete_Task+0x80>)
 8000836:	687a      	ldr	r2, [r7, #4]
 8000838:	4613      	mov	r3, r2
 800083a:	009b      	lsls	r3, r3, #2
 800083c:	4413      	add	r3, r2
 800083e:	009b      	lsls	r3, r3, #2
 8000840:	440b      	add	r3, r1
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d104      	bne.n	8000852 <SCH_Delete_Task+0x26>
		Error_code_G = ERROR_SCH_CANNOT_DELETE_TASK;
 8000848:	4b19      	ldr	r3, [pc, #100]	; (80008b0 <SCH_Delete_Task+0x84>)
 800084a:	2207      	movs	r2, #7
 800084c:	601a      	str	r2, [r3, #0]
		return 0;
 800084e:	2300      	movs	r3, #0
 8000850:	e027      	b.n	80008a2 <SCH_Delete_Task+0x76>
	}
	else {
		SCH_tasks_G[index].task = 0x0000;
 8000852:	4916      	ldr	r1, [pc, #88]	; (80008ac <SCH_Delete_Task+0x80>)
 8000854:	687a      	ldr	r2, [r7, #4]
 8000856:	4613      	mov	r3, r2
 8000858:	009b      	lsls	r3, r3, #2
 800085a:	4413      	add	r3, r2
 800085c:	009b      	lsls	r3, r3, #2
 800085e:	440b      	add	r3, r1
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[index].Delay = 0;
 8000864:	4911      	ldr	r1, [pc, #68]	; (80008ac <SCH_Delete_Task+0x80>)
 8000866:	687a      	ldr	r2, [r7, #4]
 8000868:	4613      	mov	r3, r2
 800086a:	009b      	lsls	r3, r3, #2
 800086c:	4413      	add	r3, r2
 800086e:	009b      	lsls	r3, r3, #2
 8000870:	440b      	add	r3, r1
 8000872:	3304      	adds	r3, #4
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[index].Period = 0;
 8000878:	490c      	ldr	r1, [pc, #48]	; (80008ac <SCH_Delete_Task+0x80>)
 800087a:	687a      	ldr	r2, [r7, #4]
 800087c:	4613      	mov	r3, r2
 800087e:	009b      	lsls	r3, r3, #2
 8000880:	4413      	add	r3, r2
 8000882:	009b      	lsls	r3, r3, #2
 8000884:	440b      	add	r3, r1
 8000886:	3308      	adds	r3, #8
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[index].RunMe = 0;
 800088c:	4907      	ldr	r1, [pc, #28]	; (80008ac <SCH_Delete_Task+0x80>)
 800088e:	687a      	ldr	r2, [r7, #4]
 8000890:	4613      	mov	r3, r2
 8000892:	009b      	lsls	r3, r3, #2
 8000894:	4413      	add	r3, r2
 8000896:	009b      	lsls	r3, r3, #2
 8000898:	440b      	add	r3, r1
 800089a:	330c      	adds	r3, #12
 800089c:	2200      	movs	r2, #0
 800089e:	701a      	strb	r2, [r3, #0]
		return 1;
 80008a0:	2301      	movs	r3, #1
	}
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	370c      	adds	r7, #12
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bc80      	pop	{r7}
 80008aa:	4770      	bx	lr
 80008ac:	2000009c 	.word	0x2000009c
 80008b0:	200003bc 	.word	0x200003bc

080008b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80008ba:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <HAL_MspInit+0x40>)
 80008bc:	699b      	ldr	r3, [r3, #24]
 80008be:	4a0d      	ldr	r2, [pc, #52]	; (80008f4 <HAL_MspInit+0x40>)
 80008c0:	f043 0301 	orr.w	r3, r3, #1
 80008c4:	6193      	str	r3, [r2, #24]
 80008c6:	4b0b      	ldr	r3, [pc, #44]	; (80008f4 <HAL_MspInit+0x40>)
 80008c8:	699b      	ldr	r3, [r3, #24]
 80008ca:	f003 0301 	and.w	r3, r3, #1
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d2:	4b08      	ldr	r3, [pc, #32]	; (80008f4 <HAL_MspInit+0x40>)
 80008d4:	69db      	ldr	r3, [r3, #28]
 80008d6:	4a07      	ldr	r2, [pc, #28]	; (80008f4 <HAL_MspInit+0x40>)
 80008d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008dc:	61d3      	str	r3, [r2, #28]
 80008de:	4b05      	ldr	r3, [pc, #20]	; (80008f4 <HAL_MspInit+0x40>)
 80008e0:	69db      	ldr	r3, [r3, #28]
 80008e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008e6:	603b      	str	r3, [r7, #0]
 80008e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ea:	bf00      	nop
 80008ec:	370c      	adds	r7, #12
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bc80      	pop	{r7}
 80008f2:	4770      	bx	lr
 80008f4:	40021000 	.word	0x40021000

080008f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000908:	d113      	bne.n	8000932 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800090a:	4b0c      	ldr	r3, [pc, #48]	; (800093c <HAL_TIM_Base_MspInit+0x44>)
 800090c:	69db      	ldr	r3, [r3, #28]
 800090e:	4a0b      	ldr	r2, [pc, #44]	; (800093c <HAL_TIM_Base_MspInit+0x44>)
 8000910:	f043 0301 	orr.w	r3, r3, #1
 8000914:	61d3      	str	r3, [r2, #28]
 8000916:	4b09      	ldr	r3, [pc, #36]	; (800093c <HAL_TIM_Base_MspInit+0x44>)
 8000918:	69db      	ldr	r3, [r3, #28]
 800091a:	f003 0301 	and.w	r3, r3, #1
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000922:	2200      	movs	r2, #0
 8000924:	2100      	movs	r1, #0
 8000926:	201c      	movs	r0, #28
 8000928:	f000 fd29 	bl	800137e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800092c:	201c      	movs	r0, #28
 800092e:	f000 fd42 	bl	80013b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000932:	bf00      	nop
 8000934:	3710      	adds	r7, #16
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40021000 	.word	0x40021000

08000940 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000944:	e7fe      	b.n	8000944 <NMI_Handler+0x4>

08000946 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000946:	b480      	push	{r7}
 8000948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800094a:	e7fe      	b.n	800094a <HardFault_Handler+0x4>

0800094c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000950:	e7fe      	b.n	8000950 <MemManage_Handler+0x4>

08000952 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000952:	b480      	push	{r7}
 8000954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000956:	e7fe      	b.n	8000956 <BusFault_Handler+0x4>

08000958 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800095c:	e7fe      	b.n	800095c <UsageFault_Handler+0x4>

0800095e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800095e:	b480      	push	{r7}
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000962:	bf00      	nop
 8000964:	46bd      	mov	sp, r7
 8000966:	bc80      	pop	{r7}
 8000968:	4770      	bx	lr

0800096a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800096a:	b480      	push	{r7}
 800096c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800096e:	bf00      	nop
 8000970:	46bd      	mov	sp, r7
 8000972:	bc80      	pop	{r7}
 8000974:	4770      	bx	lr

08000976 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000976:	b480      	push	{r7}
 8000978:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800097a:	bf00      	nop
 800097c:	46bd      	mov	sp, r7
 800097e:	bc80      	pop	{r7}
 8000980:	4770      	bx	lr

08000982 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000982:	b580      	push	{r7, lr}
 8000984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000986:	f000 fc07 	bl	8001198 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
	...

08000990 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000994:	4802      	ldr	r0, [pc, #8]	; (80009a0 <TIM2_IRQHandler+0x10>)
 8000996:	f001 fb71 	bl	800207c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800099a:	bf00      	nop
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	20000054 	.word	0x20000054

080009a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bc80      	pop	{r7}
 80009ae:	4770      	bx	lr

080009b0 <LedR_Display>:
int key2[N0_OF_BUTTONS] = {0,0,0};
int key3[N0_OF_BUTTONS] = {0,0,0};
int key4[N0_OF_BUTTONS] = {0,0,0};

int state_led2 = 0;
void LedR_Display(void){
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LEDR_GPIO_Port, LEDR_Pin);
 80009b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009b8:	4802      	ldr	r0, [pc, #8]	; (80009c4 <LedR_Display+0x14>)
 80009ba:	f000 fec2 	bl	8001742 <HAL_GPIO_TogglePin>
}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40010800 	.word	0x40010800

080009c8 <LedG_Display>:
void LedG_Display(void){
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LEDG_GPIO_Port, LEDG_Pin);
 80009cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009d0:	4802      	ldr	r0, [pc, #8]	; (80009dc <LedG_Display+0x14>)
 80009d2:	f000 feb6 	bl	8001742 <HAL_GPIO_TogglePin>
}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40010800 	.word	0x40010800

080009e0 <LedY_Display>:
void LedY_Display(void){
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LEDY_GPIO_Port, LEDY_Pin);
 80009e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009e8:	4802      	ldr	r0, [pc, #8]	; (80009f4 <LedY_Display+0x14>)
 80009ea:	f000 feaa 	bl	8001742 <HAL_GPIO_TogglePin>
}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40010800 	.word	0x40010800

080009f8 <incTime>:

void incTime(void){
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
	second = (second + 1)%10;
 80009fc:	4b09      	ldr	r3, [pc, #36]	; (8000a24 <incTime+0x2c>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	1c59      	adds	r1, r3, #1
 8000a02:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <incTime+0x30>)
 8000a04:	fb83 2301 	smull	r2, r3, r3, r1
 8000a08:	109a      	asrs	r2, r3, #2
 8000a0a:	17cb      	asrs	r3, r1, #31
 8000a0c:	1ad2      	subs	r2, r2, r3
 8000a0e:	4613      	mov	r3, r2
 8000a10:	009b      	lsls	r3, r3, #2
 8000a12:	4413      	add	r3, r2
 8000a14:	005b      	lsls	r3, r3, #1
 8000a16:	1aca      	subs	r2, r1, r3
 8000a18:	4b02      	ldr	r3, [pc, #8]	; (8000a24 <incTime+0x2c>)
 8000a1a:	601a      	str	r2, [r3, #0]
}
 8000a1c:	bf00      	nop
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bc80      	pop	{r7}
 8000a22:	4770      	bx	lr
 8000a24:	200003c4 	.word	0x200003c4
 8000a28:	66666667 	.word	0x66666667

08000a2c <display7SEG_2>:
void display7SEG_2(void){
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
	int num = second;
 8000a32:	4bc6      	ldr	r3, [pc, #792]	; (8000d4c <display7SEG_2+0x320>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	607b      	str	r3, [r7, #4]
	if (num==1){
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	2b01      	cmp	r3, #1
 8000a3c:	d123      	bne.n	8000a86 <display7SEG_2+0x5a>
		HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, 1);
 8000a3e:	2201      	movs	r2, #1
 8000a40:	2101      	movs	r1, #1
 8000a42:	48c3      	ldr	r0, [pc, #780]	; (8000d50 <display7SEG_2+0x324>)
 8000a44:	f000 fe65 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a2_GPIO_Port, b2_Pin, 0);
 8000a48:	2200      	movs	r2, #0
 8000a4a:	2102      	movs	r1, #2
 8000a4c:	48c0      	ldr	r0, [pc, #768]	; (8000d50 <display7SEG_2+0x324>)
 8000a4e:	f000 fe60 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a2_GPIO_Port, c2_Pin, 0);
 8000a52:	2200      	movs	r2, #0
 8000a54:	2104      	movs	r1, #4
 8000a56:	48be      	ldr	r0, [pc, #760]	; (8000d50 <display7SEG_2+0x324>)
 8000a58:	f000 fe5b 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a2_GPIO_Port, d2_Pin, 1);
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	2108      	movs	r1, #8
 8000a60:	48bb      	ldr	r0, [pc, #748]	; (8000d50 <display7SEG_2+0x324>)
 8000a62:	f000 fe56 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a2_GPIO_Port, e2_Pin, 1);
 8000a66:	2201      	movs	r2, #1
 8000a68:	2110      	movs	r1, #16
 8000a6a:	48b9      	ldr	r0, [pc, #740]	; (8000d50 <display7SEG_2+0x324>)
 8000a6c:	f000 fe51 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a2_GPIO_Port, f2_Pin, 1);
 8000a70:	2201      	movs	r2, #1
 8000a72:	2120      	movs	r1, #32
 8000a74:	48b6      	ldr	r0, [pc, #728]	; (8000d50 <display7SEG_2+0x324>)
 8000a76:	f000 fe4c 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a2_GPIO_Port, g2_Pin, 1);
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	2140      	movs	r1, #64	; 0x40
 8000a7e:	48b4      	ldr	r0, [pc, #720]	; (8000d50 <display7SEG_2+0x324>)
 8000a80:	f000 fe47 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a2_GPIO_Port, d2_Pin, 0);
		HAL_GPIO_WritePin(a2_GPIO_Port, e2_Pin, 0);
		HAL_GPIO_WritePin(a2_GPIO_Port, f2_Pin, 0);
		HAL_GPIO_WritePin(a2_GPIO_Port, g2_Pin, 1 );
	}
}
 8000a84:	e15d      	b.n	8000d42 <display7SEG_2+0x316>
	else if (num==2){
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	2b02      	cmp	r3, #2
 8000a8a:	d123      	bne.n	8000ad4 <display7SEG_2+0xa8>
		HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, 0);
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	2101      	movs	r1, #1
 8000a90:	48af      	ldr	r0, [pc, #700]	; (8000d50 <display7SEG_2+0x324>)
 8000a92:	f000 fe3e 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a2_GPIO_Port, b2_Pin, 0);
 8000a96:	2200      	movs	r2, #0
 8000a98:	2102      	movs	r1, #2
 8000a9a:	48ad      	ldr	r0, [pc, #692]	; (8000d50 <display7SEG_2+0x324>)
 8000a9c:	f000 fe39 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a2_GPIO_Port, c2_Pin, 1);
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	2104      	movs	r1, #4
 8000aa4:	48aa      	ldr	r0, [pc, #680]	; (8000d50 <display7SEG_2+0x324>)
 8000aa6:	f000 fe34 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a2_GPIO_Port, d2_Pin, 0);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	2108      	movs	r1, #8
 8000aae:	48a8      	ldr	r0, [pc, #672]	; (8000d50 <display7SEG_2+0x324>)
 8000ab0:	f000 fe2f 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a2_GPIO_Port, e2_Pin, 0);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	2110      	movs	r1, #16
 8000ab8:	48a5      	ldr	r0, [pc, #660]	; (8000d50 <display7SEG_2+0x324>)
 8000aba:	f000 fe2a 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a2_GPIO_Port, f2_Pin, 1);
 8000abe:	2201      	movs	r2, #1
 8000ac0:	2120      	movs	r1, #32
 8000ac2:	48a3      	ldr	r0, [pc, #652]	; (8000d50 <display7SEG_2+0x324>)
 8000ac4:	f000 fe25 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a2_GPIO_Port, g2_Pin, 0);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	2140      	movs	r1, #64	; 0x40
 8000acc:	48a0      	ldr	r0, [pc, #640]	; (8000d50 <display7SEG_2+0x324>)
 8000ace:	f000 fe20 	bl	8001712 <HAL_GPIO_WritePin>
}
 8000ad2:	e136      	b.n	8000d42 <display7SEG_2+0x316>
	else if (num==3){
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	2b03      	cmp	r3, #3
 8000ad8:	d123      	bne.n	8000b22 <display7SEG_2+0xf6>
		HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, 0);
 8000ada:	2200      	movs	r2, #0
 8000adc:	2101      	movs	r1, #1
 8000ade:	489c      	ldr	r0, [pc, #624]	; (8000d50 <display7SEG_2+0x324>)
 8000ae0:	f000 fe17 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a2_GPIO_Port, b2_Pin, 0);
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	2102      	movs	r1, #2
 8000ae8:	4899      	ldr	r0, [pc, #612]	; (8000d50 <display7SEG_2+0x324>)
 8000aea:	f000 fe12 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a2_GPIO_Port, c2_Pin, 0);
 8000aee:	2200      	movs	r2, #0
 8000af0:	2104      	movs	r1, #4
 8000af2:	4897      	ldr	r0, [pc, #604]	; (8000d50 <display7SEG_2+0x324>)
 8000af4:	f000 fe0d 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a2_GPIO_Port, d2_Pin, 0);
 8000af8:	2200      	movs	r2, #0
 8000afa:	2108      	movs	r1, #8
 8000afc:	4894      	ldr	r0, [pc, #592]	; (8000d50 <display7SEG_2+0x324>)
 8000afe:	f000 fe08 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a2_GPIO_Port, e2_Pin, 1);
 8000b02:	2201      	movs	r2, #1
 8000b04:	2110      	movs	r1, #16
 8000b06:	4892      	ldr	r0, [pc, #584]	; (8000d50 <display7SEG_2+0x324>)
 8000b08:	f000 fe03 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a2_GPIO_Port, f2_Pin, 1);
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	2120      	movs	r1, #32
 8000b10:	488f      	ldr	r0, [pc, #572]	; (8000d50 <display7SEG_2+0x324>)
 8000b12:	f000 fdfe 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a2_GPIO_Port, g2_Pin, 0);
 8000b16:	2200      	movs	r2, #0
 8000b18:	2140      	movs	r1, #64	; 0x40
 8000b1a:	488d      	ldr	r0, [pc, #564]	; (8000d50 <display7SEG_2+0x324>)
 8000b1c:	f000 fdf9 	bl	8001712 <HAL_GPIO_WritePin>
}
 8000b20:	e10f      	b.n	8000d42 <display7SEG_2+0x316>
	else if (num==4){
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	2b04      	cmp	r3, #4
 8000b26:	d123      	bne.n	8000b70 <display7SEG_2+0x144>
		HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, 1);
 8000b28:	2201      	movs	r2, #1
 8000b2a:	2101      	movs	r1, #1
 8000b2c:	4888      	ldr	r0, [pc, #544]	; (8000d50 <display7SEG_2+0x324>)
 8000b2e:	f000 fdf0 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a2_GPIO_Port, b2_Pin, 0);
 8000b32:	2200      	movs	r2, #0
 8000b34:	2102      	movs	r1, #2
 8000b36:	4886      	ldr	r0, [pc, #536]	; (8000d50 <display7SEG_2+0x324>)
 8000b38:	f000 fdeb 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a2_GPIO_Port, c2_Pin, 0);
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	2104      	movs	r1, #4
 8000b40:	4883      	ldr	r0, [pc, #524]	; (8000d50 <display7SEG_2+0x324>)
 8000b42:	f000 fde6 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a2_GPIO_Port, d2_Pin, 1);
 8000b46:	2201      	movs	r2, #1
 8000b48:	2108      	movs	r1, #8
 8000b4a:	4881      	ldr	r0, [pc, #516]	; (8000d50 <display7SEG_2+0x324>)
 8000b4c:	f000 fde1 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a2_GPIO_Port, e2_Pin, 1);
 8000b50:	2201      	movs	r2, #1
 8000b52:	2110      	movs	r1, #16
 8000b54:	487e      	ldr	r0, [pc, #504]	; (8000d50 <display7SEG_2+0x324>)
 8000b56:	f000 fddc 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a2_GPIO_Port, f2_Pin, 0);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	2120      	movs	r1, #32
 8000b5e:	487c      	ldr	r0, [pc, #496]	; (8000d50 <display7SEG_2+0x324>)
 8000b60:	f000 fdd7 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a2_GPIO_Port, g2_Pin, 0);
 8000b64:	2200      	movs	r2, #0
 8000b66:	2140      	movs	r1, #64	; 0x40
 8000b68:	4879      	ldr	r0, [pc, #484]	; (8000d50 <display7SEG_2+0x324>)
 8000b6a:	f000 fdd2 	bl	8001712 <HAL_GPIO_WritePin>
}
 8000b6e:	e0e8      	b.n	8000d42 <display7SEG_2+0x316>
	else if (num==5){
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	2b05      	cmp	r3, #5
 8000b74:	d123      	bne.n	8000bbe <display7SEG_2+0x192>
		HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, 0);
 8000b76:	2200      	movs	r2, #0
 8000b78:	2101      	movs	r1, #1
 8000b7a:	4875      	ldr	r0, [pc, #468]	; (8000d50 <display7SEG_2+0x324>)
 8000b7c:	f000 fdc9 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a2_GPIO_Port, b2_Pin, 1);
 8000b80:	2201      	movs	r2, #1
 8000b82:	2102      	movs	r1, #2
 8000b84:	4872      	ldr	r0, [pc, #456]	; (8000d50 <display7SEG_2+0x324>)
 8000b86:	f000 fdc4 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a2_GPIO_Port, c2_Pin, 0);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	2104      	movs	r1, #4
 8000b8e:	4870      	ldr	r0, [pc, #448]	; (8000d50 <display7SEG_2+0x324>)
 8000b90:	f000 fdbf 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a2_GPIO_Port, d2_Pin, 0);
 8000b94:	2200      	movs	r2, #0
 8000b96:	2108      	movs	r1, #8
 8000b98:	486d      	ldr	r0, [pc, #436]	; (8000d50 <display7SEG_2+0x324>)
 8000b9a:	f000 fdba 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a2_GPIO_Port, e2_Pin, 1);
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	2110      	movs	r1, #16
 8000ba2:	486b      	ldr	r0, [pc, #428]	; (8000d50 <display7SEG_2+0x324>)
 8000ba4:	f000 fdb5 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a2_GPIO_Port, f2_Pin, 0);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	2120      	movs	r1, #32
 8000bac:	4868      	ldr	r0, [pc, #416]	; (8000d50 <display7SEG_2+0x324>)
 8000bae:	f000 fdb0 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a2_GPIO_Port, g2_Pin, 0);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	2140      	movs	r1, #64	; 0x40
 8000bb6:	4866      	ldr	r0, [pc, #408]	; (8000d50 <display7SEG_2+0x324>)
 8000bb8:	f000 fdab 	bl	8001712 <HAL_GPIO_WritePin>
}
 8000bbc:	e0c1      	b.n	8000d42 <display7SEG_2+0x316>
	else if (num==6){
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2b06      	cmp	r3, #6
 8000bc2:	d123      	bne.n	8000c0c <display7SEG_2+0x1e0>
		HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, 0);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	2101      	movs	r1, #1
 8000bc8:	4861      	ldr	r0, [pc, #388]	; (8000d50 <display7SEG_2+0x324>)
 8000bca:	f000 fda2 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a2_GPIO_Port, b2_Pin, 1);
 8000bce:	2201      	movs	r2, #1
 8000bd0:	2102      	movs	r1, #2
 8000bd2:	485f      	ldr	r0, [pc, #380]	; (8000d50 <display7SEG_2+0x324>)
 8000bd4:	f000 fd9d 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a2_GPIO_Port, c2_Pin, 0);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	2104      	movs	r1, #4
 8000bdc:	485c      	ldr	r0, [pc, #368]	; (8000d50 <display7SEG_2+0x324>)
 8000bde:	f000 fd98 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a2_GPIO_Port, d2_Pin, 0);
 8000be2:	2200      	movs	r2, #0
 8000be4:	2108      	movs	r1, #8
 8000be6:	485a      	ldr	r0, [pc, #360]	; (8000d50 <display7SEG_2+0x324>)
 8000be8:	f000 fd93 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a2_GPIO_Port, e2_Pin, 0);
 8000bec:	2200      	movs	r2, #0
 8000bee:	2110      	movs	r1, #16
 8000bf0:	4857      	ldr	r0, [pc, #348]	; (8000d50 <display7SEG_2+0x324>)
 8000bf2:	f000 fd8e 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a2_GPIO_Port, f2_Pin, 0);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	2120      	movs	r1, #32
 8000bfa:	4855      	ldr	r0, [pc, #340]	; (8000d50 <display7SEG_2+0x324>)
 8000bfc:	f000 fd89 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a2_GPIO_Port, g2_Pin, 0);
 8000c00:	2200      	movs	r2, #0
 8000c02:	2140      	movs	r1, #64	; 0x40
 8000c04:	4852      	ldr	r0, [pc, #328]	; (8000d50 <display7SEG_2+0x324>)
 8000c06:	f000 fd84 	bl	8001712 <HAL_GPIO_WritePin>
}
 8000c0a:	e09a      	b.n	8000d42 <display7SEG_2+0x316>
	else if (num==7){
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	2b07      	cmp	r3, #7
 8000c10:	d123      	bne.n	8000c5a <display7SEG_2+0x22e>
		HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, 0);
 8000c12:	2200      	movs	r2, #0
 8000c14:	2101      	movs	r1, #1
 8000c16:	484e      	ldr	r0, [pc, #312]	; (8000d50 <display7SEG_2+0x324>)
 8000c18:	f000 fd7b 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a2_GPIO_Port, b2_Pin, 0);
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	2102      	movs	r1, #2
 8000c20:	484b      	ldr	r0, [pc, #300]	; (8000d50 <display7SEG_2+0x324>)
 8000c22:	f000 fd76 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a2_GPIO_Port, c2_Pin, 0);
 8000c26:	2200      	movs	r2, #0
 8000c28:	2104      	movs	r1, #4
 8000c2a:	4849      	ldr	r0, [pc, #292]	; (8000d50 <display7SEG_2+0x324>)
 8000c2c:	f000 fd71 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a2_GPIO_Port, d2_Pin, 1);
 8000c30:	2201      	movs	r2, #1
 8000c32:	2108      	movs	r1, #8
 8000c34:	4846      	ldr	r0, [pc, #280]	; (8000d50 <display7SEG_2+0x324>)
 8000c36:	f000 fd6c 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a2_GPIO_Port, e2_Pin, 1);
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	2110      	movs	r1, #16
 8000c3e:	4844      	ldr	r0, [pc, #272]	; (8000d50 <display7SEG_2+0x324>)
 8000c40:	f000 fd67 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a2_GPIO_Port, f2_Pin, 1);
 8000c44:	2201      	movs	r2, #1
 8000c46:	2120      	movs	r1, #32
 8000c48:	4841      	ldr	r0, [pc, #260]	; (8000d50 <display7SEG_2+0x324>)
 8000c4a:	f000 fd62 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a2_GPIO_Port, g2_Pin, 1);
 8000c4e:	2201      	movs	r2, #1
 8000c50:	2140      	movs	r1, #64	; 0x40
 8000c52:	483f      	ldr	r0, [pc, #252]	; (8000d50 <display7SEG_2+0x324>)
 8000c54:	f000 fd5d 	bl	8001712 <HAL_GPIO_WritePin>
}
 8000c58:	e073      	b.n	8000d42 <display7SEG_2+0x316>
	else if (num==8){
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	2b08      	cmp	r3, #8
 8000c5e:	d123      	bne.n	8000ca8 <display7SEG_2+0x27c>
		HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, 0);
 8000c60:	2200      	movs	r2, #0
 8000c62:	2101      	movs	r1, #1
 8000c64:	483a      	ldr	r0, [pc, #232]	; (8000d50 <display7SEG_2+0x324>)
 8000c66:	f000 fd54 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a2_GPIO_Port, b2_Pin, 0);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2102      	movs	r1, #2
 8000c6e:	4838      	ldr	r0, [pc, #224]	; (8000d50 <display7SEG_2+0x324>)
 8000c70:	f000 fd4f 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a2_GPIO_Port, c2_Pin, 0);
 8000c74:	2200      	movs	r2, #0
 8000c76:	2104      	movs	r1, #4
 8000c78:	4835      	ldr	r0, [pc, #212]	; (8000d50 <display7SEG_2+0x324>)
 8000c7a:	f000 fd4a 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a2_GPIO_Port, d2_Pin, 0);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	2108      	movs	r1, #8
 8000c82:	4833      	ldr	r0, [pc, #204]	; (8000d50 <display7SEG_2+0x324>)
 8000c84:	f000 fd45 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a2_GPIO_Port, e2_Pin, 0);
 8000c88:	2200      	movs	r2, #0
 8000c8a:	2110      	movs	r1, #16
 8000c8c:	4830      	ldr	r0, [pc, #192]	; (8000d50 <display7SEG_2+0x324>)
 8000c8e:	f000 fd40 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a2_GPIO_Port, f2_Pin, 0);
 8000c92:	2200      	movs	r2, #0
 8000c94:	2120      	movs	r1, #32
 8000c96:	482e      	ldr	r0, [pc, #184]	; (8000d50 <display7SEG_2+0x324>)
 8000c98:	f000 fd3b 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a2_GPIO_Port, g2_Pin, 0);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	2140      	movs	r1, #64	; 0x40
 8000ca0:	482b      	ldr	r0, [pc, #172]	; (8000d50 <display7SEG_2+0x324>)
 8000ca2:	f000 fd36 	bl	8001712 <HAL_GPIO_WritePin>
}
 8000ca6:	e04c      	b.n	8000d42 <display7SEG_2+0x316>
	else if (num==9){
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2b09      	cmp	r3, #9
 8000cac:	d123      	bne.n	8000cf6 <display7SEG_2+0x2ca>
		HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, 0);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	2101      	movs	r1, #1
 8000cb2:	4827      	ldr	r0, [pc, #156]	; (8000d50 <display7SEG_2+0x324>)
 8000cb4:	f000 fd2d 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a2_GPIO_Port, b2_Pin, 0);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	2102      	movs	r1, #2
 8000cbc:	4824      	ldr	r0, [pc, #144]	; (8000d50 <display7SEG_2+0x324>)
 8000cbe:	f000 fd28 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a2_GPIO_Port, c2_Pin, 0);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2104      	movs	r1, #4
 8000cc6:	4822      	ldr	r0, [pc, #136]	; (8000d50 <display7SEG_2+0x324>)
 8000cc8:	f000 fd23 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a2_GPIO_Port, d2_Pin, 0);
 8000ccc:	2200      	movs	r2, #0
 8000cce:	2108      	movs	r1, #8
 8000cd0:	481f      	ldr	r0, [pc, #124]	; (8000d50 <display7SEG_2+0x324>)
 8000cd2:	f000 fd1e 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a2_GPIO_Port, e2_Pin, 1);
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	2110      	movs	r1, #16
 8000cda:	481d      	ldr	r0, [pc, #116]	; (8000d50 <display7SEG_2+0x324>)
 8000cdc:	f000 fd19 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a2_GPIO_Port, f2_Pin, 0);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	2120      	movs	r1, #32
 8000ce4:	481a      	ldr	r0, [pc, #104]	; (8000d50 <display7SEG_2+0x324>)
 8000ce6:	f000 fd14 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a2_GPIO_Port, g2_Pin, 0);
 8000cea:	2200      	movs	r2, #0
 8000cec:	2140      	movs	r1, #64	; 0x40
 8000cee:	4818      	ldr	r0, [pc, #96]	; (8000d50 <display7SEG_2+0x324>)
 8000cf0:	f000 fd0f 	bl	8001712 <HAL_GPIO_WritePin>
}
 8000cf4:	e025      	b.n	8000d42 <display7SEG_2+0x316>
	} else if (num==0){
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d122      	bne.n	8000d42 <display7SEG_2+0x316>
		HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, 0);
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	2101      	movs	r1, #1
 8000d00:	4813      	ldr	r0, [pc, #76]	; (8000d50 <display7SEG_2+0x324>)
 8000d02:	f000 fd06 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a2_GPIO_Port, b2_Pin, 0);
 8000d06:	2200      	movs	r2, #0
 8000d08:	2102      	movs	r1, #2
 8000d0a:	4811      	ldr	r0, [pc, #68]	; (8000d50 <display7SEG_2+0x324>)
 8000d0c:	f000 fd01 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a2_GPIO_Port, c2_Pin, 0);
 8000d10:	2200      	movs	r2, #0
 8000d12:	2104      	movs	r1, #4
 8000d14:	480e      	ldr	r0, [pc, #56]	; (8000d50 <display7SEG_2+0x324>)
 8000d16:	f000 fcfc 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a2_GPIO_Port, d2_Pin, 0);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2108      	movs	r1, #8
 8000d1e:	480c      	ldr	r0, [pc, #48]	; (8000d50 <display7SEG_2+0x324>)
 8000d20:	f000 fcf7 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a2_GPIO_Port, e2_Pin, 0);
 8000d24:	2200      	movs	r2, #0
 8000d26:	2110      	movs	r1, #16
 8000d28:	4809      	ldr	r0, [pc, #36]	; (8000d50 <display7SEG_2+0x324>)
 8000d2a:	f000 fcf2 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a2_GPIO_Port, f2_Pin, 0);
 8000d2e:	2200      	movs	r2, #0
 8000d30:	2120      	movs	r1, #32
 8000d32:	4807      	ldr	r0, [pc, #28]	; (8000d50 <display7SEG_2+0x324>)
 8000d34:	f000 fced 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a2_GPIO_Port, g2_Pin, 1 );
 8000d38:	2201      	movs	r2, #1
 8000d3a:	2140      	movs	r1, #64	; 0x40
 8000d3c:	4804      	ldr	r0, [pc, #16]	; (8000d50 <display7SEG_2+0x324>)
 8000d3e:	f000 fce8 	bl	8001712 <HAL_GPIO_WritePin>
}
 8000d42:	bf00      	nop
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	200003c4 	.word	0x200003c4
 8000d50:	40010c00 	.word	0x40010c00

08000d54 <display7SEG_1>:
void display7SEG_1(void){
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
	int num = second;
 8000d5a:	4bc6      	ldr	r3, [pc, #792]	; (8001074 <display7SEG_1+0x320>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	607b      	str	r3, [r7, #4]
	if (num==1){
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2b01      	cmp	r3, #1
 8000d64:	d123      	bne.n	8000dae <display7SEG_1+0x5a>
		HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, 1);
 8000d66:	2201      	movs	r2, #1
 8000d68:	2101      	movs	r1, #1
 8000d6a:	48c3      	ldr	r0, [pc, #780]	; (8001078 <display7SEG_1+0x324>)
 8000d6c:	f000 fcd1 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a1_GPIO_Port, b1_Pin, 0);
 8000d70:	2200      	movs	r2, #0
 8000d72:	2102      	movs	r1, #2
 8000d74:	48c0      	ldr	r0, [pc, #768]	; (8001078 <display7SEG_1+0x324>)
 8000d76:	f000 fccc 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a1_GPIO_Port, c1_Pin, 0);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	2104      	movs	r1, #4
 8000d7e:	48be      	ldr	r0, [pc, #760]	; (8001078 <display7SEG_1+0x324>)
 8000d80:	f000 fcc7 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a1_GPIO_Port, d1_Pin, 1);
 8000d84:	2201      	movs	r2, #1
 8000d86:	2108      	movs	r1, #8
 8000d88:	48bb      	ldr	r0, [pc, #748]	; (8001078 <display7SEG_1+0x324>)
 8000d8a:	f000 fcc2 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a1_GPIO_Port, e1_Pin, 1);
 8000d8e:	2201      	movs	r2, #1
 8000d90:	2110      	movs	r1, #16
 8000d92:	48b9      	ldr	r0, [pc, #740]	; (8001078 <display7SEG_1+0x324>)
 8000d94:	f000 fcbd 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a1_GPIO_Port, f1_Pin, 1);
 8000d98:	2201      	movs	r2, #1
 8000d9a:	2120      	movs	r1, #32
 8000d9c:	48b6      	ldr	r0, [pc, #728]	; (8001078 <display7SEG_1+0x324>)
 8000d9e:	f000 fcb8 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a1_GPIO_Port, g1_Pin, 1);
 8000da2:	2201      	movs	r2, #1
 8000da4:	2140      	movs	r1, #64	; 0x40
 8000da6:	48b4      	ldr	r0, [pc, #720]	; (8001078 <display7SEG_1+0x324>)
 8000da8:	f000 fcb3 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a1_GPIO_Port, d1_Pin, 0);
		HAL_GPIO_WritePin(a1_GPIO_Port, e1_Pin, 0);
		HAL_GPIO_WritePin(a1_GPIO_Port, f1_Pin, 0);
		HAL_GPIO_WritePin(a1_GPIO_Port, g1_Pin, 1 );
	}
}
 8000dac:	e15d      	b.n	800106a <display7SEG_1+0x316>
	else if (num==2){
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2b02      	cmp	r3, #2
 8000db2:	d123      	bne.n	8000dfc <display7SEG_1+0xa8>
		HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, 0);
 8000db4:	2200      	movs	r2, #0
 8000db6:	2101      	movs	r1, #1
 8000db8:	48af      	ldr	r0, [pc, #700]	; (8001078 <display7SEG_1+0x324>)
 8000dba:	f000 fcaa 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a1_GPIO_Port, b1_Pin, 0);
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	2102      	movs	r1, #2
 8000dc2:	48ad      	ldr	r0, [pc, #692]	; (8001078 <display7SEG_1+0x324>)
 8000dc4:	f000 fca5 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a1_GPIO_Port, c1_Pin, 1);
 8000dc8:	2201      	movs	r2, #1
 8000dca:	2104      	movs	r1, #4
 8000dcc:	48aa      	ldr	r0, [pc, #680]	; (8001078 <display7SEG_1+0x324>)
 8000dce:	f000 fca0 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a1_GPIO_Port, d1_Pin, 0);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2108      	movs	r1, #8
 8000dd6:	48a8      	ldr	r0, [pc, #672]	; (8001078 <display7SEG_1+0x324>)
 8000dd8:	f000 fc9b 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a1_GPIO_Port, e1_Pin, 0);
 8000ddc:	2200      	movs	r2, #0
 8000dde:	2110      	movs	r1, #16
 8000de0:	48a5      	ldr	r0, [pc, #660]	; (8001078 <display7SEG_1+0x324>)
 8000de2:	f000 fc96 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a1_GPIO_Port, f1_Pin, 1);
 8000de6:	2201      	movs	r2, #1
 8000de8:	2120      	movs	r1, #32
 8000dea:	48a3      	ldr	r0, [pc, #652]	; (8001078 <display7SEG_1+0x324>)
 8000dec:	f000 fc91 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a1_GPIO_Port, g1_Pin, 0);
 8000df0:	2200      	movs	r2, #0
 8000df2:	2140      	movs	r1, #64	; 0x40
 8000df4:	48a0      	ldr	r0, [pc, #640]	; (8001078 <display7SEG_1+0x324>)
 8000df6:	f000 fc8c 	bl	8001712 <HAL_GPIO_WritePin>
}
 8000dfa:	e136      	b.n	800106a <display7SEG_1+0x316>
	else if (num==3){
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2b03      	cmp	r3, #3
 8000e00:	d123      	bne.n	8000e4a <display7SEG_1+0xf6>
		HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, 0);
 8000e02:	2200      	movs	r2, #0
 8000e04:	2101      	movs	r1, #1
 8000e06:	489c      	ldr	r0, [pc, #624]	; (8001078 <display7SEG_1+0x324>)
 8000e08:	f000 fc83 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a1_GPIO_Port, b1_Pin, 0);
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	2102      	movs	r1, #2
 8000e10:	4899      	ldr	r0, [pc, #612]	; (8001078 <display7SEG_1+0x324>)
 8000e12:	f000 fc7e 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a1_GPIO_Port, c1_Pin, 0);
 8000e16:	2200      	movs	r2, #0
 8000e18:	2104      	movs	r1, #4
 8000e1a:	4897      	ldr	r0, [pc, #604]	; (8001078 <display7SEG_1+0x324>)
 8000e1c:	f000 fc79 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a1_GPIO_Port, d1_Pin, 0);
 8000e20:	2200      	movs	r2, #0
 8000e22:	2108      	movs	r1, #8
 8000e24:	4894      	ldr	r0, [pc, #592]	; (8001078 <display7SEG_1+0x324>)
 8000e26:	f000 fc74 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a1_GPIO_Port, e1_Pin, 1);
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	2110      	movs	r1, #16
 8000e2e:	4892      	ldr	r0, [pc, #584]	; (8001078 <display7SEG_1+0x324>)
 8000e30:	f000 fc6f 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a1_GPIO_Port, f1_Pin, 1);
 8000e34:	2201      	movs	r2, #1
 8000e36:	2120      	movs	r1, #32
 8000e38:	488f      	ldr	r0, [pc, #572]	; (8001078 <display7SEG_1+0x324>)
 8000e3a:	f000 fc6a 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a1_GPIO_Port, g1_Pin, 0);
 8000e3e:	2200      	movs	r2, #0
 8000e40:	2140      	movs	r1, #64	; 0x40
 8000e42:	488d      	ldr	r0, [pc, #564]	; (8001078 <display7SEG_1+0x324>)
 8000e44:	f000 fc65 	bl	8001712 <HAL_GPIO_WritePin>
}
 8000e48:	e10f      	b.n	800106a <display7SEG_1+0x316>
	else if (num==4){
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2b04      	cmp	r3, #4
 8000e4e:	d123      	bne.n	8000e98 <display7SEG_1+0x144>
		HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, 1);
 8000e50:	2201      	movs	r2, #1
 8000e52:	2101      	movs	r1, #1
 8000e54:	4888      	ldr	r0, [pc, #544]	; (8001078 <display7SEG_1+0x324>)
 8000e56:	f000 fc5c 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a1_GPIO_Port, b1_Pin, 0);
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	2102      	movs	r1, #2
 8000e5e:	4886      	ldr	r0, [pc, #536]	; (8001078 <display7SEG_1+0x324>)
 8000e60:	f000 fc57 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a1_GPIO_Port, c1_Pin, 0);
 8000e64:	2200      	movs	r2, #0
 8000e66:	2104      	movs	r1, #4
 8000e68:	4883      	ldr	r0, [pc, #524]	; (8001078 <display7SEG_1+0x324>)
 8000e6a:	f000 fc52 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a1_GPIO_Port, d1_Pin, 1);
 8000e6e:	2201      	movs	r2, #1
 8000e70:	2108      	movs	r1, #8
 8000e72:	4881      	ldr	r0, [pc, #516]	; (8001078 <display7SEG_1+0x324>)
 8000e74:	f000 fc4d 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a1_GPIO_Port, e1_Pin, 1);
 8000e78:	2201      	movs	r2, #1
 8000e7a:	2110      	movs	r1, #16
 8000e7c:	487e      	ldr	r0, [pc, #504]	; (8001078 <display7SEG_1+0x324>)
 8000e7e:	f000 fc48 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a1_GPIO_Port, f1_Pin, 0);
 8000e82:	2200      	movs	r2, #0
 8000e84:	2120      	movs	r1, #32
 8000e86:	487c      	ldr	r0, [pc, #496]	; (8001078 <display7SEG_1+0x324>)
 8000e88:	f000 fc43 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a1_GPIO_Port, g1_Pin, 0);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	2140      	movs	r1, #64	; 0x40
 8000e90:	4879      	ldr	r0, [pc, #484]	; (8001078 <display7SEG_1+0x324>)
 8000e92:	f000 fc3e 	bl	8001712 <HAL_GPIO_WritePin>
}
 8000e96:	e0e8      	b.n	800106a <display7SEG_1+0x316>
	else if (num==5){
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2b05      	cmp	r3, #5
 8000e9c:	d123      	bne.n	8000ee6 <display7SEG_1+0x192>
		HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, 0);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	2101      	movs	r1, #1
 8000ea2:	4875      	ldr	r0, [pc, #468]	; (8001078 <display7SEG_1+0x324>)
 8000ea4:	f000 fc35 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a1_GPIO_Port, b1_Pin, 1);
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	2102      	movs	r1, #2
 8000eac:	4872      	ldr	r0, [pc, #456]	; (8001078 <display7SEG_1+0x324>)
 8000eae:	f000 fc30 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a1_GPIO_Port, c1_Pin, 0);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	2104      	movs	r1, #4
 8000eb6:	4870      	ldr	r0, [pc, #448]	; (8001078 <display7SEG_1+0x324>)
 8000eb8:	f000 fc2b 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a1_GPIO_Port, d1_Pin, 0);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	2108      	movs	r1, #8
 8000ec0:	486d      	ldr	r0, [pc, #436]	; (8001078 <display7SEG_1+0x324>)
 8000ec2:	f000 fc26 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a1_GPIO_Port, e1_Pin, 1);
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	2110      	movs	r1, #16
 8000eca:	486b      	ldr	r0, [pc, #428]	; (8001078 <display7SEG_1+0x324>)
 8000ecc:	f000 fc21 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a1_GPIO_Port, f1_Pin, 0);
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	2120      	movs	r1, #32
 8000ed4:	4868      	ldr	r0, [pc, #416]	; (8001078 <display7SEG_1+0x324>)
 8000ed6:	f000 fc1c 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a1_GPIO_Port, g1_Pin, 0);
 8000eda:	2200      	movs	r2, #0
 8000edc:	2140      	movs	r1, #64	; 0x40
 8000ede:	4866      	ldr	r0, [pc, #408]	; (8001078 <display7SEG_1+0x324>)
 8000ee0:	f000 fc17 	bl	8001712 <HAL_GPIO_WritePin>
}
 8000ee4:	e0c1      	b.n	800106a <display7SEG_1+0x316>
	else if (num==6){
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2b06      	cmp	r3, #6
 8000eea:	d123      	bne.n	8000f34 <display7SEG_1+0x1e0>
		HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, 0);
 8000eec:	2200      	movs	r2, #0
 8000eee:	2101      	movs	r1, #1
 8000ef0:	4861      	ldr	r0, [pc, #388]	; (8001078 <display7SEG_1+0x324>)
 8000ef2:	f000 fc0e 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a1_GPIO_Port, b1_Pin, 1);
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	2102      	movs	r1, #2
 8000efa:	485f      	ldr	r0, [pc, #380]	; (8001078 <display7SEG_1+0x324>)
 8000efc:	f000 fc09 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a1_GPIO_Port, c1_Pin, 0);
 8000f00:	2200      	movs	r2, #0
 8000f02:	2104      	movs	r1, #4
 8000f04:	485c      	ldr	r0, [pc, #368]	; (8001078 <display7SEG_1+0x324>)
 8000f06:	f000 fc04 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a1_GPIO_Port, d1_Pin, 0);
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	2108      	movs	r1, #8
 8000f0e:	485a      	ldr	r0, [pc, #360]	; (8001078 <display7SEG_1+0x324>)
 8000f10:	f000 fbff 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a1_GPIO_Port, e1_Pin, 0);
 8000f14:	2200      	movs	r2, #0
 8000f16:	2110      	movs	r1, #16
 8000f18:	4857      	ldr	r0, [pc, #348]	; (8001078 <display7SEG_1+0x324>)
 8000f1a:	f000 fbfa 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a1_GPIO_Port, f1_Pin, 0);
 8000f1e:	2200      	movs	r2, #0
 8000f20:	2120      	movs	r1, #32
 8000f22:	4855      	ldr	r0, [pc, #340]	; (8001078 <display7SEG_1+0x324>)
 8000f24:	f000 fbf5 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a1_GPIO_Port, g1_Pin, 0);
 8000f28:	2200      	movs	r2, #0
 8000f2a:	2140      	movs	r1, #64	; 0x40
 8000f2c:	4852      	ldr	r0, [pc, #328]	; (8001078 <display7SEG_1+0x324>)
 8000f2e:	f000 fbf0 	bl	8001712 <HAL_GPIO_WritePin>
}
 8000f32:	e09a      	b.n	800106a <display7SEG_1+0x316>
	else if (num==7){
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2b07      	cmp	r3, #7
 8000f38:	d123      	bne.n	8000f82 <display7SEG_1+0x22e>
		HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, 0);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2101      	movs	r1, #1
 8000f3e:	484e      	ldr	r0, [pc, #312]	; (8001078 <display7SEG_1+0x324>)
 8000f40:	f000 fbe7 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a1_GPIO_Port, b1_Pin, 0);
 8000f44:	2200      	movs	r2, #0
 8000f46:	2102      	movs	r1, #2
 8000f48:	484b      	ldr	r0, [pc, #300]	; (8001078 <display7SEG_1+0x324>)
 8000f4a:	f000 fbe2 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a1_GPIO_Port, c1_Pin, 0);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	2104      	movs	r1, #4
 8000f52:	4849      	ldr	r0, [pc, #292]	; (8001078 <display7SEG_1+0x324>)
 8000f54:	f000 fbdd 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a1_GPIO_Port, d1_Pin, 1);
 8000f58:	2201      	movs	r2, #1
 8000f5a:	2108      	movs	r1, #8
 8000f5c:	4846      	ldr	r0, [pc, #280]	; (8001078 <display7SEG_1+0x324>)
 8000f5e:	f000 fbd8 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a1_GPIO_Port, e1_Pin, 1);
 8000f62:	2201      	movs	r2, #1
 8000f64:	2110      	movs	r1, #16
 8000f66:	4844      	ldr	r0, [pc, #272]	; (8001078 <display7SEG_1+0x324>)
 8000f68:	f000 fbd3 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a1_GPIO_Port, f1_Pin, 1);
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	2120      	movs	r1, #32
 8000f70:	4841      	ldr	r0, [pc, #260]	; (8001078 <display7SEG_1+0x324>)
 8000f72:	f000 fbce 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a1_GPIO_Port, g1_Pin, 1);
 8000f76:	2201      	movs	r2, #1
 8000f78:	2140      	movs	r1, #64	; 0x40
 8000f7a:	483f      	ldr	r0, [pc, #252]	; (8001078 <display7SEG_1+0x324>)
 8000f7c:	f000 fbc9 	bl	8001712 <HAL_GPIO_WritePin>
}
 8000f80:	e073      	b.n	800106a <display7SEG_1+0x316>
	else if (num==8){
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2b08      	cmp	r3, #8
 8000f86:	d123      	bne.n	8000fd0 <display7SEG_1+0x27c>
		HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, 0);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	2101      	movs	r1, #1
 8000f8c:	483a      	ldr	r0, [pc, #232]	; (8001078 <display7SEG_1+0x324>)
 8000f8e:	f000 fbc0 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a1_GPIO_Port, b1_Pin, 0);
 8000f92:	2200      	movs	r2, #0
 8000f94:	2102      	movs	r1, #2
 8000f96:	4838      	ldr	r0, [pc, #224]	; (8001078 <display7SEG_1+0x324>)
 8000f98:	f000 fbbb 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a1_GPIO_Port, c1_Pin, 0);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	2104      	movs	r1, #4
 8000fa0:	4835      	ldr	r0, [pc, #212]	; (8001078 <display7SEG_1+0x324>)
 8000fa2:	f000 fbb6 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a1_GPIO_Port, d1_Pin, 0);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	2108      	movs	r1, #8
 8000faa:	4833      	ldr	r0, [pc, #204]	; (8001078 <display7SEG_1+0x324>)
 8000fac:	f000 fbb1 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a1_GPIO_Port, e1_Pin, 0);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	2110      	movs	r1, #16
 8000fb4:	4830      	ldr	r0, [pc, #192]	; (8001078 <display7SEG_1+0x324>)
 8000fb6:	f000 fbac 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a1_GPIO_Port, f1_Pin, 0);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	2120      	movs	r1, #32
 8000fbe:	482e      	ldr	r0, [pc, #184]	; (8001078 <display7SEG_1+0x324>)
 8000fc0:	f000 fba7 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a1_GPIO_Port, g1_Pin, 0);
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	2140      	movs	r1, #64	; 0x40
 8000fc8:	482b      	ldr	r0, [pc, #172]	; (8001078 <display7SEG_1+0x324>)
 8000fca:	f000 fba2 	bl	8001712 <HAL_GPIO_WritePin>
}
 8000fce:	e04c      	b.n	800106a <display7SEG_1+0x316>
	else if (num==9){
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2b09      	cmp	r3, #9
 8000fd4:	d123      	bne.n	800101e <display7SEG_1+0x2ca>
		HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, 0);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	2101      	movs	r1, #1
 8000fda:	4827      	ldr	r0, [pc, #156]	; (8001078 <display7SEG_1+0x324>)
 8000fdc:	f000 fb99 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a1_GPIO_Port, b1_Pin, 0);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	2102      	movs	r1, #2
 8000fe4:	4824      	ldr	r0, [pc, #144]	; (8001078 <display7SEG_1+0x324>)
 8000fe6:	f000 fb94 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a1_GPIO_Port, c1_Pin, 0);
 8000fea:	2200      	movs	r2, #0
 8000fec:	2104      	movs	r1, #4
 8000fee:	4822      	ldr	r0, [pc, #136]	; (8001078 <display7SEG_1+0x324>)
 8000ff0:	f000 fb8f 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a1_GPIO_Port, d1_Pin, 0);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	2108      	movs	r1, #8
 8000ff8:	481f      	ldr	r0, [pc, #124]	; (8001078 <display7SEG_1+0x324>)
 8000ffa:	f000 fb8a 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a1_GPIO_Port, e1_Pin, 1);
 8000ffe:	2201      	movs	r2, #1
 8001000:	2110      	movs	r1, #16
 8001002:	481d      	ldr	r0, [pc, #116]	; (8001078 <display7SEG_1+0x324>)
 8001004:	f000 fb85 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a1_GPIO_Port, f1_Pin, 0);
 8001008:	2200      	movs	r2, #0
 800100a:	2120      	movs	r1, #32
 800100c:	481a      	ldr	r0, [pc, #104]	; (8001078 <display7SEG_1+0x324>)
 800100e:	f000 fb80 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a1_GPIO_Port, g1_Pin, 0);
 8001012:	2200      	movs	r2, #0
 8001014:	2140      	movs	r1, #64	; 0x40
 8001016:	4818      	ldr	r0, [pc, #96]	; (8001078 <display7SEG_1+0x324>)
 8001018:	f000 fb7b 	bl	8001712 <HAL_GPIO_WritePin>
}
 800101c:	e025      	b.n	800106a <display7SEG_1+0x316>
	else if (num==0){
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d122      	bne.n	800106a <display7SEG_1+0x316>
		HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, 0);
 8001024:	2200      	movs	r2, #0
 8001026:	2101      	movs	r1, #1
 8001028:	4813      	ldr	r0, [pc, #76]	; (8001078 <display7SEG_1+0x324>)
 800102a:	f000 fb72 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a1_GPIO_Port, b1_Pin, 0);
 800102e:	2200      	movs	r2, #0
 8001030:	2102      	movs	r1, #2
 8001032:	4811      	ldr	r0, [pc, #68]	; (8001078 <display7SEG_1+0x324>)
 8001034:	f000 fb6d 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a1_GPIO_Port, c1_Pin, 0);
 8001038:	2200      	movs	r2, #0
 800103a:	2104      	movs	r1, #4
 800103c:	480e      	ldr	r0, [pc, #56]	; (8001078 <display7SEG_1+0x324>)
 800103e:	f000 fb68 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a1_GPIO_Port, d1_Pin, 0);
 8001042:	2200      	movs	r2, #0
 8001044:	2108      	movs	r1, #8
 8001046:	480c      	ldr	r0, [pc, #48]	; (8001078 <display7SEG_1+0x324>)
 8001048:	f000 fb63 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a1_GPIO_Port, e1_Pin, 0);
 800104c:	2200      	movs	r2, #0
 800104e:	2110      	movs	r1, #16
 8001050:	4809      	ldr	r0, [pc, #36]	; (8001078 <display7SEG_1+0x324>)
 8001052:	f000 fb5e 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a1_GPIO_Port, f1_Pin, 0);
 8001056:	2200      	movs	r2, #0
 8001058:	2120      	movs	r1, #32
 800105a:	4807      	ldr	r0, [pc, #28]	; (8001078 <display7SEG_1+0x324>)
 800105c:	f000 fb59 	bl	8001712 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(a1_GPIO_Port, g1_Pin, 1 );
 8001060:	2201      	movs	r2, #1
 8001062:	2140      	movs	r1, #64	; 0x40
 8001064:	4804      	ldr	r0, [pc, #16]	; (8001078 <display7SEG_1+0x324>)
 8001066:	f000 fb54 	bl	8001712 <HAL_GPIO_WritePin>
}
 800106a:	bf00      	nop
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	200003c4 	.word	0x200003c4
 8001078:	40010800 	.word	0x40010800

0800107c <Led1_end>:

void Led1_end(void){
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
	if (is_button_pressed(button0))
 8001080:	2000      	movs	r0, #0
 8001082:	f7ff f90d 	bl	80002a0 <is_button_pressed>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d003      	beq.n	8001094 <Led1_end+0x18>
		HAL_GPIO_TogglePin(EN1_GPIO_Port, EN1_Pin);
 800108c:	2180      	movs	r1, #128	; 0x80
 800108e:	4802      	ldr	r0, [pc, #8]	; (8001098 <Led1_end+0x1c>)
 8001090:	f000 fb57 	bl	8001742 <HAL_GPIO_TogglePin>

}
 8001094:	bf00      	nop
 8001096:	bd80      	pop	{r7, pc}
 8001098:	40010800 	.word	0x40010800

0800109c <Led2_end>:
void Led2_end(void){
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
	if (is_button_pressed(button1))
 80010a0:	2001      	movs	r0, #1
 80010a2:	f7ff f8fd 	bl	80002a0 <is_button_pressed>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d004      	beq.n	80010b6 <Led2_end+0x1a>
		HAL_GPIO_TogglePin(EN2_GPIO_Port, EN2_Pin);
 80010ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010b0:	4802      	ldr	r0, [pc, #8]	; (80010bc <Led2_end+0x20>)
 80010b2:	f000 fb46 	bl	8001742 <HAL_GPIO_TogglePin>
}
 80010b6:	bf00      	nop
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40010800 	.word	0x40010800

080010c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010c0:	480c      	ldr	r0, [pc, #48]	; (80010f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010c2:	490d      	ldr	r1, [pc, #52]	; (80010f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010c4:	4a0d      	ldr	r2, [pc, #52]	; (80010fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010c8:	e002      	b.n	80010d0 <LoopCopyDataInit>

080010ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ce:	3304      	adds	r3, #4

080010d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010d4:	d3f9      	bcc.n	80010ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010d6:	4a0a      	ldr	r2, [pc, #40]	; (8001100 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010d8:	4c0a      	ldr	r4, [pc, #40]	; (8001104 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010dc:	e001      	b.n	80010e2 <LoopFillZerobss>

080010de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010e0:	3204      	adds	r2, #4

080010e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010e4:	d3fb      	bcc.n	80010de <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80010e6:	f7ff fc5d 	bl	80009a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010ea:	f001 fb0f 	bl	800270c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010ee:	f7ff f8fd 	bl	80002ec <main>
  bx lr
 80010f2:	4770      	bx	lr
  ldr r0, =_sdata
 80010f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010f8:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80010fc:	080027a4 	.word	0x080027a4
  ldr r2, =_sbss
 8001100:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001104:	200003cc 	.word	0x200003cc

08001108 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001108:	e7fe      	b.n	8001108 <ADC1_2_IRQHandler>
	...

0800110c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001110:	4b08      	ldr	r3, [pc, #32]	; (8001134 <HAL_Init+0x28>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a07      	ldr	r2, [pc, #28]	; (8001134 <HAL_Init+0x28>)
 8001116:	f043 0310 	orr.w	r3, r3, #16
 800111a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800111c:	2003      	movs	r0, #3
 800111e:	f000 f923 	bl	8001368 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001122:	200f      	movs	r0, #15
 8001124:	f000 f808 	bl	8001138 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001128:	f7ff fbc4 	bl	80008b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800112c:	2300      	movs	r3, #0
}
 800112e:	4618      	mov	r0, r3
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40022000 	.word	0x40022000

08001138 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001140:	4b12      	ldr	r3, [pc, #72]	; (800118c <HAL_InitTick+0x54>)
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	4b12      	ldr	r3, [pc, #72]	; (8001190 <HAL_InitTick+0x58>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	4619      	mov	r1, r3
 800114a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800114e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001152:	fbb2 f3f3 	udiv	r3, r2, r3
 8001156:	4618      	mov	r0, r3
 8001158:	f000 f93b 	bl	80013d2 <HAL_SYSTICK_Config>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	e00e      	b.n	8001184 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2b0f      	cmp	r3, #15
 800116a:	d80a      	bhi.n	8001182 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800116c:	2200      	movs	r2, #0
 800116e:	6879      	ldr	r1, [r7, #4]
 8001170:	f04f 30ff 	mov.w	r0, #4294967295
 8001174:	f000 f903 	bl	800137e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001178:	4a06      	ldr	r2, [pc, #24]	; (8001194 <HAL_InitTick+0x5c>)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800117e:	2300      	movs	r3, #0
 8001180:	e000      	b.n	8001184 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
}
 8001184:	4618      	mov	r0, r3
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	2000000c 	.word	0x2000000c
 8001190:	20000014 	.word	0x20000014
 8001194:	20000010 	.word	0x20000010

08001198 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800119c:	4b05      	ldr	r3, [pc, #20]	; (80011b4 <HAL_IncTick+0x1c>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	461a      	mov	r2, r3
 80011a2:	4b05      	ldr	r3, [pc, #20]	; (80011b8 <HAL_IncTick+0x20>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4413      	add	r3, r2
 80011a8:	4a03      	ldr	r2, [pc, #12]	; (80011b8 <HAL_IncTick+0x20>)
 80011aa:	6013      	str	r3, [r2, #0]
}
 80011ac:	bf00      	nop
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bc80      	pop	{r7}
 80011b2:	4770      	bx	lr
 80011b4:	20000014 	.word	0x20000014
 80011b8:	200003c8 	.word	0x200003c8

080011bc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  return uwTick;
 80011c0:	4b02      	ldr	r3, [pc, #8]	; (80011cc <HAL_GetTick+0x10>)
 80011c2:	681b      	ldr	r3, [r3, #0]
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bc80      	pop	{r7}
 80011ca:	4770      	bx	lr
 80011cc:	200003c8 	.word	0x200003c8

080011d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b085      	sub	sp, #20
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f003 0307 	and.w	r3, r3, #7
 80011de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011e0:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <__NVIC_SetPriorityGrouping+0x44>)
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011e6:	68ba      	ldr	r2, [r7, #8]
 80011e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011ec:	4013      	ands	r3, r2
 80011ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001200:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001202:	4a04      	ldr	r2, [pc, #16]	; (8001214 <__NVIC_SetPriorityGrouping+0x44>)
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	60d3      	str	r3, [r2, #12]
}
 8001208:	bf00      	nop
 800120a:	3714      	adds	r7, #20
 800120c:	46bd      	mov	sp, r7
 800120e:	bc80      	pop	{r7}
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	e000ed00 	.word	0xe000ed00

08001218 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800121c:	4b04      	ldr	r3, [pc, #16]	; (8001230 <__NVIC_GetPriorityGrouping+0x18>)
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	0a1b      	lsrs	r3, r3, #8
 8001222:	f003 0307 	and.w	r3, r3, #7
}
 8001226:	4618      	mov	r0, r3
 8001228:	46bd      	mov	sp, r7
 800122a:	bc80      	pop	{r7}
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	e000ed00 	.word	0xe000ed00

08001234 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800123e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001242:	2b00      	cmp	r3, #0
 8001244:	db0b      	blt.n	800125e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001246:	79fb      	ldrb	r3, [r7, #7]
 8001248:	f003 021f 	and.w	r2, r3, #31
 800124c:	4906      	ldr	r1, [pc, #24]	; (8001268 <__NVIC_EnableIRQ+0x34>)
 800124e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001252:	095b      	lsrs	r3, r3, #5
 8001254:	2001      	movs	r0, #1
 8001256:	fa00 f202 	lsl.w	r2, r0, r2
 800125a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800125e:	bf00      	nop
 8001260:	370c      	adds	r7, #12
 8001262:	46bd      	mov	sp, r7
 8001264:	bc80      	pop	{r7}
 8001266:	4770      	bx	lr
 8001268:	e000e100 	.word	0xe000e100

0800126c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	6039      	str	r1, [r7, #0]
 8001276:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001278:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127c:	2b00      	cmp	r3, #0
 800127e:	db0a      	blt.n	8001296 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	b2da      	uxtb	r2, r3
 8001284:	490c      	ldr	r1, [pc, #48]	; (80012b8 <__NVIC_SetPriority+0x4c>)
 8001286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128a:	0112      	lsls	r2, r2, #4
 800128c:	b2d2      	uxtb	r2, r2
 800128e:	440b      	add	r3, r1
 8001290:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001294:	e00a      	b.n	80012ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	b2da      	uxtb	r2, r3
 800129a:	4908      	ldr	r1, [pc, #32]	; (80012bc <__NVIC_SetPriority+0x50>)
 800129c:	79fb      	ldrb	r3, [r7, #7]
 800129e:	f003 030f 	and.w	r3, r3, #15
 80012a2:	3b04      	subs	r3, #4
 80012a4:	0112      	lsls	r2, r2, #4
 80012a6:	b2d2      	uxtb	r2, r2
 80012a8:	440b      	add	r3, r1
 80012aa:	761a      	strb	r2, [r3, #24]
}
 80012ac:	bf00      	nop
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bc80      	pop	{r7}
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	e000e100 	.word	0xe000e100
 80012bc:	e000ed00 	.word	0xe000ed00

080012c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b089      	sub	sp, #36	; 0x24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	60f8      	str	r0, [r7, #12]
 80012c8:	60b9      	str	r1, [r7, #8]
 80012ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	f003 0307 	and.w	r3, r3, #7
 80012d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	f1c3 0307 	rsb	r3, r3, #7
 80012da:	2b04      	cmp	r3, #4
 80012dc:	bf28      	it	cs
 80012de:	2304      	movcs	r3, #4
 80012e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	3304      	adds	r3, #4
 80012e6:	2b06      	cmp	r3, #6
 80012e8:	d902      	bls.n	80012f0 <NVIC_EncodePriority+0x30>
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	3b03      	subs	r3, #3
 80012ee:	e000      	b.n	80012f2 <NVIC_EncodePriority+0x32>
 80012f0:	2300      	movs	r3, #0
 80012f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f4:	f04f 32ff 	mov.w	r2, #4294967295
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	fa02 f303 	lsl.w	r3, r2, r3
 80012fe:	43da      	mvns	r2, r3
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	401a      	ands	r2, r3
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001308:	f04f 31ff 	mov.w	r1, #4294967295
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	fa01 f303 	lsl.w	r3, r1, r3
 8001312:	43d9      	mvns	r1, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001318:	4313      	orrs	r3, r2
         );
}
 800131a:	4618      	mov	r0, r3
 800131c:	3724      	adds	r7, #36	; 0x24
 800131e:	46bd      	mov	sp, r7
 8001320:	bc80      	pop	{r7}
 8001322:	4770      	bx	lr

08001324 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	3b01      	subs	r3, #1
 8001330:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001334:	d301      	bcc.n	800133a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001336:	2301      	movs	r3, #1
 8001338:	e00f      	b.n	800135a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800133a:	4a0a      	ldr	r2, [pc, #40]	; (8001364 <SysTick_Config+0x40>)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	3b01      	subs	r3, #1
 8001340:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001342:	210f      	movs	r1, #15
 8001344:	f04f 30ff 	mov.w	r0, #4294967295
 8001348:	f7ff ff90 	bl	800126c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800134c:	4b05      	ldr	r3, [pc, #20]	; (8001364 <SysTick_Config+0x40>)
 800134e:	2200      	movs	r2, #0
 8001350:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001352:	4b04      	ldr	r3, [pc, #16]	; (8001364 <SysTick_Config+0x40>)
 8001354:	2207      	movs	r2, #7
 8001356:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001358:	2300      	movs	r3, #0
}
 800135a:	4618      	mov	r0, r3
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	e000e010 	.word	0xe000e010

08001368 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f7ff ff2d 	bl	80011d0 <__NVIC_SetPriorityGrouping>
}
 8001376:	bf00      	nop
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800137e:	b580      	push	{r7, lr}
 8001380:	b086      	sub	sp, #24
 8001382:	af00      	add	r7, sp, #0
 8001384:	4603      	mov	r3, r0
 8001386:	60b9      	str	r1, [r7, #8]
 8001388:	607a      	str	r2, [r7, #4]
 800138a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800138c:	2300      	movs	r3, #0
 800138e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001390:	f7ff ff42 	bl	8001218 <__NVIC_GetPriorityGrouping>
 8001394:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	68b9      	ldr	r1, [r7, #8]
 800139a:	6978      	ldr	r0, [r7, #20]
 800139c:	f7ff ff90 	bl	80012c0 <NVIC_EncodePriority>
 80013a0:	4602      	mov	r2, r0
 80013a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013a6:	4611      	mov	r1, r2
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff ff5f 	bl	800126c <__NVIC_SetPriority>
}
 80013ae:	bf00      	nop
 80013b0:	3718      	adds	r7, #24
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b082      	sub	sp, #8
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	4603      	mov	r3, r0
 80013be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff ff35 	bl	8001234 <__NVIC_EnableIRQ>
}
 80013ca:	bf00      	nop
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b082      	sub	sp, #8
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f7ff ffa2 	bl	8001324 <SysTick_Config>
 80013e0:	4603      	mov	r3, r0
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
	...

080013ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b08b      	sub	sp, #44	; 0x2c
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013f6:	2300      	movs	r3, #0
 80013f8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80013fa:	2300      	movs	r3, #0
 80013fc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013fe:	e161      	b.n	80016c4 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001400:	2201      	movs	r2, #1
 8001402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001404:	fa02 f303 	lsl.w	r3, r2, r3
 8001408:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	69fa      	ldr	r2, [r7, #28]
 8001410:	4013      	ands	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	429a      	cmp	r2, r3
 800141a:	f040 8150 	bne.w	80016be <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	4a97      	ldr	r2, [pc, #604]	; (8001680 <HAL_GPIO_Init+0x294>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d05e      	beq.n	80014e6 <HAL_GPIO_Init+0xfa>
 8001428:	4a95      	ldr	r2, [pc, #596]	; (8001680 <HAL_GPIO_Init+0x294>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d875      	bhi.n	800151a <HAL_GPIO_Init+0x12e>
 800142e:	4a95      	ldr	r2, [pc, #596]	; (8001684 <HAL_GPIO_Init+0x298>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d058      	beq.n	80014e6 <HAL_GPIO_Init+0xfa>
 8001434:	4a93      	ldr	r2, [pc, #588]	; (8001684 <HAL_GPIO_Init+0x298>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d86f      	bhi.n	800151a <HAL_GPIO_Init+0x12e>
 800143a:	4a93      	ldr	r2, [pc, #588]	; (8001688 <HAL_GPIO_Init+0x29c>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d052      	beq.n	80014e6 <HAL_GPIO_Init+0xfa>
 8001440:	4a91      	ldr	r2, [pc, #580]	; (8001688 <HAL_GPIO_Init+0x29c>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d869      	bhi.n	800151a <HAL_GPIO_Init+0x12e>
 8001446:	4a91      	ldr	r2, [pc, #580]	; (800168c <HAL_GPIO_Init+0x2a0>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d04c      	beq.n	80014e6 <HAL_GPIO_Init+0xfa>
 800144c:	4a8f      	ldr	r2, [pc, #572]	; (800168c <HAL_GPIO_Init+0x2a0>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d863      	bhi.n	800151a <HAL_GPIO_Init+0x12e>
 8001452:	4a8f      	ldr	r2, [pc, #572]	; (8001690 <HAL_GPIO_Init+0x2a4>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d046      	beq.n	80014e6 <HAL_GPIO_Init+0xfa>
 8001458:	4a8d      	ldr	r2, [pc, #564]	; (8001690 <HAL_GPIO_Init+0x2a4>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d85d      	bhi.n	800151a <HAL_GPIO_Init+0x12e>
 800145e:	2b12      	cmp	r3, #18
 8001460:	d82a      	bhi.n	80014b8 <HAL_GPIO_Init+0xcc>
 8001462:	2b12      	cmp	r3, #18
 8001464:	d859      	bhi.n	800151a <HAL_GPIO_Init+0x12e>
 8001466:	a201      	add	r2, pc, #4	; (adr r2, 800146c <HAL_GPIO_Init+0x80>)
 8001468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800146c:	080014e7 	.word	0x080014e7
 8001470:	080014c1 	.word	0x080014c1
 8001474:	080014d3 	.word	0x080014d3
 8001478:	08001515 	.word	0x08001515
 800147c:	0800151b 	.word	0x0800151b
 8001480:	0800151b 	.word	0x0800151b
 8001484:	0800151b 	.word	0x0800151b
 8001488:	0800151b 	.word	0x0800151b
 800148c:	0800151b 	.word	0x0800151b
 8001490:	0800151b 	.word	0x0800151b
 8001494:	0800151b 	.word	0x0800151b
 8001498:	0800151b 	.word	0x0800151b
 800149c:	0800151b 	.word	0x0800151b
 80014a0:	0800151b 	.word	0x0800151b
 80014a4:	0800151b 	.word	0x0800151b
 80014a8:	0800151b 	.word	0x0800151b
 80014ac:	0800151b 	.word	0x0800151b
 80014b0:	080014c9 	.word	0x080014c9
 80014b4:	080014dd 	.word	0x080014dd
 80014b8:	4a76      	ldr	r2, [pc, #472]	; (8001694 <HAL_GPIO_Init+0x2a8>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d013      	beq.n	80014e6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80014be:	e02c      	b.n	800151a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	623b      	str	r3, [r7, #32]
          break;
 80014c6:	e029      	b.n	800151c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	3304      	adds	r3, #4
 80014ce:	623b      	str	r3, [r7, #32]
          break;
 80014d0:	e024      	b.n	800151c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	68db      	ldr	r3, [r3, #12]
 80014d6:	3308      	adds	r3, #8
 80014d8:	623b      	str	r3, [r7, #32]
          break;
 80014da:	e01f      	b.n	800151c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	330c      	adds	r3, #12
 80014e2:	623b      	str	r3, [r7, #32]
          break;
 80014e4:	e01a      	b.n	800151c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d102      	bne.n	80014f4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80014ee:	2304      	movs	r3, #4
 80014f0:	623b      	str	r3, [r7, #32]
          break;
 80014f2:	e013      	b.n	800151c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d105      	bne.n	8001508 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014fc:	2308      	movs	r3, #8
 80014fe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	69fa      	ldr	r2, [r7, #28]
 8001504:	611a      	str	r2, [r3, #16]
          break;
 8001506:	e009      	b.n	800151c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001508:	2308      	movs	r3, #8
 800150a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	69fa      	ldr	r2, [r7, #28]
 8001510:	615a      	str	r2, [r3, #20]
          break;
 8001512:	e003      	b.n	800151c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001514:	2300      	movs	r3, #0
 8001516:	623b      	str	r3, [r7, #32]
          break;
 8001518:	e000      	b.n	800151c <HAL_GPIO_Init+0x130>
          break;
 800151a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	2bff      	cmp	r3, #255	; 0xff
 8001520:	d801      	bhi.n	8001526 <HAL_GPIO_Init+0x13a>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	e001      	b.n	800152a <HAL_GPIO_Init+0x13e>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	3304      	adds	r3, #4
 800152a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800152c:	69bb      	ldr	r3, [r7, #24]
 800152e:	2bff      	cmp	r3, #255	; 0xff
 8001530:	d802      	bhi.n	8001538 <HAL_GPIO_Init+0x14c>
 8001532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	e002      	b.n	800153e <HAL_GPIO_Init+0x152>
 8001538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153a:	3b08      	subs	r3, #8
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	210f      	movs	r1, #15
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	fa01 f303 	lsl.w	r3, r1, r3
 800154c:	43db      	mvns	r3, r3
 800154e:	401a      	ands	r2, r3
 8001550:	6a39      	ldr	r1, [r7, #32]
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	fa01 f303 	lsl.w	r3, r1, r3
 8001558:	431a      	orrs	r2, r3
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001566:	2b00      	cmp	r3, #0
 8001568:	f000 80a9 	beq.w	80016be <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800156c:	4b4a      	ldr	r3, [pc, #296]	; (8001698 <HAL_GPIO_Init+0x2ac>)
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	4a49      	ldr	r2, [pc, #292]	; (8001698 <HAL_GPIO_Init+0x2ac>)
 8001572:	f043 0301 	orr.w	r3, r3, #1
 8001576:	6193      	str	r3, [r2, #24]
 8001578:	4b47      	ldr	r3, [pc, #284]	; (8001698 <HAL_GPIO_Init+0x2ac>)
 800157a:	699b      	ldr	r3, [r3, #24]
 800157c:	f003 0301 	and.w	r3, r3, #1
 8001580:	60bb      	str	r3, [r7, #8]
 8001582:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001584:	4a45      	ldr	r2, [pc, #276]	; (800169c <HAL_GPIO_Init+0x2b0>)
 8001586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001588:	089b      	lsrs	r3, r3, #2
 800158a:	3302      	adds	r3, #2
 800158c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001590:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001594:	f003 0303 	and.w	r3, r3, #3
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	220f      	movs	r2, #15
 800159c:	fa02 f303 	lsl.w	r3, r2, r3
 80015a0:	43db      	mvns	r3, r3
 80015a2:	68fa      	ldr	r2, [r7, #12]
 80015a4:	4013      	ands	r3, r2
 80015a6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	4a3d      	ldr	r2, [pc, #244]	; (80016a0 <HAL_GPIO_Init+0x2b4>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d00d      	beq.n	80015cc <HAL_GPIO_Init+0x1e0>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	4a3c      	ldr	r2, [pc, #240]	; (80016a4 <HAL_GPIO_Init+0x2b8>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d007      	beq.n	80015c8 <HAL_GPIO_Init+0x1dc>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	4a3b      	ldr	r2, [pc, #236]	; (80016a8 <HAL_GPIO_Init+0x2bc>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d101      	bne.n	80015c4 <HAL_GPIO_Init+0x1d8>
 80015c0:	2302      	movs	r3, #2
 80015c2:	e004      	b.n	80015ce <HAL_GPIO_Init+0x1e2>
 80015c4:	2303      	movs	r3, #3
 80015c6:	e002      	b.n	80015ce <HAL_GPIO_Init+0x1e2>
 80015c8:	2301      	movs	r3, #1
 80015ca:	e000      	b.n	80015ce <HAL_GPIO_Init+0x1e2>
 80015cc:	2300      	movs	r3, #0
 80015ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015d0:	f002 0203 	and.w	r2, r2, #3
 80015d4:	0092      	lsls	r2, r2, #2
 80015d6:	4093      	lsls	r3, r2
 80015d8:	68fa      	ldr	r2, [r7, #12]
 80015da:	4313      	orrs	r3, r2
 80015dc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015de:	492f      	ldr	r1, [pc, #188]	; (800169c <HAL_GPIO_Init+0x2b0>)
 80015e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e2:	089b      	lsrs	r3, r3, #2
 80015e4:	3302      	adds	r3, #2
 80015e6:	68fa      	ldr	r2, [r7, #12]
 80015e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d006      	beq.n	8001606 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015f8:	4b2c      	ldr	r3, [pc, #176]	; (80016ac <HAL_GPIO_Init+0x2c0>)
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	492b      	ldr	r1, [pc, #172]	; (80016ac <HAL_GPIO_Init+0x2c0>)
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	4313      	orrs	r3, r2
 8001602:	600b      	str	r3, [r1, #0]
 8001604:	e006      	b.n	8001614 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001606:	4b29      	ldr	r3, [pc, #164]	; (80016ac <HAL_GPIO_Init+0x2c0>)
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	69bb      	ldr	r3, [r7, #24]
 800160c:	43db      	mvns	r3, r3
 800160e:	4927      	ldr	r1, [pc, #156]	; (80016ac <HAL_GPIO_Init+0x2c0>)
 8001610:	4013      	ands	r3, r2
 8001612:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161c:	2b00      	cmp	r3, #0
 800161e:	d006      	beq.n	800162e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001620:	4b22      	ldr	r3, [pc, #136]	; (80016ac <HAL_GPIO_Init+0x2c0>)
 8001622:	685a      	ldr	r2, [r3, #4]
 8001624:	4921      	ldr	r1, [pc, #132]	; (80016ac <HAL_GPIO_Init+0x2c0>)
 8001626:	69bb      	ldr	r3, [r7, #24]
 8001628:	4313      	orrs	r3, r2
 800162a:	604b      	str	r3, [r1, #4]
 800162c:	e006      	b.n	800163c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800162e:	4b1f      	ldr	r3, [pc, #124]	; (80016ac <HAL_GPIO_Init+0x2c0>)
 8001630:	685a      	ldr	r2, [r3, #4]
 8001632:	69bb      	ldr	r3, [r7, #24]
 8001634:	43db      	mvns	r3, r3
 8001636:	491d      	ldr	r1, [pc, #116]	; (80016ac <HAL_GPIO_Init+0x2c0>)
 8001638:	4013      	ands	r3, r2
 800163a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001644:	2b00      	cmp	r3, #0
 8001646:	d006      	beq.n	8001656 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001648:	4b18      	ldr	r3, [pc, #96]	; (80016ac <HAL_GPIO_Init+0x2c0>)
 800164a:	689a      	ldr	r2, [r3, #8]
 800164c:	4917      	ldr	r1, [pc, #92]	; (80016ac <HAL_GPIO_Init+0x2c0>)
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	4313      	orrs	r3, r2
 8001652:	608b      	str	r3, [r1, #8]
 8001654:	e006      	b.n	8001664 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001656:	4b15      	ldr	r3, [pc, #84]	; (80016ac <HAL_GPIO_Init+0x2c0>)
 8001658:	689a      	ldr	r2, [r3, #8]
 800165a:	69bb      	ldr	r3, [r7, #24]
 800165c:	43db      	mvns	r3, r3
 800165e:	4913      	ldr	r1, [pc, #76]	; (80016ac <HAL_GPIO_Init+0x2c0>)
 8001660:	4013      	ands	r3, r2
 8001662:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800166c:	2b00      	cmp	r3, #0
 800166e:	d01f      	beq.n	80016b0 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001670:	4b0e      	ldr	r3, [pc, #56]	; (80016ac <HAL_GPIO_Init+0x2c0>)
 8001672:	68da      	ldr	r2, [r3, #12]
 8001674:	490d      	ldr	r1, [pc, #52]	; (80016ac <HAL_GPIO_Init+0x2c0>)
 8001676:	69bb      	ldr	r3, [r7, #24]
 8001678:	4313      	orrs	r3, r2
 800167a:	60cb      	str	r3, [r1, #12]
 800167c:	e01f      	b.n	80016be <HAL_GPIO_Init+0x2d2>
 800167e:	bf00      	nop
 8001680:	10320000 	.word	0x10320000
 8001684:	10310000 	.word	0x10310000
 8001688:	10220000 	.word	0x10220000
 800168c:	10210000 	.word	0x10210000
 8001690:	10120000 	.word	0x10120000
 8001694:	10110000 	.word	0x10110000
 8001698:	40021000 	.word	0x40021000
 800169c:	40010000 	.word	0x40010000
 80016a0:	40010800 	.word	0x40010800
 80016a4:	40010c00 	.word	0x40010c00
 80016a8:	40011000 	.word	0x40011000
 80016ac:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80016b0:	4b0b      	ldr	r3, [pc, #44]	; (80016e0 <HAL_GPIO_Init+0x2f4>)
 80016b2:	68da      	ldr	r2, [r3, #12]
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	43db      	mvns	r3, r3
 80016b8:	4909      	ldr	r1, [pc, #36]	; (80016e0 <HAL_GPIO_Init+0x2f4>)
 80016ba:	4013      	ands	r3, r2
 80016bc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80016be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c0:	3301      	adds	r3, #1
 80016c2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ca:	fa22 f303 	lsr.w	r3, r2, r3
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	f47f ae96 	bne.w	8001400 <HAL_GPIO_Init+0x14>
  }
}
 80016d4:	bf00      	nop
 80016d6:	bf00      	nop
 80016d8:	372c      	adds	r7, #44	; 0x2c
 80016da:	46bd      	mov	sp, r7
 80016dc:	bc80      	pop	{r7}
 80016de:	4770      	bx	lr
 80016e0:	40010400 	.word	0x40010400

080016e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	460b      	mov	r3, r1
 80016ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	689a      	ldr	r2, [r3, #8]
 80016f4:	887b      	ldrh	r3, [r7, #2]
 80016f6:	4013      	ands	r3, r2
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d002      	beq.n	8001702 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80016fc:	2301      	movs	r3, #1
 80016fe:	73fb      	strb	r3, [r7, #15]
 8001700:	e001      	b.n	8001706 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001702:	2300      	movs	r3, #0
 8001704:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001706:	7bfb      	ldrb	r3, [r7, #15]
}
 8001708:	4618      	mov	r0, r3
 800170a:	3714      	adds	r7, #20
 800170c:	46bd      	mov	sp, r7
 800170e:	bc80      	pop	{r7}
 8001710:	4770      	bx	lr

08001712 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001712:	b480      	push	{r7}
 8001714:	b083      	sub	sp, #12
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
 800171a:	460b      	mov	r3, r1
 800171c:	807b      	strh	r3, [r7, #2]
 800171e:	4613      	mov	r3, r2
 8001720:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001722:	787b      	ldrb	r3, [r7, #1]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d003      	beq.n	8001730 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001728:	887a      	ldrh	r2, [r7, #2]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800172e:	e003      	b.n	8001738 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001730:	887b      	ldrh	r3, [r7, #2]
 8001732:	041a      	lsls	r2, r3, #16
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	611a      	str	r2, [r3, #16]
}
 8001738:	bf00      	nop
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	bc80      	pop	{r7}
 8001740:	4770      	bx	lr

08001742 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001742:	b480      	push	{r7}
 8001744:	b085      	sub	sp, #20
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
 800174a:	460b      	mov	r3, r1
 800174c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	68db      	ldr	r3, [r3, #12]
 8001752:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001754:	887a      	ldrh	r2, [r7, #2]
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	4013      	ands	r3, r2
 800175a:	041a      	lsls	r2, r3, #16
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	43d9      	mvns	r1, r3
 8001760:	887b      	ldrh	r3, [r7, #2]
 8001762:	400b      	ands	r3, r1
 8001764:	431a      	orrs	r2, r3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	611a      	str	r2, [r3, #16]
}
 800176a:	bf00      	nop
 800176c:	3714      	adds	r7, #20
 800176e:	46bd      	mov	sp, r7
 8001770:	bc80      	pop	{r7}
 8001772:	4770      	bx	lr

08001774 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b086      	sub	sp, #24
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d101      	bne.n	8001786 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e272      	b.n	8001c6c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0301 	and.w	r3, r3, #1
 800178e:	2b00      	cmp	r3, #0
 8001790:	f000 8087 	beq.w	80018a2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001794:	4b92      	ldr	r3, [pc, #584]	; (80019e0 <HAL_RCC_OscConfig+0x26c>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f003 030c 	and.w	r3, r3, #12
 800179c:	2b04      	cmp	r3, #4
 800179e:	d00c      	beq.n	80017ba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017a0:	4b8f      	ldr	r3, [pc, #572]	; (80019e0 <HAL_RCC_OscConfig+0x26c>)
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f003 030c 	and.w	r3, r3, #12
 80017a8:	2b08      	cmp	r3, #8
 80017aa:	d112      	bne.n	80017d2 <HAL_RCC_OscConfig+0x5e>
 80017ac:	4b8c      	ldr	r3, [pc, #560]	; (80019e0 <HAL_RCC_OscConfig+0x26c>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017b8:	d10b      	bne.n	80017d2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017ba:	4b89      	ldr	r3, [pc, #548]	; (80019e0 <HAL_RCC_OscConfig+0x26c>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d06c      	beq.n	80018a0 <HAL_RCC_OscConfig+0x12c>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d168      	bne.n	80018a0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e24c      	b.n	8001c6c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017da:	d106      	bne.n	80017ea <HAL_RCC_OscConfig+0x76>
 80017dc:	4b80      	ldr	r3, [pc, #512]	; (80019e0 <HAL_RCC_OscConfig+0x26c>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a7f      	ldr	r2, [pc, #508]	; (80019e0 <HAL_RCC_OscConfig+0x26c>)
 80017e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017e6:	6013      	str	r3, [r2, #0]
 80017e8:	e02e      	b.n	8001848 <HAL_RCC_OscConfig+0xd4>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d10c      	bne.n	800180c <HAL_RCC_OscConfig+0x98>
 80017f2:	4b7b      	ldr	r3, [pc, #492]	; (80019e0 <HAL_RCC_OscConfig+0x26c>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a7a      	ldr	r2, [pc, #488]	; (80019e0 <HAL_RCC_OscConfig+0x26c>)
 80017f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017fc:	6013      	str	r3, [r2, #0]
 80017fe:	4b78      	ldr	r3, [pc, #480]	; (80019e0 <HAL_RCC_OscConfig+0x26c>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a77      	ldr	r2, [pc, #476]	; (80019e0 <HAL_RCC_OscConfig+0x26c>)
 8001804:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001808:	6013      	str	r3, [r2, #0]
 800180a:	e01d      	b.n	8001848 <HAL_RCC_OscConfig+0xd4>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001814:	d10c      	bne.n	8001830 <HAL_RCC_OscConfig+0xbc>
 8001816:	4b72      	ldr	r3, [pc, #456]	; (80019e0 <HAL_RCC_OscConfig+0x26c>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a71      	ldr	r2, [pc, #452]	; (80019e0 <HAL_RCC_OscConfig+0x26c>)
 800181c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001820:	6013      	str	r3, [r2, #0]
 8001822:	4b6f      	ldr	r3, [pc, #444]	; (80019e0 <HAL_RCC_OscConfig+0x26c>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a6e      	ldr	r2, [pc, #440]	; (80019e0 <HAL_RCC_OscConfig+0x26c>)
 8001828:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800182c:	6013      	str	r3, [r2, #0]
 800182e:	e00b      	b.n	8001848 <HAL_RCC_OscConfig+0xd4>
 8001830:	4b6b      	ldr	r3, [pc, #428]	; (80019e0 <HAL_RCC_OscConfig+0x26c>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a6a      	ldr	r2, [pc, #424]	; (80019e0 <HAL_RCC_OscConfig+0x26c>)
 8001836:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800183a:	6013      	str	r3, [r2, #0]
 800183c:	4b68      	ldr	r3, [pc, #416]	; (80019e0 <HAL_RCC_OscConfig+0x26c>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a67      	ldr	r2, [pc, #412]	; (80019e0 <HAL_RCC_OscConfig+0x26c>)
 8001842:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001846:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d013      	beq.n	8001878 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001850:	f7ff fcb4 	bl	80011bc <HAL_GetTick>
 8001854:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001856:	e008      	b.n	800186a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001858:	f7ff fcb0 	bl	80011bc <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	2b64      	cmp	r3, #100	; 0x64
 8001864:	d901      	bls.n	800186a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e200      	b.n	8001c6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800186a:	4b5d      	ldr	r3, [pc, #372]	; (80019e0 <HAL_RCC_OscConfig+0x26c>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d0f0      	beq.n	8001858 <HAL_RCC_OscConfig+0xe4>
 8001876:	e014      	b.n	80018a2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001878:	f7ff fca0 	bl	80011bc <HAL_GetTick>
 800187c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800187e:	e008      	b.n	8001892 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001880:	f7ff fc9c 	bl	80011bc <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	2b64      	cmp	r3, #100	; 0x64
 800188c:	d901      	bls.n	8001892 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e1ec      	b.n	8001c6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001892:	4b53      	ldr	r3, [pc, #332]	; (80019e0 <HAL_RCC_OscConfig+0x26c>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d1f0      	bne.n	8001880 <HAL_RCC_OscConfig+0x10c>
 800189e:	e000      	b.n	80018a2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0302 	and.w	r3, r3, #2
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d063      	beq.n	8001976 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018ae:	4b4c      	ldr	r3, [pc, #304]	; (80019e0 <HAL_RCC_OscConfig+0x26c>)
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f003 030c 	and.w	r3, r3, #12
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d00b      	beq.n	80018d2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80018ba:	4b49      	ldr	r3, [pc, #292]	; (80019e0 <HAL_RCC_OscConfig+0x26c>)
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f003 030c 	and.w	r3, r3, #12
 80018c2:	2b08      	cmp	r3, #8
 80018c4:	d11c      	bne.n	8001900 <HAL_RCC_OscConfig+0x18c>
 80018c6:	4b46      	ldr	r3, [pc, #280]	; (80019e0 <HAL_RCC_OscConfig+0x26c>)
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d116      	bne.n	8001900 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018d2:	4b43      	ldr	r3, [pc, #268]	; (80019e0 <HAL_RCC_OscConfig+0x26c>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0302 	and.w	r3, r3, #2
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d005      	beq.n	80018ea <HAL_RCC_OscConfig+0x176>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	691b      	ldr	r3, [r3, #16]
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d001      	beq.n	80018ea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e1c0      	b.n	8001c6c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018ea:	4b3d      	ldr	r3, [pc, #244]	; (80019e0 <HAL_RCC_OscConfig+0x26c>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	695b      	ldr	r3, [r3, #20]
 80018f6:	00db      	lsls	r3, r3, #3
 80018f8:	4939      	ldr	r1, [pc, #228]	; (80019e0 <HAL_RCC_OscConfig+0x26c>)
 80018fa:	4313      	orrs	r3, r2
 80018fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018fe:	e03a      	b.n	8001976 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	691b      	ldr	r3, [r3, #16]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d020      	beq.n	800194a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001908:	4b36      	ldr	r3, [pc, #216]	; (80019e4 <HAL_RCC_OscConfig+0x270>)
 800190a:	2201      	movs	r2, #1
 800190c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800190e:	f7ff fc55 	bl	80011bc <HAL_GetTick>
 8001912:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001914:	e008      	b.n	8001928 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001916:	f7ff fc51 	bl	80011bc <HAL_GetTick>
 800191a:	4602      	mov	r2, r0
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	2b02      	cmp	r3, #2
 8001922:	d901      	bls.n	8001928 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001924:	2303      	movs	r3, #3
 8001926:	e1a1      	b.n	8001c6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001928:	4b2d      	ldr	r3, [pc, #180]	; (80019e0 <HAL_RCC_OscConfig+0x26c>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0302 	and.w	r3, r3, #2
 8001930:	2b00      	cmp	r3, #0
 8001932:	d0f0      	beq.n	8001916 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001934:	4b2a      	ldr	r3, [pc, #168]	; (80019e0 <HAL_RCC_OscConfig+0x26c>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	695b      	ldr	r3, [r3, #20]
 8001940:	00db      	lsls	r3, r3, #3
 8001942:	4927      	ldr	r1, [pc, #156]	; (80019e0 <HAL_RCC_OscConfig+0x26c>)
 8001944:	4313      	orrs	r3, r2
 8001946:	600b      	str	r3, [r1, #0]
 8001948:	e015      	b.n	8001976 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800194a:	4b26      	ldr	r3, [pc, #152]	; (80019e4 <HAL_RCC_OscConfig+0x270>)
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001950:	f7ff fc34 	bl	80011bc <HAL_GetTick>
 8001954:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001956:	e008      	b.n	800196a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001958:	f7ff fc30 	bl	80011bc <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	2b02      	cmp	r3, #2
 8001964:	d901      	bls.n	800196a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e180      	b.n	8001c6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800196a:	4b1d      	ldr	r3, [pc, #116]	; (80019e0 <HAL_RCC_OscConfig+0x26c>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d1f0      	bne.n	8001958 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0308 	and.w	r3, r3, #8
 800197e:	2b00      	cmp	r3, #0
 8001980:	d03a      	beq.n	80019f8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	699b      	ldr	r3, [r3, #24]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d019      	beq.n	80019be <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800198a:	4b17      	ldr	r3, [pc, #92]	; (80019e8 <HAL_RCC_OscConfig+0x274>)
 800198c:	2201      	movs	r2, #1
 800198e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001990:	f7ff fc14 	bl	80011bc <HAL_GetTick>
 8001994:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001996:	e008      	b.n	80019aa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001998:	f7ff fc10 	bl	80011bc <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e160      	b.n	8001c6c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019aa:	4b0d      	ldr	r3, [pc, #52]	; (80019e0 <HAL_RCC_OscConfig+0x26c>)
 80019ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ae:	f003 0302 	and.w	r3, r3, #2
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d0f0      	beq.n	8001998 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80019b6:	2001      	movs	r0, #1
 80019b8:	f000 faa6 	bl	8001f08 <RCC_Delay>
 80019bc:	e01c      	b.n	80019f8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019be:	4b0a      	ldr	r3, [pc, #40]	; (80019e8 <HAL_RCC_OscConfig+0x274>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019c4:	f7ff fbfa 	bl	80011bc <HAL_GetTick>
 80019c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019ca:	e00f      	b.n	80019ec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019cc:	f7ff fbf6 	bl	80011bc <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d908      	bls.n	80019ec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e146      	b.n	8001c6c <HAL_RCC_OscConfig+0x4f8>
 80019de:	bf00      	nop
 80019e0:	40021000 	.word	0x40021000
 80019e4:	42420000 	.word	0x42420000
 80019e8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019ec:	4b92      	ldr	r3, [pc, #584]	; (8001c38 <HAL_RCC_OscConfig+0x4c4>)
 80019ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f0:	f003 0302 	and.w	r3, r3, #2
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d1e9      	bne.n	80019cc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0304 	and.w	r3, r3, #4
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	f000 80a6 	beq.w	8001b52 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a06:	2300      	movs	r3, #0
 8001a08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a0a:	4b8b      	ldr	r3, [pc, #556]	; (8001c38 <HAL_RCC_OscConfig+0x4c4>)
 8001a0c:	69db      	ldr	r3, [r3, #28]
 8001a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d10d      	bne.n	8001a32 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a16:	4b88      	ldr	r3, [pc, #544]	; (8001c38 <HAL_RCC_OscConfig+0x4c4>)
 8001a18:	69db      	ldr	r3, [r3, #28]
 8001a1a:	4a87      	ldr	r2, [pc, #540]	; (8001c38 <HAL_RCC_OscConfig+0x4c4>)
 8001a1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a20:	61d3      	str	r3, [r2, #28]
 8001a22:	4b85      	ldr	r3, [pc, #532]	; (8001c38 <HAL_RCC_OscConfig+0x4c4>)
 8001a24:	69db      	ldr	r3, [r3, #28]
 8001a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a2a:	60bb      	str	r3, [r7, #8]
 8001a2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a32:	4b82      	ldr	r3, [pc, #520]	; (8001c3c <HAL_RCC_OscConfig+0x4c8>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d118      	bne.n	8001a70 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a3e:	4b7f      	ldr	r3, [pc, #508]	; (8001c3c <HAL_RCC_OscConfig+0x4c8>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a7e      	ldr	r2, [pc, #504]	; (8001c3c <HAL_RCC_OscConfig+0x4c8>)
 8001a44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a4a:	f7ff fbb7 	bl	80011bc <HAL_GetTick>
 8001a4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a50:	e008      	b.n	8001a64 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a52:	f7ff fbb3 	bl	80011bc <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	2b64      	cmp	r3, #100	; 0x64
 8001a5e:	d901      	bls.n	8001a64 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a60:	2303      	movs	r3, #3
 8001a62:	e103      	b.n	8001c6c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a64:	4b75      	ldr	r3, [pc, #468]	; (8001c3c <HAL_RCC_OscConfig+0x4c8>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d0f0      	beq.n	8001a52 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d106      	bne.n	8001a86 <HAL_RCC_OscConfig+0x312>
 8001a78:	4b6f      	ldr	r3, [pc, #444]	; (8001c38 <HAL_RCC_OscConfig+0x4c4>)
 8001a7a:	6a1b      	ldr	r3, [r3, #32]
 8001a7c:	4a6e      	ldr	r2, [pc, #440]	; (8001c38 <HAL_RCC_OscConfig+0x4c4>)
 8001a7e:	f043 0301 	orr.w	r3, r3, #1
 8001a82:	6213      	str	r3, [r2, #32]
 8001a84:	e02d      	b.n	8001ae2 <HAL_RCC_OscConfig+0x36e>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	68db      	ldr	r3, [r3, #12]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d10c      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x334>
 8001a8e:	4b6a      	ldr	r3, [pc, #424]	; (8001c38 <HAL_RCC_OscConfig+0x4c4>)
 8001a90:	6a1b      	ldr	r3, [r3, #32]
 8001a92:	4a69      	ldr	r2, [pc, #420]	; (8001c38 <HAL_RCC_OscConfig+0x4c4>)
 8001a94:	f023 0301 	bic.w	r3, r3, #1
 8001a98:	6213      	str	r3, [r2, #32]
 8001a9a:	4b67      	ldr	r3, [pc, #412]	; (8001c38 <HAL_RCC_OscConfig+0x4c4>)
 8001a9c:	6a1b      	ldr	r3, [r3, #32]
 8001a9e:	4a66      	ldr	r2, [pc, #408]	; (8001c38 <HAL_RCC_OscConfig+0x4c4>)
 8001aa0:	f023 0304 	bic.w	r3, r3, #4
 8001aa4:	6213      	str	r3, [r2, #32]
 8001aa6:	e01c      	b.n	8001ae2 <HAL_RCC_OscConfig+0x36e>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	2b05      	cmp	r3, #5
 8001aae:	d10c      	bne.n	8001aca <HAL_RCC_OscConfig+0x356>
 8001ab0:	4b61      	ldr	r3, [pc, #388]	; (8001c38 <HAL_RCC_OscConfig+0x4c4>)
 8001ab2:	6a1b      	ldr	r3, [r3, #32]
 8001ab4:	4a60      	ldr	r2, [pc, #384]	; (8001c38 <HAL_RCC_OscConfig+0x4c4>)
 8001ab6:	f043 0304 	orr.w	r3, r3, #4
 8001aba:	6213      	str	r3, [r2, #32]
 8001abc:	4b5e      	ldr	r3, [pc, #376]	; (8001c38 <HAL_RCC_OscConfig+0x4c4>)
 8001abe:	6a1b      	ldr	r3, [r3, #32]
 8001ac0:	4a5d      	ldr	r2, [pc, #372]	; (8001c38 <HAL_RCC_OscConfig+0x4c4>)
 8001ac2:	f043 0301 	orr.w	r3, r3, #1
 8001ac6:	6213      	str	r3, [r2, #32]
 8001ac8:	e00b      	b.n	8001ae2 <HAL_RCC_OscConfig+0x36e>
 8001aca:	4b5b      	ldr	r3, [pc, #364]	; (8001c38 <HAL_RCC_OscConfig+0x4c4>)
 8001acc:	6a1b      	ldr	r3, [r3, #32]
 8001ace:	4a5a      	ldr	r2, [pc, #360]	; (8001c38 <HAL_RCC_OscConfig+0x4c4>)
 8001ad0:	f023 0301 	bic.w	r3, r3, #1
 8001ad4:	6213      	str	r3, [r2, #32]
 8001ad6:	4b58      	ldr	r3, [pc, #352]	; (8001c38 <HAL_RCC_OscConfig+0x4c4>)
 8001ad8:	6a1b      	ldr	r3, [r3, #32]
 8001ada:	4a57      	ldr	r2, [pc, #348]	; (8001c38 <HAL_RCC_OscConfig+0x4c4>)
 8001adc:	f023 0304 	bic.w	r3, r3, #4
 8001ae0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	68db      	ldr	r3, [r3, #12]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d015      	beq.n	8001b16 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aea:	f7ff fb67 	bl	80011bc <HAL_GetTick>
 8001aee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001af0:	e00a      	b.n	8001b08 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001af2:	f7ff fb63 	bl	80011bc <HAL_GetTick>
 8001af6:	4602      	mov	r2, r0
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d901      	bls.n	8001b08 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b04:	2303      	movs	r3, #3
 8001b06:	e0b1      	b.n	8001c6c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b08:	4b4b      	ldr	r3, [pc, #300]	; (8001c38 <HAL_RCC_OscConfig+0x4c4>)
 8001b0a:	6a1b      	ldr	r3, [r3, #32]
 8001b0c:	f003 0302 	and.w	r3, r3, #2
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d0ee      	beq.n	8001af2 <HAL_RCC_OscConfig+0x37e>
 8001b14:	e014      	b.n	8001b40 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b16:	f7ff fb51 	bl	80011bc <HAL_GetTick>
 8001b1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b1c:	e00a      	b.n	8001b34 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b1e:	f7ff fb4d 	bl	80011bc <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d901      	bls.n	8001b34 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e09b      	b.n	8001c6c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b34:	4b40      	ldr	r3, [pc, #256]	; (8001c38 <HAL_RCC_OscConfig+0x4c4>)
 8001b36:	6a1b      	ldr	r3, [r3, #32]
 8001b38:	f003 0302 	and.w	r3, r3, #2
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d1ee      	bne.n	8001b1e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b40:	7dfb      	ldrb	r3, [r7, #23]
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d105      	bne.n	8001b52 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b46:	4b3c      	ldr	r3, [pc, #240]	; (8001c38 <HAL_RCC_OscConfig+0x4c4>)
 8001b48:	69db      	ldr	r3, [r3, #28]
 8001b4a:	4a3b      	ldr	r2, [pc, #236]	; (8001c38 <HAL_RCC_OscConfig+0x4c4>)
 8001b4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b50:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	69db      	ldr	r3, [r3, #28]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	f000 8087 	beq.w	8001c6a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b5c:	4b36      	ldr	r3, [pc, #216]	; (8001c38 <HAL_RCC_OscConfig+0x4c4>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f003 030c 	and.w	r3, r3, #12
 8001b64:	2b08      	cmp	r3, #8
 8001b66:	d061      	beq.n	8001c2c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	69db      	ldr	r3, [r3, #28]
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d146      	bne.n	8001bfe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b70:	4b33      	ldr	r3, [pc, #204]	; (8001c40 <HAL_RCC_OscConfig+0x4cc>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b76:	f7ff fb21 	bl	80011bc <HAL_GetTick>
 8001b7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b7c:	e008      	b.n	8001b90 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b7e:	f7ff fb1d 	bl	80011bc <HAL_GetTick>
 8001b82:	4602      	mov	r2, r0
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d901      	bls.n	8001b90 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	e06d      	b.n	8001c6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b90:	4b29      	ldr	r3, [pc, #164]	; (8001c38 <HAL_RCC_OscConfig+0x4c4>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d1f0      	bne.n	8001b7e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6a1b      	ldr	r3, [r3, #32]
 8001ba0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ba4:	d108      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ba6:	4b24      	ldr	r3, [pc, #144]	; (8001c38 <HAL_RCC_OscConfig+0x4c4>)
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	4921      	ldr	r1, [pc, #132]	; (8001c38 <HAL_RCC_OscConfig+0x4c4>)
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bb8:	4b1f      	ldr	r3, [pc, #124]	; (8001c38 <HAL_RCC_OscConfig+0x4c4>)
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6a19      	ldr	r1, [r3, #32]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc8:	430b      	orrs	r3, r1
 8001bca:	491b      	ldr	r1, [pc, #108]	; (8001c38 <HAL_RCC_OscConfig+0x4c4>)
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bd0:	4b1b      	ldr	r3, [pc, #108]	; (8001c40 <HAL_RCC_OscConfig+0x4cc>)
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd6:	f7ff faf1 	bl	80011bc <HAL_GetTick>
 8001bda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bdc:	e008      	b.n	8001bf0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bde:	f7ff faed 	bl	80011bc <HAL_GetTick>
 8001be2:	4602      	mov	r2, r0
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d901      	bls.n	8001bf0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001bec:	2303      	movs	r3, #3
 8001bee:	e03d      	b.n	8001c6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bf0:	4b11      	ldr	r3, [pc, #68]	; (8001c38 <HAL_RCC_OscConfig+0x4c4>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d0f0      	beq.n	8001bde <HAL_RCC_OscConfig+0x46a>
 8001bfc:	e035      	b.n	8001c6a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bfe:	4b10      	ldr	r3, [pc, #64]	; (8001c40 <HAL_RCC_OscConfig+0x4cc>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c04:	f7ff fada 	bl	80011bc <HAL_GetTick>
 8001c08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c0a:	e008      	b.n	8001c1e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c0c:	f7ff fad6 	bl	80011bc <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e026      	b.n	8001c6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c1e:	4b06      	ldr	r3, [pc, #24]	; (8001c38 <HAL_RCC_OscConfig+0x4c4>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d1f0      	bne.n	8001c0c <HAL_RCC_OscConfig+0x498>
 8001c2a:	e01e      	b.n	8001c6a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	69db      	ldr	r3, [r3, #28]
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d107      	bne.n	8001c44 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e019      	b.n	8001c6c <HAL_RCC_OscConfig+0x4f8>
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	40007000 	.word	0x40007000
 8001c40:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c44:	4b0b      	ldr	r3, [pc, #44]	; (8001c74 <HAL_RCC_OscConfig+0x500>)
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6a1b      	ldr	r3, [r3, #32]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d106      	bne.n	8001c66 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d001      	beq.n	8001c6a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e000      	b.n	8001c6c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001c6a:	2300      	movs	r3, #0
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3718      	adds	r7, #24
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	40021000 	.word	0x40021000

08001c78 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d101      	bne.n	8001c8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e0d0      	b.n	8001e2e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c8c:	4b6a      	ldr	r3, [pc, #424]	; (8001e38 <HAL_RCC_ClockConfig+0x1c0>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0307 	and.w	r3, r3, #7
 8001c94:	683a      	ldr	r2, [r7, #0]
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d910      	bls.n	8001cbc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c9a:	4b67      	ldr	r3, [pc, #412]	; (8001e38 <HAL_RCC_ClockConfig+0x1c0>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f023 0207 	bic.w	r2, r3, #7
 8001ca2:	4965      	ldr	r1, [pc, #404]	; (8001e38 <HAL_RCC_ClockConfig+0x1c0>)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001caa:	4b63      	ldr	r3, [pc, #396]	; (8001e38 <HAL_RCC_ClockConfig+0x1c0>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0307 	and.w	r3, r3, #7
 8001cb2:	683a      	ldr	r2, [r7, #0]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d001      	beq.n	8001cbc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e0b8      	b.n	8001e2e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 0302 	and.w	r3, r3, #2
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d020      	beq.n	8001d0a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0304 	and.w	r3, r3, #4
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d005      	beq.n	8001ce0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cd4:	4b59      	ldr	r3, [pc, #356]	; (8001e3c <HAL_RCC_ClockConfig+0x1c4>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	4a58      	ldr	r2, [pc, #352]	; (8001e3c <HAL_RCC_ClockConfig+0x1c4>)
 8001cda:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001cde:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0308 	and.w	r3, r3, #8
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d005      	beq.n	8001cf8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cec:	4b53      	ldr	r3, [pc, #332]	; (8001e3c <HAL_RCC_ClockConfig+0x1c4>)
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	4a52      	ldr	r2, [pc, #328]	; (8001e3c <HAL_RCC_ClockConfig+0x1c4>)
 8001cf2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001cf6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cf8:	4b50      	ldr	r3, [pc, #320]	; (8001e3c <HAL_RCC_ClockConfig+0x1c4>)
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	494d      	ldr	r1, [pc, #308]	; (8001e3c <HAL_RCC_ClockConfig+0x1c4>)
 8001d06:	4313      	orrs	r3, r2
 8001d08:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0301 	and.w	r3, r3, #1
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d040      	beq.n	8001d98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d107      	bne.n	8001d2e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d1e:	4b47      	ldr	r3, [pc, #284]	; (8001e3c <HAL_RCC_ClockConfig+0x1c4>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d115      	bne.n	8001d56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e07f      	b.n	8001e2e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d107      	bne.n	8001d46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d36:	4b41      	ldr	r3, [pc, #260]	; (8001e3c <HAL_RCC_ClockConfig+0x1c4>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d109      	bne.n	8001d56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e073      	b.n	8001e2e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d46:	4b3d      	ldr	r3, [pc, #244]	; (8001e3c <HAL_RCC_ClockConfig+0x1c4>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0302 	and.w	r3, r3, #2
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d101      	bne.n	8001d56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e06b      	b.n	8001e2e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d56:	4b39      	ldr	r3, [pc, #228]	; (8001e3c <HAL_RCC_ClockConfig+0x1c4>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f023 0203 	bic.w	r2, r3, #3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	4936      	ldr	r1, [pc, #216]	; (8001e3c <HAL_RCC_ClockConfig+0x1c4>)
 8001d64:	4313      	orrs	r3, r2
 8001d66:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d68:	f7ff fa28 	bl	80011bc <HAL_GetTick>
 8001d6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d6e:	e00a      	b.n	8001d86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d70:	f7ff fa24 	bl	80011bc <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e053      	b.n	8001e2e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d86:	4b2d      	ldr	r3, [pc, #180]	; (8001e3c <HAL_RCC_ClockConfig+0x1c4>)
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f003 020c 	and.w	r2, r3, #12
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d1eb      	bne.n	8001d70 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d98:	4b27      	ldr	r3, [pc, #156]	; (8001e38 <HAL_RCC_ClockConfig+0x1c0>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0307 	and.w	r3, r3, #7
 8001da0:	683a      	ldr	r2, [r7, #0]
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d210      	bcs.n	8001dc8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001da6:	4b24      	ldr	r3, [pc, #144]	; (8001e38 <HAL_RCC_ClockConfig+0x1c0>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f023 0207 	bic.w	r2, r3, #7
 8001dae:	4922      	ldr	r1, [pc, #136]	; (8001e38 <HAL_RCC_ClockConfig+0x1c0>)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001db6:	4b20      	ldr	r3, [pc, #128]	; (8001e38 <HAL_RCC_ClockConfig+0x1c0>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0307 	and.w	r3, r3, #7
 8001dbe:	683a      	ldr	r2, [r7, #0]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d001      	beq.n	8001dc8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e032      	b.n	8001e2e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0304 	and.w	r3, r3, #4
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d008      	beq.n	8001de6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dd4:	4b19      	ldr	r3, [pc, #100]	; (8001e3c <HAL_RCC_ClockConfig+0x1c4>)
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	4916      	ldr	r1, [pc, #88]	; (8001e3c <HAL_RCC_ClockConfig+0x1c4>)
 8001de2:	4313      	orrs	r3, r2
 8001de4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0308 	and.w	r3, r3, #8
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d009      	beq.n	8001e06 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001df2:	4b12      	ldr	r3, [pc, #72]	; (8001e3c <HAL_RCC_ClockConfig+0x1c4>)
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	691b      	ldr	r3, [r3, #16]
 8001dfe:	00db      	lsls	r3, r3, #3
 8001e00:	490e      	ldr	r1, [pc, #56]	; (8001e3c <HAL_RCC_ClockConfig+0x1c4>)
 8001e02:	4313      	orrs	r3, r2
 8001e04:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e06:	f000 f821 	bl	8001e4c <HAL_RCC_GetSysClockFreq>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	4b0b      	ldr	r3, [pc, #44]	; (8001e3c <HAL_RCC_ClockConfig+0x1c4>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	091b      	lsrs	r3, r3, #4
 8001e12:	f003 030f 	and.w	r3, r3, #15
 8001e16:	490a      	ldr	r1, [pc, #40]	; (8001e40 <HAL_RCC_ClockConfig+0x1c8>)
 8001e18:	5ccb      	ldrb	r3, [r1, r3]
 8001e1a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e1e:	4a09      	ldr	r2, [pc, #36]	; (8001e44 <HAL_RCC_ClockConfig+0x1cc>)
 8001e20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e22:	4b09      	ldr	r3, [pc, #36]	; (8001e48 <HAL_RCC_ClockConfig+0x1d0>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7ff f986 	bl	8001138 <HAL_InitTick>

  return HAL_OK;
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3710      	adds	r7, #16
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	40022000 	.word	0x40022000
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	0800278c 	.word	0x0800278c
 8001e44:	2000000c 	.word	0x2000000c
 8001e48:	20000010 	.word	0x20000010

08001e4c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e4c:	b490      	push	{r4, r7}
 8001e4e:	b08a      	sub	sp, #40	; 0x28
 8001e50:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001e52:	4b29      	ldr	r3, [pc, #164]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0xac>)
 8001e54:	1d3c      	adds	r4, r7, #4
 8001e56:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e58:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001e5c:	f240 2301 	movw	r3, #513	; 0x201
 8001e60:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e62:	2300      	movs	r3, #0
 8001e64:	61fb      	str	r3, [r7, #28]
 8001e66:	2300      	movs	r3, #0
 8001e68:	61bb      	str	r3, [r7, #24]
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	627b      	str	r3, [r7, #36]	; 0x24
 8001e6e:	2300      	movs	r3, #0
 8001e70:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001e72:	2300      	movs	r3, #0
 8001e74:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e76:	4b21      	ldr	r3, [pc, #132]	; (8001efc <HAL_RCC_GetSysClockFreq+0xb0>)
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	f003 030c 	and.w	r3, r3, #12
 8001e82:	2b04      	cmp	r3, #4
 8001e84:	d002      	beq.n	8001e8c <HAL_RCC_GetSysClockFreq+0x40>
 8001e86:	2b08      	cmp	r3, #8
 8001e88:	d003      	beq.n	8001e92 <HAL_RCC_GetSysClockFreq+0x46>
 8001e8a:	e02b      	b.n	8001ee4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e8c:	4b1c      	ldr	r3, [pc, #112]	; (8001f00 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001e8e:	623b      	str	r3, [r7, #32]
      break;
 8001e90:	e02b      	b.n	8001eea <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	0c9b      	lsrs	r3, r3, #18
 8001e96:	f003 030f 	and.w	r3, r3, #15
 8001e9a:	3328      	adds	r3, #40	; 0x28
 8001e9c:	443b      	add	r3, r7
 8001e9e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001ea2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d012      	beq.n	8001ed4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001eae:	4b13      	ldr	r3, [pc, #76]	; (8001efc <HAL_RCC_GetSysClockFreq+0xb0>)
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	0c5b      	lsrs	r3, r3, #17
 8001eb4:	f003 0301 	and.w	r3, r3, #1
 8001eb8:	3328      	adds	r3, #40	; 0x28
 8001eba:	443b      	add	r3, r7
 8001ebc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001ec0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	4a0e      	ldr	r2, [pc, #56]	; (8001f00 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001ec6:	fb03 f202 	mul.w	r2, r3, r2
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ed0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ed2:	e004      	b.n	8001ede <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	4a0b      	ldr	r2, [pc, #44]	; (8001f04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ed8:	fb02 f303 	mul.w	r3, r2, r3
 8001edc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee0:	623b      	str	r3, [r7, #32]
      break;
 8001ee2:	e002      	b.n	8001eea <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ee4:	4b06      	ldr	r3, [pc, #24]	; (8001f00 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001ee6:	623b      	str	r3, [r7, #32]
      break;
 8001ee8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001eea:	6a3b      	ldr	r3, [r7, #32]
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3728      	adds	r7, #40	; 0x28
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bc90      	pop	{r4, r7}
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	0800277c 	.word	0x0800277c
 8001efc:	40021000 	.word	0x40021000
 8001f00:	007a1200 	.word	0x007a1200
 8001f04:	003d0900 	.word	0x003d0900

08001f08 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b085      	sub	sp, #20
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f10:	4b0a      	ldr	r3, [pc, #40]	; (8001f3c <RCC_Delay+0x34>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a0a      	ldr	r2, [pc, #40]	; (8001f40 <RCC_Delay+0x38>)
 8001f16:	fba2 2303 	umull	r2, r3, r2, r3
 8001f1a:	0a5b      	lsrs	r3, r3, #9
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	fb02 f303 	mul.w	r3, r2, r3
 8001f22:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f24:	bf00      	nop
  }
  while (Delay --);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	1e5a      	subs	r2, r3, #1
 8001f2a:	60fa      	str	r2, [r7, #12]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d1f9      	bne.n	8001f24 <RCC_Delay+0x1c>
}
 8001f30:	bf00      	nop
 8001f32:	bf00      	nop
 8001f34:	3714      	adds	r7, #20
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bc80      	pop	{r7}
 8001f3a:	4770      	bx	lr
 8001f3c:	2000000c 	.word	0x2000000c
 8001f40:	10624dd3 	.word	0x10624dd3

08001f44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d101      	bne.n	8001f56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e041      	b.n	8001fda <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d106      	bne.n	8001f70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f7fe fcc4 	bl	80008f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2202      	movs	r2, #2
 8001f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	3304      	adds	r3, #4
 8001f80:	4619      	mov	r1, r3
 8001f82:	4610      	mov	r0, r2
 8001f84:	f000 fa6a 	bl	800245c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2201      	movs	r2, #1
 8001f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
	...

08001fe4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b085      	sub	sp, #20
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d001      	beq.n	8001ffc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e035      	b.n	8002068 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2202      	movs	r2, #2
 8002000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	68da      	ldr	r2, [r3, #12]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f042 0201 	orr.w	r2, r2, #1
 8002012:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a16      	ldr	r2, [pc, #88]	; (8002074 <HAL_TIM_Base_Start_IT+0x90>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d009      	beq.n	8002032 <HAL_TIM_Base_Start_IT+0x4e>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002026:	d004      	beq.n	8002032 <HAL_TIM_Base_Start_IT+0x4e>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a12      	ldr	r2, [pc, #72]	; (8002078 <HAL_TIM_Base_Start_IT+0x94>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d111      	bne.n	8002056 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	f003 0307 	and.w	r3, r3, #7
 800203c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2b06      	cmp	r3, #6
 8002042:	d010      	beq.n	8002066 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f042 0201 	orr.w	r2, r2, #1
 8002052:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002054:	e007      	b.n	8002066 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f042 0201 	orr.w	r2, r2, #1
 8002064:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002066:	2300      	movs	r3, #0
}
 8002068:	4618      	mov	r0, r3
 800206a:	3714      	adds	r7, #20
 800206c:	46bd      	mov	sp, r7
 800206e:	bc80      	pop	{r7}
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	40012c00 	.word	0x40012c00
 8002078:	40000400 	.word	0x40000400

0800207c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	691b      	ldr	r3, [r3, #16]
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	2b02      	cmp	r3, #2
 8002090:	d122      	bne.n	80020d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	f003 0302 	and.w	r3, r3, #2
 800209c:	2b02      	cmp	r3, #2
 800209e:	d11b      	bne.n	80020d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f06f 0202 	mvn.w	r2, #2
 80020a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2201      	movs	r2, #1
 80020ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	699b      	ldr	r3, [r3, #24]
 80020b6:	f003 0303 	and.w	r3, r3, #3
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d003      	beq.n	80020c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f000 f9b1 	bl	8002426 <HAL_TIM_IC_CaptureCallback>
 80020c4:	e005      	b.n	80020d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f000 f9a4 	bl	8002414 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f000 f9b3 	bl	8002438 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	691b      	ldr	r3, [r3, #16]
 80020de:	f003 0304 	and.w	r3, r3, #4
 80020e2:	2b04      	cmp	r3, #4
 80020e4:	d122      	bne.n	800212c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	f003 0304 	and.w	r3, r3, #4
 80020f0:	2b04      	cmp	r3, #4
 80020f2:	d11b      	bne.n	800212c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f06f 0204 	mvn.w	r2, #4
 80020fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2202      	movs	r2, #2
 8002102:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	699b      	ldr	r3, [r3, #24]
 800210a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800210e:	2b00      	cmp	r3, #0
 8002110:	d003      	beq.n	800211a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f000 f987 	bl	8002426 <HAL_TIM_IC_CaptureCallback>
 8002118:	e005      	b.n	8002126 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f000 f97a 	bl	8002414 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f000 f989 	bl	8002438 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	691b      	ldr	r3, [r3, #16]
 8002132:	f003 0308 	and.w	r3, r3, #8
 8002136:	2b08      	cmp	r3, #8
 8002138:	d122      	bne.n	8002180 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	f003 0308 	and.w	r3, r3, #8
 8002144:	2b08      	cmp	r3, #8
 8002146:	d11b      	bne.n	8002180 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f06f 0208 	mvn.w	r2, #8
 8002150:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2204      	movs	r2, #4
 8002156:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	69db      	ldr	r3, [r3, #28]
 800215e:	f003 0303 	and.w	r3, r3, #3
 8002162:	2b00      	cmp	r3, #0
 8002164:	d003      	beq.n	800216e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f000 f95d 	bl	8002426 <HAL_TIM_IC_CaptureCallback>
 800216c:	e005      	b.n	800217a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f000 f950 	bl	8002414 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f000 f95f 	bl	8002438 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	691b      	ldr	r3, [r3, #16]
 8002186:	f003 0310 	and.w	r3, r3, #16
 800218a:	2b10      	cmp	r3, #16
 800218c:	d122      	bne.n	80021d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	f003 0310 	and.w	r3, r3, #16
 8002198:	2b10      	cmp	r3, #16
 800219a:	d11b      	bne.n	80021d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f06f 0210 	mvn.w	r2, #16
 80021a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2208      	movs	r2, #8
 80021aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	69db      	ldr	r3, [r3, #28]
 80021b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d003      	beq.n	80021c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f000 f933 	bl	8002426 <HAL_TIM_IC_CaptureCallback>
 80021c0:	e005      	b.n	80021ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f000 f926 	bl	8002414 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f000 f935 	bl	8002438 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	691b      	ldr	r3, [r3, #16]
 80021da:	f003 0301 	and.w	r3, r3, #1
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d10e      	bne.n	8002200 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	f003 0301 	and.w	r3, r3, #1
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d107      	bne.n	8002200 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f06f 0201 	mvn.w	r2, #1
 80021f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f7fe f9ee 	bl	80005dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	691b      	ldr	r3, [r3, #16]
 8002206:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800220a:	2b80      	cmp	r3, #128	; 0x80
 800220c:	d10e      	bne.n	800222c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002218:	2b80      	cmp	r3, #128	; 0x80
 800221a:	d107      	bne.n	800222c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002224:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f000 fa67 	bl	80026fa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	691b      	ldr	r3, [r3, #16]
 8002232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002236:	2b40      	cmp	r3, #64	; 0x40
 8002238:	d10e      	bne.n	8002258 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002244:	2b40      	cmp	r3, #64	; 0x40
 8002246:	d107      	bne.n	8002258 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002250:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f000 f8f9 	bl	800244a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	691b      	ldr	r3, [r3, #16]
 800225e:	f003 0320 	and.w	r3, r3, #32
 8002262:	2b20      	cmp	r3, #32
 8002264:	d10e      	bne.n	8002284 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	f003 0320 	and.w	r3, r3, #32
 8002270:	2b20      	cmp	r3, #32
 8002272:	d107      	bne.n	8002284 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f06f 0220 	mvn.w	r2, #32
 800227c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f000 fa32 	bl	80026e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002284:	bf00      	nop
 8002286:	3708      	adds	r7, #8
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}

0800228c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800229c:	2b01      	cmp	r3, #1
 800229e:	d101      	bne.n	80022a4 <HAL_TIM_ConfigClockSource+0x18>
 80022a0:	2302      	movs	r3, #2
 80022a2:	e0b3      	b.n	800240c <HAL_TIM_ConfigClockSource+0x180>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2201      	movs	r2, #1
 80022a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2202      	movs	r2, #2
 80022b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80022c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80022ca:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	68fa      	ldr	r2, [r7, #12]
 80022d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022dc:	d03e      	beq.n	800235c <HAL_TIM_ConfigClockSource+0xd0>
 80022de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022e2:	f200 8087 	bhi.w	80023f4 <HAL_TIM_ConfigClockSource+0x168>
 80022e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022ea:	f000 8085 	beq.w	80023f8 <HAL_TIM_ConfigClockSource+0x16c>
 80022ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022f2:	d87f      	bhi.n	80023f4 <HAL_TIM_ConfigClockSource+0x168>
 80022f4:	2b70      	cmp	r3, #112	; 0x70
 80022f6:	d01a      	beq.n	800232e <HAL_TIM_ConfigClockSource+0xa2>
 80022f8:	2b70      	cmp	r3, #112	; 0x70
 80022fa:	d87b      	bhi.n	80023f4 <HAL_TIM_ConfigClockSource+0x168>
 80022fc:	2b60      	cmp	r3, #96	; 0x60
 80022fe:	d050      	beq.n	80023a2 <HAL_TIM_ConfigClockSource+0x116>
 8002300:	2b60      	cmp	r3, #96	; 0x60
 8002302:	d877      	bhi.n	80023f4 <HAL_TIM_ConfigClockSource+0x168>
 8002304:	2b50      	cmp	r3, #80	; 0x50
 8002306:	d03c      	beq.n	8002382 <HAL_TIM_ConfigClockSource+0xf6>
 8002308:	2b50      	cmp	r3, #80	; 0x50
 800230a:	d873      	bhi.n	80023f4 <HAL_TIM_ConfigClockSource+0x168>
 800230c:	2b40      	cmp	r3, #64	; 0x40
 800230e:	d058      	beq.n	80023c2 <HAL_TIM_ConfigClockSource+0x136>
 8002310:	2b40      	cmp	r3, #64	; 0x40
 8002312:	d86f      	bhi.n	80023f4 <HAL_TIM_ConfigClockSource+0x168>
 8002314:	2b30      	cmp	r3, #48	; 0x30
 8002316:	d064      	beq.n	80023e2 <HAL_TIM_ConfigClockSource+0x156>
 8002318:	2b30      	cmp	r3, #48	; 0x30
 800231a:	d86b      	bhi.n	80023f4 <HAL_TIM_ConfigClockSource+0x168>
 800231c:	2b20      	cmp	r3, #32
 800231e:	d060      	beq.n	80023e2 <HAL_TIM_ConfigClockSource+0x156>
 8002320:	2b20      	cmp	r3, #32
 8002322:	d867      	bhi.n	80023f4 <HAL_TIM_ConfigClockSource+0x168>
 8002324:	2b00      	cmp	r3, #0
 8002326:	d05c      	beq.n	80023e2 <HAL_TIM_ConfigClockSource+0x156>
 8002328:	2b10      	cmp	r3, #16
 800232a:	d05a      	beq.n	80023e2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800232c:	e062      	b.n	80023f4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6818      	ldr	r0, [r3, #0]
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	6899      	ldr	r1, [r3, #8]
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	685a      	ldr	r2, [r3, #4]
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	f000 f95c 	bl	80025fa <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002350:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	68fa      	ldr	r2, [r7, #12]
 8002358:	609a      	str	r2, [r3, #8]
      break;
 800235a:	e04e      	b.n	80023fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6818      	ldr	r0, [r3, #0]
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	6899      	ldr	r1, [r3, #8]
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685a      	ldr	r2, [r3, #4]
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	f000 f945 	bl	80025fa <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	689a      	ldr	r2, [r3, #8]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800237e:	609a      	str	r2, [r3, #8]
      break;
 8002380:	e03b      	b.n	80023fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6818      	ldr	r0, [r3, #0]
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	6859      	ldr	r1, [r3, #4]
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	461a      	mov	r2, r3
 8002390:	f000 f8bc 	bl	800250c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2150      	movs	r1, #80	; 0x50
 800239a:	4618      	mov	r0, r3
 800239c:	f000 f913 	bl	80025c6 <TIM_ITRx_SetConfig>
      break;
 80023a0:	e02b      	b.n	80023fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6818      	ldr	r0, [r3, #0]
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	6859      	ldr	r1, [r3, #4]
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	461a      	mov	r2, r3
 80023b0:	f000 f8da 	bl	8002568 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2160      	movs	r1, #96	; 0x60
 80023ba:	4618      	mov	r0, r3
 80023bc:	f000 f903 	bl	80025c6 <TIM_ITRx_SetConfig>
      break;
 80023c0:	e01b      	b.n	80023fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6818      	ldr	r0, [r3, #0]
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	6859      	ldr	r1, [r3, #4]
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	461a      	mov	r2, r3
 80023d0:	f000 f89c 	bl	800250c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2140      	movs	r1, #64	; 0x40
 80023da:	4618      	mov	r0, r3
 80023dc:	f000 f8f3 	bl	80025c6 <TIM_ITRx_SetConfig>
      break;
 80023e0:	e00b      	b.n	80023fa <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4619      	mov	r1, r3
 80023ec:	4610      	mov	r0, r2
 80023ee:	f000 f8ea 	bl	80025c6 <TIM_ITRx_SetConfig>
        break;
 80023f2:	e002      	b.n	80023fa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80023f4:	bf00      	nop
 80023f6:	e000      	b.n	80023fa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80023f8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2201      	movs	r2, #1
 80023fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800240a:	2300      	movs	r3, #0
}
 800240c:	4618      	mov	r0, r3
 800240e:	3710      	adds	r7, #16
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}

08002414 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800241c:	bf00      	nop
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	bc80      	pop	{r7}
 8002424:	4770      	bx	lr

08002426 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002426:	b480      	push	{r7}
 8002428:	b083      	sub	sp, #12
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800242e:	bf00      	nop
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	bc80      	pop	{r7}
 8002436:	4770      	bx	lr

08002438 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002440:	bf00      	nop
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	bc80      	pop	{r7}
 8002448:	4770      	bx	lr

0800244a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800244a:	b480      	push	{r7}
 800244c:	b083      	sub	sp, #12
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002452:	bf00      	nop
 8002454:	370c      	adds	r7, #12
 8002456:	46bd      	mov	sp, r7
 8002458:	bc80      	pop	{r7}
 800245a:	4770      	bx	lr

0800245c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800245c:	b480      	push	{r7}
 800245e:	b085      	sub	sp, #20
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	4a25      	ldr	r2, [pc, #148]	; (8002504 <TIM_Base_SetConfig+0xa8>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d007      	beq.n	8002484 <TIM_Base_SetConfig+0x28>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800247a:	d003      	beq.n	8002484 <TIM_Base_SetConfig+0x28>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	4a22      	ldr	r2, [pc, #136]	; (8002508 <TIM_Base_SetConfig+0xac>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d108      	bne.n	8002496 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800248a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	68fa      	ldr	r2, [r7, #12]
 8002492:	4313      	orrs	r3, r2
 8002494:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a1a      	ldr	r2, [pc, #104]	; (8002504 <TIM_Base_SetConfig+0xa8>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d007      	beq.n	80024ae <TIM_Base_SetConfig+0x52>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024a4:	d003      	beq.n	80024ae <TIM_Base_SetConfig+0x52>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a17      	ldr	r2, [pc, #92]	; (8002508 <TIM_Base_SetConfig+0xac>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d108      	bne.n	80024c0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	68fa      	ldr	r2, [r7, #12]
 80024bc:	4313      	orrs	r3, r2
 80024be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	695b      	ldr	r3, [r3, #20]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	68fa      	ldr	r2, [r7, #12]
 80024d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	689a      	ldr	r2, [r3, #8]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	4a07      	ldr	r2, [pc, #28]	; (8002504 <TIM_Base_SetConfig+0xa8>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d103      	bne.n	80024f4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	691a      	ldr	r2, [r3, #16]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2201      	movs	r2, #1
 80024f8:	615a      	str	r2, [r3, #20]
}
 80024fa:	bf00      	nop
 80024fc:	3714      	adds	r7, #20
 80024fe:	46bd      	mov	sp, r7
 8002500:	bc80      	pop	{r7}
 8002502:	4770      	bx	lr
 8002504:	40012c00 	.word	0x40012c00
 8002508:	40000400 	.word	0x40000400

0800250c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800250c:	b480      	push	{r7}
 800250e:	b087      	sub	sp, #28
 8002510:	af00      	add	r7, sp, #0
 8002512:	60f8      	str	r0, [r7, #12]
 8002514:	60b9      	str	r1, [r7, #8]
 8002516:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	6a1b      	ldr	r3, [r3, #32]
 800251c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	6a1b      	ldr	r3, [r3, #32]
 8002522:	f023 0201 	bic.w	r2, r3, #1
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	699b      	ldr	r3, [r3, #24]
 800252e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002536:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	011b      	lsls	r3, r3, #4
 800253c:	693a      	ldr	r2, [r7, #16]
 800253e:	4313      	orrs	r3, r2
 8002540:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	f023 030a 	bic.w	r3, r3, #10
 8002548:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800254a:	697a      	ldr	r2, [r7, #20]
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	4313      	orrs	r3, r2
 8002550:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	693a      	ldr	r2, [r7, #16]
 8002556:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	697a      	ldr	r2, [r7, #20]
 800255c:	621a      	str	r2, [r3, #32]
}
 800255e:	bf00      	nop
 8002560:	371c      	adds	r7, #28
 8002562:	46bd      	mov	sp, r7
 8002564:	bc80      	pop	{r7}
 8002566:	4770      	bx	lr

08002568 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002568:	b480      	push	{r7}
 800256a:	b087      	sub	sp, #28
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6a1b      	ldr	r3, [r3, #32]
 8002578:	f023 0210 	bic.w	r2, r3, #16
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	699b      	ldr	r3, [r3, #24]
 8002584:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6a1b      	ldr	r3, [r3, #32]
 800258a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002592:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	031b      	lsls	r3, r3, #12
 8002598:	697a      	ldr	r2, [r7, #20]
 800259a:	4313      	orrs	r3, r2
 800259c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80025a4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	011b      	lsls	r3, r3, #4
 80025aa:	693a      	ldr	r2, [r7, #16]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	697a      	ldr	r2, [r7, #20]
 80025b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	693a      	ldr	r2, [r7, #16]
 80025ba:	621a      	str	r2, [r3, #32]
}
 80025bc:	bf00      	nop
 80025be:	371c      	adds	r7, #28
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bc80      	pop	{r7}
 80025c4:	4770      	bx	lr

080025c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80025c6:	b480      	push	{r7}
 80025c8:	b085      	sub	sp, #20
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
 80025ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80025de:	683a      	ldr	r2, [r7, #0]
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	f043 0307 	orr.w	r3, r3, #7
 80025e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	68fa      	ldr	r2, [r7, #12]
 80025ee:	609a      	str	r2, [r3, #8]
}
 80025f0:	bf00      	nop
 80025f2:	3714      	adds	r7, #20
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bc80      	pop	{r7}
 80025f8:	4770      	bx	lr

080025fa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80025fa:	b480      	push	{r7}
 80025fc:	b087      	sub	sp, #28
 80025fe:	af00      	add	r7, sp, #0
 8002600:	60f8      	str	r0, [r7, #12]
 8002602:	60b9      	str	r1, [r7, #8]
 8002604:	607a      	str	r2, [r7, #4]
 8002606:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002614:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	021a      	lsls	r2, r3, #8
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	431a      	orrs	r2, r3
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	4313      	orrs	r3, r2
 8002622:	697a      	ldr	r2, [r7, #20]
 8002624:	4313      	orrs	r3, r2
 8002626:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	697a      	ldr	r2, [r7, #20]
 800262c:	609a      	str	r2, [r3, #8]
}
 800262e:	bf00      	nop
 8002630:	371c      	adds	r7, #28
 8002632:	46bd      	mov	sp, r7
 8002634:	bc80      	pop	{r7}
 8002636:	4770      	bx	lr

08002638 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002638:	b480      	push	{r7}
 800263a:	b085      	sub	sp, #20
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002648:	2b01      	cmp	r3, #1
 800264a:	d101      	bne.n	8002650 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800264c:	2302      	movs	r3, #2
 800264e:	e041      	b.n	80026d4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2202      	movs	r2, #2
 800265c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002676:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	68fa      	ldr	r2, [r7, #12]
 800267e:	4313      	orrs	r3, r2
 8002680:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	68fa      	ldr	r2, [r7, #12]
 8002688:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a14      	ldr	r2, [pc, #80]	; (80026e0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d009      	beq.n	80026a8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800269c:	d004      	beq.n	80026a8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a10      	ldr	r2, [pc, #64]	; (80026e4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d10c      	bne.n	80026c2 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026ae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	68ba      	ldr	r2, [r7, #8]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	68ba      	ldr	r2, [r7, #8]
 80026c0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2201      	movs	r2, #1
 80026c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80026d2:	2300      	movs	r3, #0
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3714      	adds	r7, #20
 80026d8:	46bd      	mov	sp, r7
 80026da:	bc80      	pop	{r7}
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	40012c00 	.word	0x40012c00
 80026e4:	40000400 	.word	0x40000400

080026e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80026f0:	bf00      	nop
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bc80      	pop	{r7}
 80026f8:	4770      	bx	lr

080026fa <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80026fa:	b480      	push	{r7}
 80026fc:	b083      	sub	sp, #12
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002702:	bf00      	nop
 8002704:	370c      	adds	r7, #12
 8002706:	46bd      	mov	sp, r7
 8002708:	bc80      	pop	{r7}
 800270a:	4770      	bx	lr

0800270c <__libc_init_array>:
 800270c:	b570      	push	{r4, r5, r6, lr}
 800270e:	2600      	movs	r6, #0
 8002710:	4d0c      	ldr	r5, [pc, #48]	; (8002744 <__libc_init_array+0x38>)
 8002712:	4c0d      	ldr	r4, [pc, #52]	; (8002748 <__libc_init_array+0x3c>)
 8002714:	1b64      	subs	r4, r4, r5
 8002716:	10a4      	asrs	r4, r4, #2
 8002718:	42a6      	cmp	r6, r4
 800271a:	d109      	bne.n	8002730 <__libc_init_array+0x24>
 800271c:	f000 f822 	bl	8002764 <_init>
 8002720:	2600      	movs	r6, #0
 8002722:	4d0a      	ldr	r5, [pc, #40]	; (800274c <__libc_init_array+0x40>)
 8002724:	4c0a      	ldr	r4, [pc, #40]	; (8002750 <__libc_init_array+0x44>)
 8002726:	1b64      	subs	r4, r4, r5
 8002728:	10a4      	asrs	r4, r4, #2
 800272a:	42a6      	cmp	r6, r4
 800272c:	d105      	bne.n	800273a <__libc_init_array+0x2e>
 800272e:	bd70      	pop	{r4, r5, r6, pc}
 8002730:	f855 3b04 	ldr.w	r3, [r5], #4
 8002734:	4798      	blx	r3
 8002736:	3601      	adds	r6, #1
 8002738:	e7ee      	b.n	8002718 <__libc_init_array+0xc>
 800273a:	f855 3b04 	ldr.w	r3, [r5], #4
 800273e:	4798      	blx	r3
 8002740:	3601      	adds	r6, #1
 8002742:	e7f2      	b.n	800272a <__libc_init_array+0x1e>
 8002744:	0800279c 	.word	0x0800279c
 8002748:	0800279c 	.word	0x0800279c
 800274c:	0800279c 	.word	0x0800279c
 8002750:	080027a0 	.word	0x080027a0

08002754 <memset>:
 8002754:	4603      	mov	r3, r0
 8002756:	4402      	add	r2, r0
 8002758:	4293      	cmp	r3, r2
 800275a:	d100      	bne.n	800275e <memset+0xa>
 800275c:	4770      	bx	lr
 800275e:	f803 1b01 	strb.w	r1, [r3], #1
 8002762:	e7f9      	b.n	8002758 <memset+0x4>

08002764 <_init>:
 8002764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002766:	bf00      	nop
 8002768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800276a:	bc08      	pop	{r3}
 800276c:	469e      	mov	lr, r3
 800276e:	4770      	bx	lr

08002770 <_fini>:
 8002770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002772:	bf00      	nop
 8002774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002776:	bc08      	pop	{r3}
 8002778:	469e      	mov	lr, r3
 800277a:	4770      	bx	lr
